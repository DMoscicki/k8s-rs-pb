// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `metrics/pkg/apis/custom_metrics/v1beta1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:metrics.pkg.apis.custom_metrics.v1beta1.MetricListOptions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricListOptions {
    // message fields
    // @@protoc_insertion_point(field:metrics.pkg.apis.custom_metrics.v1beta1.MetricListOptions.labelSelector)
    pub labelSelector: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:metrics.pkg.apis.custom_metrics.v1beta1.MetricListOptions.metricLabelSelector)
    pub metricLabelSelector: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:metrics.pkg.apis.custom_metrics.v1beta1.MetricListOptions.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricListOptions {
    fn default() -> &'a MetricListOptions {
        <MetricListOptions as ::protobuf::Message>::default_instance()
    }
}

impl MetricListOptions {
    pub fn new() -> MetricListOptions {
        ::std::default::Default::default()
    }

    // optional string labelSelector = 1;

    pub fn labelSelector(&self) -> &str {
        match self.labelSelector.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_labelSelector(&mut self) {
        self.labelSelector = ::std::option::Option::None;
    }

    pub fn has_labelSelector(&self) -> bool {
        self.labelSelector.is_some()
    }

    // Param is passed by value, moved
    pub fn set_labelSelector(&mut self, v: ::std::string::String) {
        self.labelSelector = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_labelSelector(&mut self) -> &mut ::std::string::String {
        if self.labelSelector.is_none() {
            self.labelSelector = ::std::option::Option::Some(::std::string::String::new());
        }
        self.labelSelector.as_mut().unwrap()
    }

    // Take field
    pub fn take_labelSelector(&mut self) -> ::std::string::String {
        self.labelSelector.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string metricLabelSelector = 2;

    pub fn metricLabelSelector(&self) -> &str {
        match self.metricLabelSelector.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_metricLabelSelector(&mut self) {
        self.metricLabelSelector = ::std::option::Option::None;
    }

    pub fn has_metricLabelSelector(&self) -> bool {
        self.metricLabelSelector.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metricLabelSelector(&mut self, v: ::std::string::String) {
        self.metricLabelSelector = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metricLabelSelector(&mut self) -> &mut ::std::string::String {
        if self.metricLabelSelector.is_none() {
            self.metricLabelSelector = ::std::option::Option::Some(::std::string::String::new());
        }
        self.metricLabelSelector.as_mut().unwrap()
    }

    // Take field
    pub fn take_metricLabelSelector(&mut self) -> ::std::string::String {
        self.metricLabelSelector.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "labelSelector",
            |m: &MetricListOptions| { &m.labelSelector },
            |m: &mut MetricListOptions| { &mut m.labelSelector },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "metricLabelSelector",
            |m: &MetricListOptions| { &m.metricLabelSelector },
            |m: &mut MetricListOptions| { &mut m.metricLabelSelector },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricListOptions>(
            "MetricListOptions",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricListOptions {
    const NAME: &'static str = "MetricListOptions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.labelSelector = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.metricLabelSelector = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.labelSelector.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.metricLabelSelector.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.labelSelector.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.metricLabelSelector.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricListOptions {
        MetricListOptions::new()
    }

    fn clear(&mut self) {
        self.labelSelector = ::std::option::Option::None;
        self.metricLabelSelector = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricListOptions {
        static instance: MetricListOptions = MetricListOptions {
            labelSelector: ::std::option::Option::None,
            metricLabelSelector: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricListOptions {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricListOptions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricListOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricListOptions {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:metrics.pkg.apis.custom_metrics.v1beta1.MetricValue)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricValue {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:metrics.pkg.apis.custom_metrics.v1beta1.MetricValue.describedObject)
    pub describedObject: ::protobuf::MessageField<crate::api::core::v1::ObjectReference>,
    // @@protoc_insertion_point(field:metrics.pkg.apis.custom_metrics.v1beta1.MetricValue.metricName)
    pub metricName: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:metrics.pkg.apis.custom_metrics.v1beta1.MetricValue.timestamp)
    pub timestamp: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:metrics.pkg.apis.custom_metrics.v1beta1.MetricValue.window)
    pub window: ::std::option::Option<i64>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:metrics.pkg.apis.custom_metrics.v1beta1.MetricValue.value)
    pub value: ::protobuf::MessageField<crate::apimachinery::pkg::api::resource::Quantity>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:metrics.pkg.apis.custom_metrics.v1beta1.MetricValue.selector)
    pub selector: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::LabelSelector>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:metrics.pkg.apis.custom_metrics.v1beta1.MetricValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricValue {
    fn default() -> &'a MetricValue {
        <MetricValue as ::protobuf::Message>::default_instance()
    }
}

impl MetricValue {
    pub fn new() -> MetricValue {
        ::std::default::Default::default()
    }

    // optional .api.core.v1.ObjectReference describedObject = 1;

    pub fn describedObject(&self) -> &crate::api::core::v1::ObjectReference {
        self.describedObject.as_ref().unwrap_or_else(|| <crate::api::core::v1::ObjectReference as ::protobuf::Message>::default_instance())
    }

    pub fn clear_describedObject(&mut self) {
        self.describedObject.clear();
    }

    pub fn has_describedObject(&self) -> bool {
        self.describedObject.is_some()
    }

    // Param is passed by value, moved
    pub fn set_describedObject(&mut self, v: crate::api::core::v1::ObjectReference) {
        self.describedObject = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_describedObject(&mut self) -> &mut crate::api::core::v1::ObjectReference {
        self.describedObject.mut_or_insert_default()
    }

    // Take field
    pub fn take_describedObject(&mut self) -> crate::api::core::v1::ObjectReference {
        self.describedObject.take().unwrap_or_else(|| crate::api::core::v1::ObjectReference::new())
    }

    // optional string metricName = 2;

    pub fn metricName(&self) -> &str {
        match self.metricName.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_metricName(&mut self) {
        self.metricName = ::std::option::Option::None;
    }

    pub fn has_metricName(&self) -> bool {
        self.metricName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metricName(&mut self, v: ::std::string::String) {
        self.metricName = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metricName(&mut self) -> &mut ::std::string::String {
        if self.metricName.is_none() {
            self.metricName = ::std::option::Option::Some(::std::string::String::new());
        }
        self.metricName.as_mut().unwrap()
    }

    // Take field
    pub fn take_metricName(&mut self) -> ::std::string::String {
        self.metricName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time timestamp = 3;

    pub fn timestamp(&self) -> &crate::apimachinery::pkg::apis::meta::v1::Time {
        self.timestamp.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::Time) {
        self.timestamp = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::Time {
        self.timestamp.mut_or_insert_default()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::Time {
        self.timestamp.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional int64 window = 4;

    pub fn window(&self) -> i64 {
        self.window.unwrap_or(0)
    }

    pub fn clear_window(&mut self) {
        self.window = ::std::option::Option::None;
    }

    pub fn has_window(&self) -> bool {
        self.window.is_some()
    }

    // Param is passed by value, moved
    pub fn set_window(&mut self, v: i64) {
        self.window = ::std::option::Option::Some(v);
    }

    // optional .apimachinery.pkg.api.resource.Quantity value = 5;

    pub fn value(&self) -> &crate::apimachinery::pkg::api::resource::Quantity {
        self.value.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::api::resource::Quantity as ::protobuf::Message>::default_instance())
    }

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: crate::apimachinery::pkg::api::resource::Quantity) {
        self.value = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut crate::apimachinery::pkg::api::resource::Quantity {
        self.value.mut_or_insert_default()
    }

    // Take field
    pub fn take_value(&mut self) -> crate::apimachinery::pkg::api::resource::Quantity {
        self.value.take().unwrap_or_else(|| crate::apimachinery::pkg::api::resource::Quantity::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.LabelSelector selector = 6;

    pub fn selector(&self) -> &crate::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.selector.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::LabelSelector as ::protobuf::Message>::default_instance())
    }

    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    pub fn has_selector(&self) -> bool {
        self.selector.is_some()
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::LabelSelector) {
        self.selector = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.selector.mut_or_insert_default()
    }

    // Take field
    pub fn take_selector(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.selector.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::LabelSelector::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::api::core::v1::ObjectReference>(
            "describedObject",
            |m: &MetricValue| { &m.describedObject },
            |m: &mut MetricValue| { &mut m.describedObject },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "metricName",
            |m: &MetricValue| { &m.metricName },
            |m: &mut MetricValue| { &mut m.metricName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::Time>(
            "timestamp",
            |m: &MetricValue| { &m.timestamp },
            |m: &mut MetricValue| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "window",
            |m: &MetricValue| { &m.window },
            |m: &mut MetricValue| { &mut m.window },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::api::resource::Quantity>(
            "value",
            |m: &MetricValue| { &m.value },
            |m: &mut MetricValue| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::LabelSelector>(
            "selector",
            |m: &MetricValue| { &m.selector },
            |m: &mut MetricValue| { &mut m.selector },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricValue>(
            "MetricValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricValue {
    const NAME: &'static str = "MetricValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.describedObject)?;
                },
                18 => {
                    self.metricName = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                32 => {
                    self.window = ::std::option::Option::Some(is.read_int64()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.selector)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.describedObject.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.metricName.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.window {
            my_size += ::protobuf::rt::int64_size(4, v);
        }
        if let Some(v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.selector.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.describedObject.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.metricName.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.window {
            os.write_int64(4, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.selector.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricValue {
        MetricValue::new()
    }

    fn clear(&mut self) {
        self.describedObject.clear();
        self.metricName = ::std::option::Option::None;
        self.timestamp.clear();
        self.window = ::std::option::Option::None;
        self.value.clear();
        self.selector.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricValue {
        static instance: MetricValue = MetricValue {
            describedObject: ::protobuf::MessageField::none(),
            metricName: ::std::option::Option::None,
            timestamp: ::protobuf::MessageField::none(),
            window: ::std::option::Option::None,
            value: ::protobuf::MessageField::none(),
            selector: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:metrics.pkg.apis.custom_metrics.v1beta1.MetricValueList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricValueList {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:metrics.pkg.apis.custom_metrics.v1beta1.MetricValueList.metadata)
    pub metadata: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:metrics.pkg.apis.custom_metrics.v1beta1.MetricValueList.items)
    pub items: ::std::vec::Vec<MetricValue>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:metrics.pkg.apis.custom_metrics.v1beta1.MetricValueList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricValueList {
    fn default() -> &'a MetricValueList {
        <MetricValueList as ::protobuf::Message>::default_instance()
    }
}

impl MetricValueList {
    pub fn new() -> MetricValueList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .metrics.pkg.apis.custom_metrics.v1beta1.MetricValue items = 2;

    pub fn items(&self) -> &[MetricValue] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<MetricValue>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<MetricValue> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<MetricValue> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &MetricValueList| { &m.metadata },
            |m: &mut MetricValueList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &MetricValueList| { &m.items },
            |m: &mut MetricValueList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricValueList>(
            "MetricValueList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricValueList {
    const NAME: &'static str = "MetricValueList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricValueList {
        MetricValueList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricValueList {
        static instance: MetricValueList = MetricValueList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricValueList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricValueList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricValueList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricValueList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n7metrics/pkg/apis/custom_metrics/v1beta1/generated.proto\x12'metrics.p\
    kg.apis.custom_metrics.v1beta1\x1a\x1bapi/core/v1/generated.proto\x1a-ap\
    imachinery/pkg/api/resource/generated.proto\x1a-apimachinery/pkg/apis/me\
    ta/v1/generated.proto\x1a(apimachinery/pkg/runtime/generated.proto\x1a/a\
    pimachinery/pkg/runtime/schema/generated.proto\"k\n\x11MetricListOptions\
    \x12$\n\rlabelSelector\x18\x01\x20\x01(\tR\rlabelSelector\x120\n\x13metr\
    icLabelSelector\x18\x02\x20\x01(\tR\x13metricLabelSelector\"\xd9\x02\n\
    \x0bMetricValue\x12F\n\x0fdescribedObject\x18\x01\x20\x01(\x0b2\x1c.api.\
    core.v1.ObjectReferenceR\x0fdescribedObject\x12\x1e\n\nmetricName\x18\
    \x02\x20\x01(\tR\nmetricName\x12A\n\ttimestamp\x18\x03\x20\x01(\x0b2#.ap\
    imachinery.pkg.apis.meta.v1.TimeR\ttimestamp\x12\x16\n\x06window\x18\x04\
    \x20\x01(\x03R\x06window\x12=\n\x05value\x18\x05\x20\x01(\x0b2'.apimachi\
    nery.pkg.api.resource.QuantityR\x05value\x12H\n\x08selector\x18\x06\x20\
    \x01(\x0b2,.apimachinery.pkg.apis.meta.v1.LabelSelectorR\x08selector\"\
    \xa2\x01\n\x0fMetricValueList\x12C\n\x08metadata\x18\x01\x20\x01(\x0b2'.\
    apimachinery.pkg.apis.meta.v1.ListMetaR\x08metadata\x12J\n\x05items\x18\
    \x02\x20\x03(\x0b24.metrics.pkg.apis.custom_metrics.v1beta1.MetricValueR\
    \x05itemsB0Z.k8s.io/metrics/pkg/apis/custom_metrics/v1beta1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(MetricListOptions::generated_message_descriptor_data());
            messages.push(MetricValue::generated_message_descriptor_data());
            messages.push(MetricValueList::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
