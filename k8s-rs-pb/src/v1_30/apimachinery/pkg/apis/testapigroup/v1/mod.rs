// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `apimachinery/pkg/apis/testapigroup/v1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:apimachinery.pkg.apis.testapigroup.v1.Carp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Carp {
    // message fields
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.Carp.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.Carp.spec)
    pub spec: ::protobuf::MessageField<CarpSpec>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.Carp.status)
    pub status: ::protobuf::MessageField<CarpStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:apimachinery.pkg.apis.testapigroup.v1.Carp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Carp {
    fn default() -> &'a Carp {
        <Carp as ::protobuf::Message>::default_instance()
    }
}

impl Carp {
    pub fn new() -> Carp {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .apimachinery.pkg.apis.testapigroup.v1.CarpSpec spec = 2;

    pub fn spec(&self) -> &CarpSpec {
        self.spec.as_ref().unwrap_or_else(|| <CarpSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: CarpSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut CarpSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> CarpSpec {
        self.spec.take().unwrap_or_else(|| CarpSpec::new())
    }

    // optional .apimachinery.pkg.apis.testapigroup.v1.CarpStatus status = 3;

    pub fn status(&self) -> &CarpStatus {
        self.status.as_ref().unwrap_or_else(|| <CarpStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: CarpStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut CarpStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> CarpStatus {
        self.status.take().unwrap_or_else(|| CarpStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &Carp| { &m.metadata },
            |m: &mut Carp| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CarpSpec>(
            "spec",
            |m: &Carp| { &m.spec },
            |m: &mut Carp| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CarpStatus>(
            "status",
            |m: &Carp| { &m.status },
            |m: &mut Carp| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Carp>(
            "Carp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Carp {
    const NAME: &'static str = "Carp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Carp {
        Carp::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Carp {
        static instance: Carp = Carp {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Carp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Carp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Carp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Carp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:apimachinery.pkg.apis.testapigroup.v1.CarpCondition)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CarpCondition {
    // message fields
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpCondition.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpCondition.status)
    pub status: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpCondition.lastProbeTime)
    pub lastProbeTime: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpCondition.lastTransitionTime)
    pub lastTransitionTime: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpCondition.reason)
    pub reason: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpCondition.message)
    pub message: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:apimachinery.pkg.apis.testapigroup.v1.CarpCondition.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CarpCondition {
    fn default() -> &'a CarpCondition {
        <CarpCondition as ::protobuf::Message>::default_instance()
    }
}

impl CarpCondition {
    pub fn new() -> CarpCondition {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string status = 2;

    pub fn status(&self) -> &str {
        match self.status.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        if self.status.is_none() {
            self.status = ::std::option::Option::Some(::std::string::String::new());
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        self.status.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastProbeTime = 3;

    pub fn lastProbeTime(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.lastProbeTime.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastProbeTime(&mut self) {
        self.lastProbeTime.clear();
    }

    pub fn has_lastProbeTime(&self) -> bool {
        self.lastProbeTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastProbeTime(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastProbeTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastProbeTime(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.lastProbeTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastProbeTime(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.lastProbeTime.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

    pub fn lastTransitionTime(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastTransitionTime(&mut self) {
        self.lastTransitionTime.clear();
    }

    pub fn has_lastTransitionTime(&self) -> bool {
        self.lastTransitionTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastTransitionTime(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastTransitionTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastTransitionTime(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastTransitionTime(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional string reason = 5;

    pub fn reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string message = 6;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CarpCondition| { &m.type_ },
            |m: &mut CarpCondition| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &CarpCondition| { &m.status },
            |m: &mut CarpCondition| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>(
            "lastProbeTime",
            |m: &CarpCondition| { &m.lastProbeTime },
            |m: &mut CarpCondition| { &mut m.lastProbeTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>(
            "lastTransitionTime",
            |m: &CarpCondition| { &m.lastTransitionTime },
            |m: &mut CarpCondition| { &mut m.lastTransitionTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &CarpCondition| { &m.reason },
            |m: &mut CarpCondition| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &CarpCondition| { &m.message },
            |m: &mut CarpCondition| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CarpCondition>(
            "CarpCondition",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CarpCondition {
    const NAME: &'static str = "CarpCondition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.status = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastProbeTime)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastTransitionTime)?;
                },
                42 => {
                    self.reason = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.status.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.lastProbeTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lastTransitionTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.reason.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.status.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.lastProbeTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.lastTransitionTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.reason.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CarpCondition {
        CarpCondition::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.lastProbeTime.clear();
        self.lastTransitionTime.clear();
        self.reason = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CarpCondition {
        static instance: CarpCondition = CarpCondition {
            type_: ::std::option::Option::None,
            status: ::std::option::Option::None,
            lastProbeTime: ::protobuf::MessageField::none(),
            lastTransitionTime: ::protobuf::MessageField::none(),
            reason: ::std::option::Option::None,
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CarpCondition {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CarpCondition").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CarpCondition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CarpCondition {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:apimachinery.pkg.apis.testapigroup.v1.CarpList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CarpList {
    // message fields
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpList.items)
    pub items: ::std::vec::Vec<Carp>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:apimachinery.pkg.apis.testapigroup.v1.CarpList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CarpList {
    fn default() -> &'a CarpList {
        <CarpList as ::protobuf::Message>::default_instance()
    }
}

impl CarpList {
    pub fn new() -> CarpList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .apimachinery.pkg.apis.testapigroup.v1.Carp items = 2;

    pub fn items(&self) -> &[Carp] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<Carp>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<Carp> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<Carp> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &CarpList| { &m.metadata },
            |m: &mut CarpList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &CarpList| { &m.items },
            |m: &mut CarpList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CarpList>(
            "CarpList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CarpList {
    const NAME: &'static str = "CarpList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CarpList {
        CarpList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CarpList {
        static instance: CarpList = CarpList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CarpList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CarpList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CarpList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CarpList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:apimachinery.pkg.apis.testapigroup.v1.CarpSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CarpSpec {
    // message fields
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.restartPolicy)
    pub restartPolicy: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.terminationGracePeriodSeconds)
    pub terminationGracePeriodSeconds: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.activeDeadlineSeconds)
    pub activeDeadlineSeconds: ::std::option::Option<i64>,
    #[serde(default)]
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.nodeSelector)
    pub nodeSelector: ::std::collections::BTreeMap<::std::string::String, ::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.serviceAccountName)
    pub serviceAccountName: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.serviceAccount)
    pub serviceAccount: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.nodeName)
    pub nodeName: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.hostNetwork)
    pub hostNetwork: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.hostPID)
    pub hostPID: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.hostIPC)
    pub hostIPC: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.hostname)
    pub hostname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.subdomain)
    pub subdomain: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.schedulername)
    pub schedulername: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:apimachinery.pkg.apis.testapigroup.v1.CarpSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CarpSpec {
    fn default() -> &'a CarpSpec {
        <CarpSpec as ::protobuf::Message>::default_instance()
    }
}

impl CarpSpec {
    pub fn new() -> CarpSpec {
        ::std::default::Default::default()
    }

    // optional string restartPolicy = 3;

    pub fn restartPolicy(&self) -> &str {
        match self.restartPolicy.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_restartPolicy(&mut self) {
        self.restartPolicy = ::std::option::Option::None;
    }

    pub fn has_restartPolicy(&self) -> bool {
        self.restartPolicy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_restartPolicy(&mut self, v: ::std::string::String) {
        self.restartPolicy = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_restartPolicy(&mut self) -> &mut ::std::string::String {
        if self.restartPolicy.is_none() {
            self.restartPolicy = ::std::option::Option::Some(::std::string::String::new());
        }
        self.restartPolicy.as_mut().unwrap()
    }

    // Take field
    pub fn take_restartPolicy(&mut self) -> ::std::string::String {
        self.restartPolicy.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int64 terminationGracePeriodSeconds = 4;

    pub fn terminationGracePeriodSeconds(&self) -> i64 {
        self.terminationGracePeriodSeconds.unwrap_or(0)
    }

    pub fn clear_terminationGracePeriodSeconds(&mut self) {
        self.terminationGracePeriodSeconds = ::std::option::Option::None;
    }

    pub fn has_terminationGracePeriodSeconds(&self) -> bool {
        self.terminationGracePeriodSeconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_terminationGracePeriodSeconds(&mut self, v: i64) {
        self.terminationGracePeriodSeconds = ::std::option::Option::Some(v);
    }

    // optional int64 activeDeadlineSeconds = 5;

    pub fn activeDeadlineSeconds(&self) -> i64 {
        self.activeDeadlineSeconds.unwrap_or(0)
    }

    pub fn clear_activeDeadlineSeconds(&mut self) {
        self.activeDeadlineSeconds = ::std::option::Option::None;
    }

    pub fn has_activeDeadlineSeconds(&self) -> bool {
        self.activeDeadlineSeconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_activeDeadlineSeconds(&mut self, v: i64) {
        self.activeDeadlineSeconds = ::std::option::Option::Some(v);
    }

    // repeated .apimachinery.pkg.apis.testapigroup.v1.CarpSpec.NodeSelectorEntry nodeSelector = 7;

    pub fn nodeSelector(&self) -> &::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        &self.nodeSelector
    }

    pub fn clear_nodeSelector(&mut self) {
        self.nodeSelector.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodeSelector(&mut self, v: ::std::collections::BTreeMap<::std::string::String, ::std::string::String>) {
        self.nodeSelector = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodeSelector(&mut self) -> &mut ::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        &mut self.nodeSelector
    }

    // Take field
    pub fn take_nodeSelector(&mut self) -> ::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.nodeSelector, ::std::collections::BTreeMap::new())
    }

    // optional string serviceAccountName = 8;

    pub fn serviceAccountName(&self) -> &str {
        match self.serviceAccountName.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serviceAccountName(&mut self) {
        self.serviceAccountName = ::std::option::Option::None;
    }

    pub fn has_serviceAccountName(&self) -> bool {
        self.serviceAccountName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serviceAccountName(&mut self, v: ::std::string::String) {
        self.serviceAccountName = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serviceAccountName(&mut self) -> &mut ::std::string::String {
        if self.serviceAccountName.is_none() {
            self.serviceAccountName = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serviceAccountName.as_mut().unwrap()
    }

    // Take field
    pub fn take_serviceAccountName(&mut self) -> ::std::string::String {
        self.serviceAccountName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string serviceAccount = 9;

    pub fn serviceAccount(&self) -> &str {
        match self.serviceAccount.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serviceAccount(&mut self) {
        self.serviceAccount = ::std::option::Option::None;
    }

    pub fn has_serviceAccount(&self) -> bool {
        self.serviceAccount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serviceAccount(&mut self, v: ::std::string::String) {
        self.serviceAccount = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serviceAccount(&mut self) -> &mut ::std::string::String {
        if self.serviceAccount.is_none() {
            self.serviceAccount = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serviceAccount.as_mut().unwrap()
    }

    // Take field
    pub fn take_serviceAccount(&mut self) -> ::std::string::String {
        self.serviceAccount.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string nodeName = 10;

    pub fn nodeName(&self) -> &str {
        match self.nodeName.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_nodeName(&mut self) {
        self.nodeName = ::std::option::Option::None;
    }

    pub fn has_nodeName(&self) -> bool {
        self.nodeName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nodeName(&mut self, v: ::std::string::String) {
        self.nodeName = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nodeName(&mut self) -> &mut ::std::string::String {
        if self.nodeName.is_none() {
            self.nodeName = ::std::option::Option::Some(::std::string::String::new());
        }
        self.nodeName.as_mut().unwrap()
    }

    // Take field
    pub fn take_nodeName(&mut self) -> ::std::string::String {
        self.nodeName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool hostNetwork = 11;

    pub fn hostNetwork(&self) -> bool {
        self.hostNetwork.unwrap_or(false)
    }

    pub fn clear_hostNetwork(&mut self) {
        self.hostNetwork = ::std::option::Option::None;
    }

    pub fn has_hostNetwork(&self) -> bool {
        self.hostNetwork.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hostNetwork(&mut self, v: bool) {
        self.hostNetwork = ::std::option::Option::Some(v);
    }

    // optional bool hostPID = 12;

    pub fn hostPID(&self) -> bool {
        self.hostPID.unwrap_or(false)
    }

    pub fn clear_hostPID(&mut self) {
        self.hostPID = ::std::option::Option::None;
    }

    pub fn has_hostPID(&self) -> bool {
        self.hostPID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hostPID(&mut self, v: bool) {
        self.hostPID = ::std::option::Option::Some(v);
    }

    // optional bool hostIPC = 13;

    pub fn hostIPC(&self) -> bool {
        self.hostIPC.unwrap_or(false)
    }

    pub fn clear_hostIPC(&mut self) {
        self.hostIPC = ::std::option::Option::None;
    }

    pub fn has_hostIPC(&self) -> bool {
        self.hostIPC.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hostIPC(&mut self, v: bool) {
        self.hostIPC = ::std::option::Option::Some(v);
    }

    // optional string hostname = 16;

    pub fn hostname(&self) -> &str {
        match self.hostname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hostname(&mut self) {
        self.hostname = ::std::option::Option::None;
    }

    pub fn has_hostname(&self) -> bool {
        self.hostname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        if self.hostname.is_none() {
            self.hostname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.hostname.as_mut().unwrap()
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        self.hostname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string subdomain = 17;

    pub fn subdomain(&self) -> &str {
        match self.subdomain.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_subdomain(&mut self) {
        self.subdomain = ::std::option::Option::None;
    }

    pub fn has_subdomain(&self) -> bool {
        self.subdomain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_subdomain(&mut self, v: ::std::string::String) {
        self.subdomain = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subdomain(&mut self) -> &mut ::std::string::String {
        if self.subdomain.is_none() {
            self.subdomain = ::std::option::Option::Some(::std::string::String::new());
        }
        self.subdomain.as_mut().unwrap()
    }

    // Take field
    pub fn take_subdomain(&mut self) -> ::std::string::String {
        self.subdomain.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string schedulername = 19;

    pub fn schedulername(&self) -> &str {
        match self.schedulername.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_schedulername(&mut self) {
        self.schedulername = ::std::option::Option::None;
    }

    pub fn has_schedulername(&self) -> bool {
        self.schedulername.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedulername(&mut self, v: ::std::string::String) {
        self.schedulername = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schedulername(&mut self) -> &mut ::std::string::String {
        if self.schedulername.is_none() {
            self.schedulername = ::std::option::Option::Some(::std::string::String::new());
        }
        self.schedulername.as_mut().unwrap()
    }

    // Take field
    pub fn take_schedulername(&mut self) -> ::std::string::String {
        self.schedulername.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "restartPolicy",
            |m: &CarpSpec| { &m.restartPolicy },
            |m: &mut CarpSpec| { &mut m.restartPolicy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "terminationGracePeriodSeconds",
            |m: &CarpSpec| { &m.terminationGracePeriodSeconds },
            |m: &mut CarpSpec| { &mut m.terminationGracePeriodSeconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "activeDeadlineSeconds",
            |m: &CarpSpec| { &m.activeDeadlineSeconds },
            |m: &mut CarpSpec| { &mut m.activeDeadlineSeconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "nodeSelector",
            |m: &CarpSpec| { &m.nodeSelector },
            |m: &mut CarpSpec| { &mut m.nodeSelector },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serviceAccountName",
            |m: &CarpSpec| { &m.serviceAccountName },
            |m: &mut CarpSpec| { &mut m.serviceAccountName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serviceAccount",
            |m: &CarpSpec| { &m.serviceAccount },
            |m: &mut CarpSpec| { &mut m.serviceAccount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "nodeName",
            |m: &CarpSpec| { &m.nodeName },
            |m: &mut CarpSpec| { &mut m.nodeName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hostNetwork",
            |m: &CarpSpec| { &m.hostNetwork },
            |m: &mut CarpSpec| { &mut m.hostNetwork },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hostPID",
            |m: &CarpSpec| { &m.hostPID },
            |m: &mut CarpSpec| { &mut m.hostPID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hostIPC",
            |m: &CarpSpec| { &m.hostIPC },
            |m: &mut CarpSpec| { &mut m.hostIPC },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hostname",
            |m: &CarpSpec| { &m.hostname },
            |m: &mut CarpSpec| { &mut m.hostname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "subdomain",
            |m: &CarpSpec| { &m.subdomain },
            |m: &mut CarpSpec| { &mut m.subdomain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "schedulername",
            |m: &CarpSpec| { &m.schedulername },
            |m: &mut CarpSpec| { &mut m.schedulername },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CarpSpec>(
            "CarpSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CarpSpec {
    const NAME: &'static str = "CarpSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    self.restartPolicy = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.terminationGracePeriodSeconds = ::std::option::Option::Some(is.read_int64()?);
                },
                40 => {
                    self.activeDeadlineSeconds = ::std::option::Option::Some(is.read_int64()?);
                },
                58 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.nodeSelector.insert(key, value);
                },
                66 => {
                    self.serviceAccountName = ::std::option::Option::Some(is.read_string()?);
                },
                74 => {
                    self.serviceAccount = ::std::option::Option::Some(is.read_string()?);
                },
                82 => {
                    self.nodeName = ::std::option::Option::Some(is.read_string()?);
                },
                88 => {
                    self.hostNetwork = ::std::option::Option::Some(is.read_bool()?);
                },
                96 => {
                    self.hostPID = ::std::option::Option::Some(is.read_bool()?);
                },
                104 => {
                    self.hostIPC = ::std::option::Option::Some(is.read_bool()?);
                },
                130 => {
                    self.hostname = ::std::option::Option::Some(is.read_string()?);
                },
                138 => {
                    self.subdomain = ::std::option::Option::Some(is.read_string()?);
                },
                154 => {
                    self.schedulername = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.restartPolicy.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.terminationGracePeriodSeconds {
            my_size += ::protobuf::rt::int64_size(4, v);
        }
        if let Some(v) = self.activeDeadlineSeconds {
            my_size += ::protobuf::rt::int64_size(5, v);
        }
        for (k, v) in &self.nodeSelector {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.serviceAccountName.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.serviceAccount.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.nodeName.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        if let Some(v) = self.hostNetwork {
            my_size += 1 + 1;
        }
        if let Some(v) = self.hostPID {
            my_size += 1 + 1;
        }
        if let Some(v) = self.hostIPC {
            my_size += 1 + 1;
        }
        if let Some(v) = self.hostname.as_ref() {
            my_size += ::protobuf::rt::string_size(16, &v);
        }
        if let Some(v) = self.subdomain.as_ref() {
            my_size += ::protobuf::rt::string_size(17, &v);
        }
        if let Some(v) = self.schedulername.as_ref() {
            my_size += ::protobuf::rt::string_size(19, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.restartPolicy.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.terminationGracePeriodSeconds {
            os.write_int64(4, v)?;
        }
        if let Some(v) = self.activeDeadlineSeconds {
            os.write_int64(5, v)?;
        }
        for (k, v) in &self.nodeSelector {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(58)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.serviceAccountName.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.serviceAccount.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.nodeName.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.hostNetwork {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.hostPID {
            os.write_bool(12, v)?;
        }
        if let Some(v) = self.hostIPC {
            os.write_bool(13, v)?;
        }
        if let Some(v) = self.hostname.as_ref() {
            os.write_string(16, v)?;
        }
        if let Some(v) = self.subdomain.as_ref() {
            os.write_string(17, v)?;
        }
        if let Some(v) = self.schedulername.as_ref() {
            os.write_string(19, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CarpSpec {
        CarpSpec::new()
    }

    fn clear(&mut self) {
        self.restartPolicy = ::std::option::Option::None;
        self.terminationGracePeriodSeconds = ::std::option::Option::None;
        self.activeDeadlineSeconds = ::std::option::Option::None;
        self.nodeSelector.clear();
        self.serviceAccountName = ::std::option::Option::None;
        self.serviceAccount = ::std::option::Option::None;
        self.nodeName = ::std::option::Option::None;
        self.hostNetwork = ::std::option::Option::None;
        self.hostPID = ::std::option::Option::None;
        self.hostIPC = ::std::option::Option::None;
        self.hostname = ::std::option::Option::None;
        self.subdomain = ::std::option::Option::None;
        self.schedulername = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CarpSpec {
        static instance: ::protobuf::rt::Lazy<CarpSpec> = ::protobuf::rt::Lazy::new();
        instance.get(CarpSpec::new)
    }
}

impl ::protobuf::MessageFull for CarpSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CarpSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CarpSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CarpSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:apimachinery.pkg.apis.testapigroup.v1.CarpStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CarpStatus {
    // message fields
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpStatus.phase)
    pub phase: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpStatus.conditions)
    pub conditions: ::std::vec::Vec<CarpCondition>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpStatus.message)
    pub message: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpStatus.reason)
    pub reason: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpStatus.hostIP)
    pub hostIP: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpStatus.carpIP)
    pub carpIP: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:apimachinery.pkg.apis.testapigroup.v1.CarpStatus.startTime)
    pub startTime: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:apimachinery.pkg.apis.testapigroup.v1.CarpStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CarpStatus {
    fn default() -> &'a CarpStatus {
        <CarpStatus as ::protobuf::Message>::default_instance()
    }
}

impl CarpStatus {
    pub fn new() -> CarpStatus {
        ::std::default::Default::default()
    }

    // optional string phase = 1;

    pub fn phase(&self) -> &str {
        match self.phase.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_phase(&mut self) {
        self.phase = ::std::option::Option::None;
    }

    pub fn has_phase(&self) -> bool {
        self.phase.is_some()
    }

    // Param is passed by value, moved
    pub fn set_phase(&mut self, v: ::std::string::String) {
        self.phase = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_phase(&mut self) -> &mut ::std::string::String {
        if self.phase.is_none() {
            self.phase = ::std::option::Option::Some(::std::string::String::new());
        }
        self.phase.as_mut().unwrap()
    }

    // Take field
    pub fn take_phase(&mut self) -> ::std::string::String {
        self.phase.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .apimachinery.pkg.apis.testapigroup.v1.CarpCondition conditions = 2;

    pub fn conditions(&self) -> &[CarpCondition] {
        &self.conditions
    }

    pub fn clear_conditions(&mut self) {
        self.conditions.clear();
    }

    // Param is passed by value, moved
    pub fn set_conditions(&mut self, v: ::std::vec::Vec<CarpCondition>) {
        self.conditions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_conditions(&mut self) -> &mut ::std::vec::Vec<CarpCondition> {
        &mut self.conditions
    }

    // Take field
    pub fn take_conditions(&mut self) -> ::std::vec::Vec<CarpCondition> {
        ::std::mem::replace(&mut self.conditions, ::std::vec::Vec::new())
    }

    // optional string message = 3;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string reason = 4;

    pub fn reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string hostIP = 5;

    pub fn hostIP(&self) -> &str {
        match self.hostIP.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hostIP(&mut self) {
        self.hostIP = ::std::option::Option::None;
    }

    pub fn has_hostIP(&self) -> bool {
        self.hostIP.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hostIP(&mut self, v: ::std::string::String) {
        self.hostIP = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostIP(&mut self) -> &mut ::std::string::String {
        if self.hostIP.is_none() {
            self.hostIP = ::std::option::Option::Some(::std::string::String::new());
        }
        self.hostIP.as_mut().unwrap()
    }

    // Take field
    pub fn take_hostIP(&mut self) -> ::std::string::String {
        self.hostIP.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string carpIP = 6;

    pub fn carpIP(&self) -> &str {
        match self.carpIP.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_carpIP(&mut self) {
        self.carpIP = ::std::option::Option::None;
    }

    pub fn has_carpIP(&self) -> bool {
        self.carpIP.is_some()
    }

    // Param is passed by value, moved
    pub fn set_carpIP(&mut self, v: ::std::string::String) {
        self.carpIP = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_carpIP(&mut self) -> &mut ::std::string::String {
        if self.carpIP.is_none() {
            self.carpIP = ::std::option::Option::Some(::std::string::String::new());
        }
        self.carpIP.as_mut().unwrap()
    }

    // Take field
    pub fn take_carpIP(&mut self) -> ::std::string::String {
        self.carpIP.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time startTime = 7;

    pub fn startTime(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.startTime.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_startTime(&mut self) {
        self.startTime.clear();
    }

    pub fn has_startTime(&self) -> bool {
        self.startTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_startTime(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::Time) {
        self.startTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_startTime(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.startTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_startTime(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.startTime.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "phase",
            |m: &CarpStatus| { &m.phase },
            |m: &mut CarpStatus| { &mut m.phase },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "conditions",
            |m: &CarpStatus| { &m.conditions },
            |m: &mut CarpStatus| { &mut m.conditions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &CarpStatus| { &m.message },
            |m: &mut CarpStatus| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &CarpStatus| { &m.reason },
            |m: &mut CarpStatus| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hostIP",
            |m: &CarpStatus| { &m.hostIP },
            |m: &mut CarpStatus| { &mut m.hostIP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "carpIP",
            |m: &CarpStatus| { &m.carpIP },
            |m: &mut CarpStatus| { &mut m.carpIP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>(
            "startTime",
            |m: &CarpStatus| { &m.startTime },
            |m: &mut CarpStatus| { &mut m.startTime },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CarpStatus>(
            "CarpStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CarpStatus {
    const NAME: &'static str = "CarpStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.phase = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.conditions.push(is.read_message()?);
                },
                26 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.reason = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.hostIP = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.carpIP = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.startTime)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.phase.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.conditions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.reason.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.hostIP.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.carpIP.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.startTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.phase.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.conditions {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.message.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.reason.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.hostIP.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.carpIP.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.startTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CarpStatus {
        CarpStatus::new()
    }

    fn clear(&mut self) {
        self.phase = ::std::option::Option::None;
        self.conditions.clear();
        self.message = ::std::option::Option::None;
        self.reason = ::std::option::Option::None;
        self.hostIP = ::std::option::Option::None;
        self.carpIP = ::std::option::Option::None;
        self.startTime.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CarpStatus {
        static instance: CarpStatus = CarpStatus {
            phase: ::std::option::Option::None,
            conditions: ::std::vec::Vec::new(),
            message: ::std::option::Option::None,
            reason: ::std::option::Option::None,
            hostIP: ::std::option::Option::None,
            carpIP: ::std::option::Option::None,
            startTime: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CarpStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CarpStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CarpStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CarpStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n5apimachinery/pkg/apis/testapigroup/v1/generated.proto\x12%apimachiner\
    y.pkg.apis.testapigroup.v1\x1a-apimachinery/pkg/apis/meta/v1/generated.p\
    roto\x1a(apimachinery/pkg/runtime/generated.proto\x1a/apimachinery/pkg/r\
    untime/schema/generated.proto\"\xdd\x01\n\x04Carp\x12E\n\x08metadata\x18\
    \x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\x08metadat\
    a\x12C\n\x04spec\x18\x02\x20\x01(\x0b2/.apimachinery.pkg.apis.testapigro\
    up.v1.CarpSpecR\x04spec\x12I\n\x06status\x18\x03\x20\x01(\x0b21.apimachi\
    nery.pkg.apis.testapigroup.v1.CarpStatusR\x06status\"\x8d\x02\n\rCarpCon\
    dition\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12\x16\n\x06status\
    \x18\x02\x20\x01(\tR\x06status\x12I\n\rlastProbeTime\x18\x03\x20\x01(\
    \x0b2#.apimachinery.pkg.apis.meta.v1.TimeR\rlastProbeTime\x12S\n\x12last\
    TransitionTime\x18\x04\x20\x01(\x0b2#.apimachinery.pkg.apis.meta.v1.Time\
    R\x12lastTransitionTime\x12\x16\n\x06reason\x18\x05\x20\x01(\tR\x06reaso\
    n\x12\x18\n\x07message\x18\x06\x20\x01(\tR\x07message\"\x92\x01\n\x08Car\
    pList\x12C\n\x08metadata\x18\x01\x20\x01(\x0b2'.apimachinery.pkg.apis.me\
    ta.v1.ListMetaR\x08metadata\x12A\n\x05items\x18\x02\x20\x03(\x0b2+.apima\
    chinery.pkg.apis.testapigroup.v1.CarpR\x05items\"\xfe\x04\n\x08CarpSpec\
    \x12$\n\rrestartPolicy\x18\x03\x20\x01(\tR\rrestartPolicy\x12D\n\x1dterm\
    inationGracePeriodSeconds\x18\x04\x20\x01(\x03R\x1dterminationGracePerio\
    dSeconds\x124\n\x15activeDeadlineSeconds\x18\x05\x20\x01(\x03R\x15active\
    DeadlineSeconds\x12e\n\x0cnodeSelector\x18\x07\x20\x03(\x0b2A.apimachine\
    ry.pkg.apis.testapigroup.v1.CarpSpec.NodeSelectorEntryR\x0cnodeSelector\
    \x12.\n\x12serviceAccountName\x18\x08\x20\x01(\tR\x12serviceAccountName\
    \x12&\n\x0eserviceAccount\x18\t\x20\x01(\tR\x0eserviceAccount\x12\x1a\n\
    \x08nodeName\x18\n\x20\x01(\tR\x08nodeName\x12\x20\n\x0bhostNetwork\x18\
    \x0b\x20\x01(\x08R\x0bhostNetwork\x12\x18\n\x07hostPID\x18\x0c\x20\x01(\
    \x08R\x07hostPID\x12\x18\n\x07hostIPC\x18\r\x20\x01(\x08R\x07hostIPC\x12\
    \x1a\n\x08hostname\x18\x10\x20\x01(\tR\x08hostname\x12\x1c\n\tsubdomain\
    \x18\x11\x20\x01(\tR\tsubdomain\x12$\n\rschedulername\x18\x13\x20\x01(\t\
    R\rschedulername\x1a?\n\x11NodeSelectorEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x02\
    8\x01\"\x9d\x02\n\nCarpStatus\x12\x14\n\x05phase\x18\x01\x20\x01(\tR\x05\
    phase\x12T\n\nconditions\x18\x02\x20\x03(\x0b24.apimachinery.pkg.apis.te\
    stapigroup.v1.CarpConditionR\nconditions\x12\x18\n\x07message\x18\x03\
    \x20\x01(\tR\x07message\x12\x16\n\x06reason\x18\x04\x20\x01(\tR\x06reaso\
    n\x12\x16\n\x06hostIP\x18\x05\x20\x01(\tR\x06hostIP\x12\x16\n\x06carpIP\
    \x18\x06\x20\x01(\tR\x06carpIP\x12A\n\tstartTime\x18\x07\x20\x01(\x0b2#.\
    apimachinery.pkg.apis.meta.v1.TimeR\tstartTimeB.Z,k8s.io/apimachinery/pk\
    g/apis/testapigroup/v1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Carp::generated_message_descriptor_data());
            messages.push(CarpCondition::generated_message_descriptor_data());
            messages.push(CarpList::generated_message_descriptor_data());
            messages.push(CarpSpec::generated_message_descriptor_data());
            messages.push(CarpStatus::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
