// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/apiserverinternal/v1alpha1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.apiserverinternal.v1alpha1.ServerStorageVersion)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerStorageVersion {
    // message fields
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.ServerStorageVersion.apiServerID)
    pub apiServerID: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.ServerStorageVersion.encodingVersion)
    pub encodingVersion: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.ServerStorageVersion.decodableVersions)
    pub decodableVersions: ::std::vec::Vec<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.ServerStorageVersion.servedVersions)
    pub servedVersions: ::std::vec::Vec<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.apiserverinternal.v1alpha1.ServerStorageVersion.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServerStorageVersion {
    fn default() -> &'a ServerStorageVersion {
        <ServerStorageVersion as ::protobuf::Message>::default_instance()
    }
}

impl ServerStorageVersion {
    pub fn new() -> ServerStorageVersion {
        ::std::default::Default::default()
    }

    // optional string apiServerID = 1;

    pub fn apiServerID(&self) -> &str {
        match self.apiServerID.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_apiServerID(&mut self) {
        self.apiServerID = ::std::option::Option::None;
    }

    pub fn has_apiServerID(&self) -> bool {
        self.apiServerID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apiServerID(&mut self, v: ::std::string::String) {
        self.apiServerID = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apiServerID(&mut self) -> &mut ::std::string::String {
        if self.apiServerID.is_none() {
            self.apiServerID = ::std::option::Option::Some(::std::string::String::new());
        }
        self.apiServerID.as_mut().unwrap()
    }

    // Take field
    pub fn take_apiServerID(&mut self) -> ::std::string::String {
        self.apiServerID.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string encodingVersion = 2;

    pub fn encodingVersion(&self) -> &str {
        match self.encodingVersion.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_encodingVersion(&mut self) {
        self.encodingVersion = ::std::option::Option::None;
    }

    pub fn has_encodingVersion(&self) -> bool {
        self.encodingVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encodingVersion(&mut self, v: ::std::string::String) {
        self.encodingVersion = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encodingVersion(&mut self) -> &mut ::std::string::String {
        if self.encodingVersion.is_none() {
            self.encodingVersion = ::std::option::Option::Some(::std::string::String::new());
        }
        self.encodingVersion.as_mut().unwrap()
    }

    // Take field
    pub fn take_encodingVersion(&mut self) -> ::std::string::String {
        self.encodingVersion.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string decodableVersions = 3;

    pub fn decodableVersions(&self) -> &[::std::string::String] {
        &self.decodableVersions
    }

    pub fn clear_decodableVersions(&mut self) {
        self.decodableVersions.clear();
    }

    // Param is passed by value, moved
    pub fn set_decodableVersions(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.decodableVersions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_decodableVersions(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.decodableVersions
    }

    // Take field
    pub fn take_decodableVersions(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.decodableVersions, ::std::vec::Vec::new())
    }

    // repeated string servedVersions = 4;

    pub fn servedVersions(&self) -> &[::std::string::String] {
        &self.servedVersions
    }

    pub fn clear_servedVersions(&mut self) {
        self.servedVersions.clear();
    }

    // Param is passed by value, moved
    pub fn set_servedVersions(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.servedVersions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_servedVersions(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.servedVersions
    }

    // Take field
    pub fn take_servedVersions(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.servedVersions, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "apiServerID",
            |m: &ServerStorageVersion| { &m.apiServerID },
            |m: &mut ServerStorageVersion| { &mut m.apiServerID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "encodingVersion",
            |m: &ServerStorageVersion| { &m.encodingVersion },
            |m: &mut ServerStorageVersion| { &mut m.encodingVersion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "decodableVersions",
            |m: &ServerStorageVersion| { &m.decodableVersions },
            |m: &mut ServerStorageVersion| { &mut m.decodableVersions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "servedVersions",
            |m: &ServerStorageVersion| { &m.servedVersions },
            |m: &mut ServerStorageVersion| { &mut m.servedVersions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerStorageVersion>(
            "ServerStorageVersion",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServerStorageVersion {
    const NAME: &'static str = "ServerStorageVersion";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.apiServerID = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.encodingVersion = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.decodableVersions.push(is.read_string()?);
                },
                34 => {
                    self.servedVersions.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.apiServerID.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.encodingVersion.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.decodableVersions {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.servedVersions {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.apiServerID.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.encodingVersion.as_ref() {
            os.write_string(2, v)?;
        }
        for v in &self.decodableVersions {
            os.write_string(3, &v)?;
        };
        for v in &self.servedVersions {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServerStorageVersion {
        ServerStorageVersion::new()
    }

    fn clear(&mut self) {
        self.apiServerID = ::std::option::Option::None;
        self.encodingVersion = ::std::option::Option::None;
        self.decodableVersions.clear();
        self.servedVersions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServerStorageVersion {
        static instance: ServerStorageVersion = ServerStorageVersion {
            apiServerID: ::std::option::Option::None,
            encodingVersion: ::std::option::Option::None,
            decodableVersions: ::std::vec::Vec::new(),
            servedVersions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServerStorageVersion {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServerStorageVersion").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServerStorageVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerStorageVersion {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.apiserverinternal.v1alpha1.StorageVersion)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StorageVersion {
    // message fields
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersion.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersion.spec)
    pub spec: ::protobuf::MessageField<StorageVersionSpec>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersion.status)
    pub status: ::protobuf::MessageField<StorageVersionStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.apiserverinternal.v1alpha1.StorageVersion.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StorageVersion {
    fn default() -> &'a StorageVersion {
        <StorageVersion as ::protobuf::Message>::default_instance()
    }
}

impl StorageVersion {
    pub fn new() -> StorageVersion {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.apiserverinternal.v1alpha1.StorageVersionSpec spec = 2;

    pub fn spec(&self) -> &StorageVersionSpec {
        self.spec.as_ref().unwrap_or_else(|| <StorageVersionSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: StorageVersionSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut StorageVersionSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> StorageVersionSpec {
        self.spec.take().unwrap_or_else(|| StorageVersionSpec::new())
    }

    // optional .api.apiserverinternal.v1alpha1.StorageVersionStatus status = 3;

    pub fn status(&self) -> &StorageVersionStatus {
        self.status.as_ref().unwrap_or_else(|| <StorageVersionStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: StorageVersionStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut StorageVersionStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> StorageVersionStatus {
        self.status.take().unwrap_or_else(|| StorageVersionStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &StorageVersion| { &m.metadata },
            |m: &mut StorageVersion| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StorageVersionSpec>(
            "spec",
            |m: &StorageVersion| { &m.spec },
            |m: &mut StorageVersion| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StorageVersionStatus>(
            "status",
            |m: &StorageVersion| { &m.status },
            |m: &mut StorageVersion| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StorageVersion>(
            "StorageVersion",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StorageVersion {
    const NAME: &'static str = "StorageVersion";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StorageVersion {
        StorageVersion::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StorageVersion {
        static instance: StorageVersion = StorageVersion {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StorageVersion {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StorageVersion").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StorageVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageVersion {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.apiserverinternal.v1alpha1.StorageVersionCondition)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StorageVersionCondition {
    // message fields
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersionCondition.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersionCondition.status)
    pub status: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersionCondition.observedGeneration)
    pub observedGeneration: ::std::option::Option<i64>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersionCondition.lastTransitionTime)
    pub lastTransitionTime: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersionCondition.reason)
    pub reason: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersionCondition.message)
    pub message: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.apiserverinternal.v1alpha1.StorageVersionCondition.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StorageVersionCondition {
    fn default() -> &'a StorageVersionCondition {
        <StorageVersionCondition as ::protobuf::Message>::default_instance()
    }
}

impl StorageVersionCondition {
    pub fn new() -> StorageVersionCondition {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string status = 2;

    pub fn status(&self) -> &str {
        match self.status.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        if self.status.is_none() {
            self.status = ::std::option::Option::Some(::std::string::String::new());
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        self.status.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int64 observedGeneration = 3;

    pub fn observedGeneration(&self) -> i64 {
        self.observedGeneration.unwrap_or(0)
    }

    pub fn clear_observedGeneration(&mut self) {
        self.observedGeneration = ::std::option::Option::None;
    }

    pub fn has_observedGeneration(&self) -> bool {
        self.observedGeneration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_observedGeneration(&mut self, v: i64) {
        self.observedGeneration = ::std::option::Option::Some(v);
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

    pub fn lastTransitionTime(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastTransitionTime(&mut self) {
        self.lastTransitionTime.clear();
    }

    pub fn has_lastTransitionTime(&self) -> bool {
        self.lastTransitionTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastTransitionTime(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastTransitionTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastTransitionTime(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastTransitionTime(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional string reason = 5;

    pub fn reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string message = 6;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &StorageVersionCondition| { &m.type_ },
            |m: &mut StorageVersionCondition| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &StorageVersionCondition| { &m.status },
            |m: &mut StorageVersionCondition| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "observedGeneration",
            |m: &StorageVersionCondition| { &m.observedGeneration },
            |m: &mut StorageVersionCondition| { &mut m.observedGeneration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>(
            "lastTransitionTime",
            |m: &StorageVersionCondition| { &m.lastTransitionTime },
            |m: &mut StorageVersionCondition| { &mut m.lastTransitionTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &StorageVersionCondition| { &m.reason },
            |m: &mut StorageVersionCondition| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &StorageVersionCondition| { &m.message },
            |m: &mut StorageVersionCondition| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StorageVersionCondition>(
            "StorageVersionCondition",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StorageVersionCondition {
    const NAME: &'static str = "StorageVersionCondition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.status = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.observedGeneration = ::std::option::Option::Some(is.read_int64()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastTransitionTime)?;
                },
                42 => {
                    self.reason = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.status.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.observedGeneration {
            my_size += ::protobuf::rt::int64_size(3, v);
        }
        if let Some(v) = self.lastTransitionTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.reason.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.status.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.observedGeneration {
            os.write_int64(3, v)?;
        }
        if let Some(v) = self.lastTransitionTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.reason.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StorageVersionCondition {
        StorageVersionCondition::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.observedGeneration = ::std::option::Option::None;
        self.lastTransitionTime.clear();
        self.reason = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StorageVersionCondition {
        static instance: StorageVersionCondition = StorageVersionCondition {
            type_: ::std::option::Option::None,
            status: ::std::option::Option::None,
            observedGeneration: ::std::option::Option::None,
            lastTransitionTime: ::protobuf::MessageField::none(),
            reason: ::std::option::Option::None,
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StorageVersionCondition {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StorageVersionCondition").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StorageVersionCondition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageVersionCondition {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.apiserverinternal.v1alpha1.StorageVersionList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StorageVersionList {
    // message fields
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersionList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersionList.items)
    pub items: ::std::vec::Vec<StorageVersion>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.apiserverinternal.v1alpha1.StorageVersionList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StorageVersionList {
    fn default() -> &'a StorageVersionList {
        <StorageVersionList as ::protobuf::Message>::default_instance()
    }
}

impl StorageVersionList {
    pub fn new() -> StorageVersionList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.apiserverinternal.v1alpha1.StorageVersion items = 2;

    pub fn items(&self) -> &[StorageVersion] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<StorageVersion>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<StorageVersion> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<StorageVersion> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &StorageVersionList| { &m.metadata },
            |m: &mut StorageVersionList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &StorageVersionList| { &m.items },
            |m: &mut StorageVersionList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StorageVersionList>(
            "StorageVersionList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StorageVersionList {
    const NAME: &'static str = "StorageVersionList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StorageVersionList {
        StorageVersionList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StorageVersionList {
        static instance: StorageVersionList = StorageVersionList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StorageVersionList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StorageVersionList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StorageVersionList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageVersionList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.apiserverinternal.v1alpha1.StorageVersionSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StorageVersionSpec {
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.apiserverinternal.v1alpha1.StorageVersionSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StorageVersionSpec {
    fn default() -> &'a StorageVersionSpec {
        <StorageVersionSpec as ::protobuf::Message>::default_instance()
    }
}

impl StorageVersionSpec {
    pub fn new() -> StorageVersionSpec {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StorageVersionSpec>(
            "StorageVersionSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StorageVersionSpec {
    const NAME: &'static str = "StorageVersionSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StorageVersionSpec {
        StorageVersionSpec::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StorageVersionSpec {
        static instance: StorageVersionSpec = StorageVersionSpec {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StorageVersionSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StorageVersionSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StorageVersionSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageVersionSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.apiserverinternal.v1alpha1.StorageVersionStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StorageVersionStatus {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersionStatus.storageVersions)
    pub storageVersions: ::std::vec::Vec<ServerStorageVersion>,
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersionStatus.commonEncodingVersion)
    pub commonEncodingVersion: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apiserverinternal.v1alpha1.StorageVersionStatus.conditions)
    pub conditions: ::std::vec::Vec<StorageVersionCondition>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.apiserverinternal.v1alpha1.StorageVersionStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StorageVersionStatus {
    fn default() -> &'a StorageVersionStatus {
        <StorageVersionStatus as ::protobuf::Message>::default_instance()
    }
}

impl StorageVersionStatus {
    pub fn new() -> StorageVersionStatus {
        ::std::default::Default::default()
    }

    // repeated .api.apiserverinternal.v1alpha1.ServerStorageVersion storageVersions = 1;

    pub fn storageVersions(&self) -> &[ServerStorageVersion] {
        &self.storageVersions
    }

    pub fn clear_storageVersions(&mut self) {
        self.storageVersions.clear();
    }

    // Param is passed by value, moved
    pub fn set_storageVersions(&mut self, v: ::std::vec::Vec<ServerStorageVersion>) {
        self.storageVersions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_storageVersions(&mut self) -> &mut ::std::vec::Vec<ServerStorageVersion> {
        &mut self.storageVersions
    }

    // Take field
    pub fn take_storageVersions(&mut self) -> ::std::vec::Vec<ServerStorageVersion> {
        ::std::mem::replace(&mut self.storageVersions, ::std::vec::Vec::new())
    }

    // optional string commonEncodingVersion = 2;

    pub fn commonEncodingVersion(&self) -> &str {
        match self.commonEncodingVersion.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_commonEncodingVersion(&mut self) {
        self.commonEncodingVersion = ::std::option::Option::None;
    }

    pub fn has_commonEncodingVersion(&self) -> bool {
        self.commonEncodingVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commonEncodingVersion(&mut self, v: ::std::string::String) {
        self.commonEncodingVersion = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commonEncodingVersion(&mut self) -> &mut ::std::string::String {
        if self.commonEncodingVersion.is_none() {
            self.commonEncodingVersion = ::std::option::Option::Some(::std::string::String::new());
        }
        self.commonEncodingVersion.as_mut().unwrap()
    }

    // Take field
    pub fn take_commonEncodingVersion(&mut self) -> ::std::string::String {
        self.commonEncodingVersion.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .api.apiserverinternal.v1alpha1.StorageVersionCondition conditions = 3;

    pub fn conditions(&self) -> &[StorageVersionCondition] {
        &self.conditions
    }

    pub fn clear_conditions(&mut self) {
        self.conditions.clear();
    }

    // Param is passed by value, moved
    pub fn set_conditions(&mut self, v: ::std::vec::Vec<StorageVersionCondition>) {
        self.conditions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_conditions(&mut self) -> &mut ::std::vec::Vec<StorageVersionCondition> {
        &mut self.conditions
    }

    // Take field
    pub fn take_conditions(&mut self) -> ::std::vec::Vec<StorageVersionCondition> {
        ::std::mem::replace(&mut self.conditions, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "storageVersions",
            |m: &StorageVersionStatus| { &m.storageVersions },
            |m: &mut StorageVersionStatus| { &mut m.storageVersions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "commonEncodingVersion",
            |m: &StorageVersionStatus| { &m.commonEncodingVersion },
            |m: &mut StorageVersionStatus| { &mut m.commonEncodingVersion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "conditions",
            |m: &StorageVersionStatus| { &m.conditions },
            |m: &mut StorageVersionStatus| { &mut m.conditions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StorageVersionStatus>(
            "StorageVersionStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StorageVersionStatus {
    const NAME: &'static str = "StorageVersionStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.storageVersions.push(is.read_message()?);
                },
                18 => {
                    self.commonEncodingVersion = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.conditions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.storageVersions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.commonEncodingVersion.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.conditions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.storageVersions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.commonEncodingVersion.as_ref() {
            os.write_string(2, v)?;
        }
        for v in &self.conditions {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StorageVersionStatus {
        StorageVersionStatus::new()
    }

    fn clear(&mut self) {
        self.storageVersions.clear();
        self.commonEncodingVersion = ::std::option::Option::None;
        self.conditions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StorageVersionStatus {
        static instance: StorageVersionStatus = StorageVersionStatus {
            storageVersions: ::std::vec::Vec::new(),
            commonEncodingVersion: ::std::option::Option::None,
            conditions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StorageVersionStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StorageVersionStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StorageVersionStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageVersionStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n.api/apiserverinternal/v1alpha1/generated.proto\x12\x1eapi.apiserverin\
    ternal.v1alpha1\x1a-apimachinery/pkg/apis/meta/v1/generated.proto\x1a(ap\
    imachinery/pkg/runtime/generated.proto\x1a/apimachinery/pkg/runtime/sche\
    ma/generated.proto\"\xb8\x01\n\x14ServerStorageVersion\x12\x20\n\x0bapiS\
    erverID\x18\x01\x20\x01(\tR\x0bapiServerID\x12(\n\x0fencodingVersion\x18\
    \x02\x20\x01(\tR\x0fencodingVersion\x12,\n\x11decodableVersions\x18\x03\
    \x20\x03(\tR\x11decodableVersions\x12&\n\x0eservedVersions\x18\x04\x20\
    \x03(\tR\x0eservedVersions\"\xed\x01\n\x0eStorageVersion\x12E\n\x08metad\
    ata\x18\x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\x08\
    metadata\x12F\n\x04spec\x18\x02\x20\x01(\x0b22.api.apiserverinternal.v1a\
    lpha1.StorageVersionSpecR\x04spec\x12L\n\x06status\x18\x03\x20\x01(\x0b2\
    4.api.apiserverinternal.v1alpha1.StorageVersionStatusR\x06status\"\xfc\
    \x01\n\x17StorageVersionCondition\x12\x12\n\x04type\x18\x01\x20\x01(\tR\
    \x04type\x12\x16\n\x06status\x18\x02\x20\x01(\tR\x06status\x12.\n\x12obs\
    ervedGeneration\x18\x03\x20\x01(\x03R\x12observedGeneration\x12S\n\x12la\
    stTransitionTime\x18\x04\x20\x01(\x0b2#.apimachinery.pkg.apis.meta.v1.Ti\
    meR\x12lastTransitionTime\x12\x16\n\x06reason\x18\x05\x20\x01(\tR\x06rea\
    son\x12\x18\n\x07message\x18\x06\x20\x01(\tR\x07message\"\x9f\x01\n\x12S\
    torageVersionList\x12C\n\x08metadata\x18\x01\x20\x01(\x0b2'.apimachinery\
    .pkg.apis.meta.v1.ListMetaR\x08metadata\x12D\n\x05items\x18\x02\x20\x03(\
    \x0b2..api.apiserverinternal.v1alpha1.StorageVersionR\x05items\"\x14\n\
    \x12StorageVersionSpec\"\x85\x02\n\x14StorageVersionStatus\x12^\n\x0fsto\
    rageVersions\x18\x01\x20\x03(\x0b24.api.apiserverinternal.v1alpha1.Serve\
    rStorageVersionR\x0fstorageVersions\x124\n\x15commonEncodingVersion\x18\
    \x02\x20\x01(\tR\x15commonEncodingVersion\x12W\n\nconditions\x18\x03\x20\
    \x03(\x0b27.api.apiserverinternal.v1alpha1.StorageVersionConditionR\ncon\
    ditionsB'Z%k8s.io/api/apiserverinternal/v1alpha1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::v1alpha1::file_descriptor().clone());
            deps.push(super::v1alpha1::file_descriptor().clone());
            deps.push(super::v1alpha1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(ServerStorageVersion::generated_message_descriptor_data());
            messages.push(StorageVersion::generated_message_descriptor_data());
            messages.push(StorageVersionCondition::generated_message_descriptor_data());
            messages.push(StorageVersionList::generated_message_descriptor_data());
            messages.push(StorageVersionSpec::generated_message_descriptor_data());
            messages.push(StorageVersionStatus::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
