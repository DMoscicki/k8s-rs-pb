// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/events/v1beta1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.events.v1beta1.Event)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Event {
    // message fields
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.eventTime)
    pub eventTime: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.series)
    pub series: ::protobuf::MessageField<EventSeries>,
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.reportingController)
    pub reportingController: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.reportingInstance)
    pub reportingInstance: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.action)
    pub action: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.reason)
    pub reason: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.regarding)
    pub regarding: ::protobuf::MessageField<crate::v1_30::api::core::v1::ObjectReference>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.related)
    pub related: ::protobuf::MessageField<crate::v1_30::api::core::v1::ObjectReference>,
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.note)
    pub note: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.type)
    pub type_: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.deprecatedSource)
    pub deprecatedSource: ::protobuf::MessageField<crate::v1_30::api::core::v1::EventSource>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.deprecatedFirstTimestamp)
    pub deprecatedFirstTimestamp: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.deprecatedLastTimestamp)
    pub deprecatedLastTimestamp: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:api.events.v1beta1.Event.deprecatedCount)
    pub deprecatedCount: ::std::option::Option<i32>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.events.v1beta1.Event.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.MicroTime eventTime = 2;

    pub fn eventTime(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.eventTime.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_eventTime(&mut self) {
        self.eventTime.clear();
    }

    pub fn has_eventTime(&self) -> bool {
        self.eventTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eventTime(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::Time) {
        self.eventTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eventTime(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.eventTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_eventTime(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.eventTime.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional .api.events.v1beta1.EventSeries series = 3;

    pub fn series(&self) -> &EventSeries {
        self.series.as_ref().unwrap_or_else(|| <EventSeries as ::protobuf::Message>::default_instance())
    }

    pub fn clear_series(&mut self) {
        self.series.clear();
    }

    pub fn has_series(&self) -> bool {
        self.series.is_some()
    }

    // Param is passed by value, moved
    pub fn set_series(&mut self, v: EventSeries) {
        self.series = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_series(&mut self) -> &mut EventSeries {
        self.series.mut_or_insert_default()
    }

    // Take field
    pub fn take_series(&mut self) -> EventSeries {
        self.series.take().unwrap_or_else(|| EventSeries::new())
    }

    // optional string reportingController = 4;

    pub fn reportingController(&self) -> &str {
        match self.reportingController.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reportingController(&mut self) {
        self.reportingController = ::std::option::Option::None;
    }

    pub fn has_reportingController(&self) -> bool {
        self.reportingController.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reportingController(&mut self, v: ::std::string::String) {
        self.reportingController = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reportingController(&mut self) -> &mut ::std::string::String {
        if self.reportingController.is_none() {
            self.reportingController = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reportingController.as_mut().unwrap()
    }

    // Take field
    pub fn take_reportingController(&mut self) -> ::std::string::String {
        self.reportingController.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string reportingInstance = 5;

    pub fn reportingInstance(&self) -> &str {
        match self.reportingInstance.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reportingInstance(&mut self) {
        self.reportingInstance = ::std::option::Option::None;
    }

    pub fn has_reportingInstance(&self) -> bool {
        self.reportingInstance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reportingInstance(&mut self, v: ::std::string::String) {
        self.reportingInstance = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reportingInstance(&mut self) -> &mut ::std::string::String {
        if self.reportingInstance.is_none() {
            self.reportingInstance = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reportingInstance.as_mut().unwrap()
    }

    // Take field
    pub fn take_reportingInstance(&mut self) -> ::std::string::String {
        self.reportingInstance.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string action = 6;

    pub fn action(&self) -> &str {
        match self.action.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_action(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        self.action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: ::std::string::String) {
        self.action = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action(&mut self) -> &mut ::std::string::String {
        if self.action.is_none() {
            self.action = ::std::option::Option::Some(::std::string::String::new());
        }
        self.action.as_mut().unwrap()
    }

    // Take field
    pub fn take_action(&mut self) -> ::std::string::String {
        self.action.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string reason = 7;

    pub fn reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.core.v1.ObjectReference regarding = 8;

    pub fn regarding(&self) -> &crate::v1_30::api::core::v1::ObjectReference {
        self.regarding.as_ref().unwrap_or_else(|| <crate::v1_30::api::core::v1::ObjectReference as ::protobuf::Message>::default_instance())
    }

    pub fn clear_regarding(&mut self) {
        self.regarding.clear();
    }

    pub fn has_regarding(&self) -> bool {
        self.regarding.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regarding(&mut self, v: crate::v1_30::api::core::v1::ObjectReference) {
        self.regarding = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regarding(&mut self) -> &mut crate::v1_30::api::core::v1::ObjectReference {
        self.regarding.mut_or_insert_default()
    }

    // Take field
    pub fn take_regarding(&mut self) -> crate::v1_30::api::core::v1::ObjectReference {
        self.regarding.take().unwrap_or_else(|| crate::v1_30::api::core::v1::ObjectReference::new())
    }

    // optional .api.core.v1.ObjectReference related = 9;

    pub fn related(&self) -> &crate::v1_30::api::core::v1::ObjectReference {
        self.related.as_ref().unwrap_or_else(|| <crate::v1_30::api::core::v1::ObjectReference as ::protobuf::Message>::default_instance())
    }

    pub fn clear_related(&mut self) {
        self.related.clear();
    }

    pub fn has_related(&self) -> bool {
        self.related.is_some()
    }

    // Param is passed by value, moved
    pub fn set_related(&mut self, v: crate::v1_30::api::core::v1::ObjectReference) {
        self.related = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_related(&mut self) -> &mut crate::v1_30::api::core::v1::ObjectReference {
        self.related.mut_or_insert_default()
    }

    // Take field
    pub fn take_related(&mut self) -> crate::v1_30::api::core::v1::ObjectReference {
        self.related.take().unwrap_or_else(|| crate::v1_30::api::core::v1::ObjectReference::new())
    }

    // optional string note = 10;

    pub fn note(&self) -> &str {
        match self.note.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_note(&mut self) {
        self.note = ::std::option::Option::None;
    }

    pub fn has_note(&self) -> bool {
        self.note.is_some()
    }

    // Param is passed by value, moved
    pub fn set_note(&mut self, v: ::std::string::String) {
        self.note = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_note(&mut self) -> &mut ::std::string::String {
        if self.note.is_none() {
            self.note = ::std::option::Option::Some(::std::string::String::new());
        }
        self.note.as_mut().unwrap()
    }

    // Take field
    pub fn take_note(&mut self) -> ::std::string::String {
        self.note.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string type = 11;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.core.v1.EventSource deprecatedSource = 12;

    pub fn deprecatedSource(&self) -> &crate::v1_30::api::core::v1::EventSource {
        self.deprecatedSource.as_ref().unwrap_or_else(|| <crate::v1_30::api::core::v1::EventSource as ::protobuf::Message>::default_instance())
    }

    pub fn clear_deprecatedSource(&mut self) {
        self.deprecatedSource.clear();
    }

    pub fn has_deprecatedSource(&self) -> bool {
        self.deprecatedSource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecatedSource(&mut self, v: crate::v1_30::api::core::v1::EventSource) {
        self.deprecatedSource = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deprecatedSource(&mut self) -> &mut crate::v1_30::api::core::v1::EventSource {
        self.deprecatedSource.mut_or_insert_default()
    }

    // Take field
    pub fn take_deprecatedSource(&mut self) -> crate::v1_30::api::core::v1::EventSource {
        self.deprecatedSource.take().unwrap_or_else(|| crate::v1_30::api::core::v1::EventSource::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time deprecatedFirstTimestamp = 13;

    pub fn deprecatedFirstTimestamp(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.deprecatedFirstTimestamp.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_deprecatedFirstTimestamp(&mut self) {
        self.deprecatedFirstTimestamp.clear();
    }

    pub fn has_deprecatedFirstTimestamp(&self) -> bool {
        self.deprecatedFirstTimestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecatedFirstTimestamp(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::Time) {
        self.deprecatedFirstTimestamp = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deprecatedFirstTimestamp(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.deprecatedFirstTimestamp.mut_or_insert_default()
    }

    // Take field
    pub fn take_deprecatedFirstTimestamp(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.deprecatedFirstTimestamp.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time deprecatedLastTimestamp = 14;

    pub fn deprecatedLastTimestamp(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.deprecatedLastTimestamp.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_deprecatedLastTimestamp(&mut self) {
        self.deprecatedLastTimestamp.clear();
    }

    pub fn has_deprecatedLastTimestamp(&self) -> bool {
        self.deprecatedLastTimestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecatedLastTimestamp(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::Time) {
        self.deprecatedLastTimestamp = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deprecatedLastTimestamp(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.deprecatedLastTimestamp.mut_or_insert_default()
    }

    // Take field
    pub fn take_deprecatedLastTimestamp(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.deprecatedLastTimestamp.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional int32 deprecatedCount = 15;

    pub fn deprecatedCount(&self) -> i32 {
        self.deprecatedCount.unwrap_or(0)
    }

    pub fn clear_deprecatedCount(&mut self) {
        self.deprecatedCount = ::std::option::Option::None;
    }

    pub fn has_deprecatedCount(&self) -> bool {
        self.deprecatedCount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecatedCount(&mut self, v: i32) {
        self.deprecatedCount = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &Event| { &m.metadata },
            |m: &mut Event| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>(
            "eventTime",
            |m: &Event| { &m.eventTime },
            |m: &mut Event| { &mut m.eventTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EventSeries>(
            "series",
            |m: &Event| { &m.series },
            |m: &mut Event| { &mut m.series },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reportingController",
            |m: &Event| { &m.reportingController },
            |m: &mut Event| { &mut m.reportingController },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reportingInstance",
            |m: &Event| { &m.reportingInstance },
            |m: &mut Event| { &mut m.reportingInstance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "action",
            |m: &Event| { &m.action },
            |m: &mut Event| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &Event| { &m.reason },
            |m: &mut Event| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::api::core::v1::ObjectReference>(
            "regarding",
            |m: &Event| { &m.regarding },
            |m: &mut Event| { &mut m.regarding },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::api::core::v1::ObjectReference>(
            "related",
            |m: &Event| { &m.related },
            |m: &mut Event| { &mut m.related },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "note",
            |m: &Event| { &m.note },
            |m: &mut Event| { &mut m.note },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &Event| { &m.type_ },
            |m: &mut Event| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::api::core::v1::EventSource>(
            "deprecatedSource",
            |m: &Event| { &m.deprecatedSource },
            |m: &mut Event| { &mut m.deprecatedSource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>(
            "deprecatedFirstTimestamp",
            |m: &Event| { &m.deprecatedFirstTimestamp },
            |m: &mut Event| { &mut m.deprecatedFirstTimestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>(
            "deprecatedLastTimestamp",
            |m: &Event| { &m.deprecatedLastTimestamp },
            |m: &mut Event| { &mut m.deprecatedLastTimestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "deprecatedCount",
            |m: &Event| { &m.deprecatedCount },
            |m: &mut Event| { &mut m.deprecatedCount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Event>(
            "Event",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Event {
    const NAME: &'static str = "Event";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.eventTime)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.series)?;
                },
                34 => {
                    self.reportingController = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.reportingInstance = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.action = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.reason = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.regarding)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.related)?;
                },
                82 => {
                    self.note = ::std::option::Option::Some(is.read_string()?);
                },
                90 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.deprecatedSource)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.deprecatedFirstTimestamp)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.deprecatedLastTimestamp)?;
                },
                120 => {
                    self.deprecatedCount = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.eventTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.series.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.reportingController.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.reportingInstance.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.action.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.reason.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.regarding.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.related.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.note.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.deprecatedSource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.deprecatedFirstTimestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.deprecatedLastTimestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.deprecatedCount {
            my_size += ::protobuf::rt::int32_size(15, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.eventTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.series.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.reportingController.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.reportingInstance.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.action.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.reason.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.regarding.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.related.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.note.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.type_.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.deprecatedSource.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.deprecatedFirstTimestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.deprecatedLastTimestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.deprecatedCount {
            os.write_int32(15, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Event {
        Event::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.eventTime.clear();
        self.series.clear();
        self.reportingController = ::std::option::Option::None;
        self.reportingInstance = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.reason = ::std::option::Option::None;
        self.regarding.clear();
        self.related.clear();
        self.note = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.deprecatedSource.clear();
        self.deprecatedFirstTimestamp.clear();
        self.deprecatedLastTimestamp.clear();
        self.deprecatedCount = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Event {
        static instance: Event = Event {
            metadata: ::protobuf::MessageField::none(),
            eventTime: ::protobuf::MessageField::none(),
            series: ::protobuf::MessageField::none(),
            reportingController: ::std::option::Option::None,
            reportingInstance: ::std::option::Option::None,
            action: ::std::option::Option::None,
            reason: ::std::option::Option::None,
            regarding: ::protobuf::MessageField::none(),
            related: ::protobuf::MessageField::none(),
            note: ::std::option::Option::None,
            type_: ::std::option::Option::None,
            deprecatedSource: ::protobuf::MessageField::none(),
            deprecatedFirstTimestamp: ::protobuf::MessageField::none(),
            deprecatedLastTimestamp: ::protobuf::MessageField::none(),
            deprecatedCount: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Event {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Event").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.events.v1beta1.EventList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventList {
    // message fields
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.events.v1beta1.EventList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.events.v1beta1.EventList.items)
    pub items: ::std::vec::Vec<Event>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.events.v1beta1.EventList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EventList {
    fn default() -> &'a EventList {
        <EventList as ::protobuf::Message>::default_instance()
    }
}

impl EventList {
    pub fn new() -> EventList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.events.v1beta1.Event items = 2;

    pub fn items(&self) -> &[Event] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<Event>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<Event> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<Event> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &EventList| { &m.metadata },
            |m: &mut EventList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &EventList| { &m.items },
            |m: &mut EventList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EventList>(
            "EventList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EventList {
    const NAME: &'static str = "EventList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EventList {
        EventList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EventList {
        static instance: EventList = EventList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EventList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EventList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EventList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.events.v1beta1.EventSeries)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventSeries {
    // message fields
    // @@protoc_insertion_point(field:api.events.v1beta1.EventSeries.count)
    pub count: ::std::option::Option<i32>,
    #[serde(with = "crate::v1_30::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.events.v1beta1.EventSeries.lastObservedTime)
    pub lastObservedTime: ::protobuf::MessageField<crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.events.v1beta1.EventSeries.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EventSeries {
    fn default() -> &'a EventSeries {
        <EventSeries as ::protobuf::Message>::default_instance()
    }
}

impl EventSeries {
    pub fn new() -> EventSeries {
        ::std::default::Default::default()
    }

    // optional int32 count = 1;

    pub fn count(&self) -> i32 {
        self.count.unwrap_or(0)
    }

    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i32) {
        self.count = ::std::option::Option::Some(v);
    }

    // optional .apimachinery.pkg.apis.meta.v1.MicroTime lastObservedTime = 2;

    pub fn lastObservedTime(&self) -> &crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.lastObservedTime.as_ref().unwrap_or_else(|| <crate::v1_30::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastObservedTime(&mut self) {
        self.lastObservedTime.clear();
    }

    pub fn has_lastObservedTime(&self) -> bool {
        self.lastObservedTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastObservedTime(&mut self, v: crate::v1_30::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastObservedTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastObservedTime(&mut self) -> &mut crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.lastObservedTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastObservedTime(&mut self) -> crate::v1_30::apimachinery::pkg::apis::meta::v1::Time {
        self.lastObservedTime.take().unwrap_or_else(|| crate::v1_30::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "count",
            |m: &EventSeries| { &m.count },
            |m: &mut EventSeries| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_30::apimachinery::pkg::apis::meta::v1::Time>(
            "lastObservedTime",
            |m: &EventSeries| { &m.lastObservedTime },
            |m: &mut EventSeries| { &mut m.lastObservedTime },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EventSeries>(
            "EventSeries",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EventSeries {
    const NAME: &'static str = "EventSeries";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.count = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastObservedTime)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.count {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.lastObservedTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.count {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.lastObservedTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EventSeries {
        EventSeries::new()
    }

    fn clear(&mut self) {
        self.count = ::std::option::Option::None;
        self.lastObservedTime.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EventSeries {
        static instance: EventSeries = EventSeries {
            count: ::std::option::Option::None,
            lastObservedTime: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EventSeries {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EventSeries").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EventSeries {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventSeries {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"api/events/v1beta1/generated.proto\x12\x12api.events.v1beta1\x1a\x1b\
    api/core/v1/generated.proto\x1a-apimachinery/pkg/apis/meta/v1/generated.\
    proto\x1a(apimachinery/pkg/runtime/generated.proto\x1a/apimachinery/pkg/\
    runtime/schema/generated.proto\"\xab\x06\n\x05Event\x12E\n\x08metadata\
    \x18\x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\x08met\
    adata\x12F\n\teventTime\x18\x02\x20\x01(\x0b2(.apimachinery.pkg.apis.met\
    a.v1.MicroTimeR\teventTime\x127\n\x06series\x18\x03\x20\x01(\x0b2\x1f.ap\
    i.events.v1beta1.EventSeriesR\x06series\x120\n\x13reportingController\
    \x18\x04\x20\x01(\tR\x13reportingController\x12,\n\x11reportingInstance\
    \x18\x05\x20\x01(\tR\x11reportingInstance\x12\x16\n\x06action\x18\x06\
    \x20\x01(\tR\x06action\x12\x16\n\x06reason\x18\x07\x20\x01(\tR\x06reason\
    \x12:\n\tregarding\x18\x08\x20\x01(\x0b2\x1c.api.core.v1.ObjectReference\
    R\tregarding\x126\n\x07related\x18\t\x20\x01(\x0b2\x1c.api.core.v1.Objec\
    tReferenceR\x07related\x12\x12\n\x04note\x18\n\x20\x01(\tR\x04note\x12\
    \x12\n\x04type\x18\x0b\x20\x01(\tR\x04type\x12D\n\x10deprecatedSource\
    \x18\x0c\x20\x01(\x0b2\x18.api.core.v1.EventSourceR\x10deprecatedSource\
    \x12_\n\x18deprecatedFirstTimestamp\x18\r\x20\x01(\x0b2#.apimachinery.pk\
    g.apis.meta.v1.TimeR\x18deprecatedFirstTimestamp\x12]\n\x17deprecatedLas\
    tTimestamp\x18\x0e\x20\x01(\x0b2#.apimachinery.pkg.apis.meta.v1.TimeR\
    \x17deprecatedLastTimestamp\x12(\n\x0fdeprecatedCount\x18\x0f\x20\x01(\
    \x05R\x0fdeprecatedCount\"\x81\x01\n\tEventList\x12C\n\x08metadata\x18\
    \x01\x20\x01(\x0b2'.apimachinery.pkg.apis.meta.v1.ListMetaR\x08metadata\
    \x12/\n\x05items\x18\x02\x20\x03(\x0b2\x19.api.events.v1beta1.EventR\x05\
    items\"y\n\x0bEventSeries\x12\x14\n\x05count\x18\x01\x20\x01(\x05R\x05co\
    unt\x12T\n\x10lastObservedTime\x18\x02\x20\x01(\x0b2(.apimachinery.pkg.a\
    pis.meta.v1.MicroTimeR\x10lastObservedTimeB\x1bZ\x19k8s.io/api/events/v1\
    beta1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Event::generated_message_descriptor_data());
            messages.push(EventList::generated_message_descriptor_data());
            messages.push(EventSeries::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
