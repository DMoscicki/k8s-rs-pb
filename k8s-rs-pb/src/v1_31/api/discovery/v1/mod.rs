// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/discovery/v1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.discovery.v1.Endpoint)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Endpoint {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.discovery.v1.Endpoint.addresses)
    pub addresses: ::std::vec::Vec<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.discovery.v1.Endpoint.conditions)
    pub conditions: ::protobuf::MessageField<EndpointConditions>,
    // @@protoc_insertion_point(field:api.discovery.v1.Endpoint.hostname)
    pub hostname: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.discovery.v1.Endpoint.targetRef)
    pub targetRef: ::protobuf::MessageField<crate::v1_31::api::core::v1::ObjectReference>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.discovery.v1.Endpoint.deprecatedTopology)
    pub deprecatedTopology: ::std::collections::BTreeMap<::std::string::String, ::std::string::String>,
    // @@protoc_insertion_point(field:api.discovery.v1.Endpoint.nodeName)
    pub nodeName: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.discovery.v1.Endpoint.zone)
    pub zone: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.discovery.v1.Endpoint.hints)
    pub hints: ::protobuf::MessageField<EndpointHints>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.discovery.v1.Endpoint.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Endpoint {
    fn default() -> &'a Endpoint {
        <Endpoint as ::protobuf::Message>::default_instance()
    }
}

impl Endpoint {
    pub fn new() -> Endpoint {
        ::std::default::Default::default()
    }

    // repeated string addresses = 1;

    pub fn addresses(&self) -> &[::std::string::String] {
        &self.addresses
    }

    pub fn clear_addresses(&mut self) {
        self.addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_addresses(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addresses(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.addresses
    }

    // Take field
    pub fn take_addresses(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.addresses, ::std::vec::Vec::new())
    }

    // optional .api.discovery.v1.EndpointConditions conditions = 2;

    pub fn conditions(&self) -> &EndpointConditions {
        self.conditions.as_ref().unwrap_or_else(|| <EndpointConditions as ::protobuf::Message>::default_instance())
    }

    pub fn clear_conditions(&mut self) {
        self.conditions.clear();
    }

    pub fn has_conditions(&self) -> bool {
        self.conditions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conditions(&mut self, v: EndpointConditions) {
        self.conditions = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conditions(&mut self) -> &mut EndpointConditions {
        self.conditions.mut_or_insert_default()
    }

    // Take field
    pub fn take_conditions(&mut self) -> EndpointConditions {
        self.conditions.take().unwrap_or_else(|| EndpointConditions::new())
    }

    // optional string hostname = 3;

    pub fn hostname(&self) -> &str {
        match self.hostname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hostname(&mut self) {
        self.hostname = ::std::option::Option::None;
    }

    pub fn has_hostname(&self) -> bool {
        self.hostname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        if self.hostname.is_none() {
            self.hostname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.hostname.as_mut().unwrap()
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        self.hostname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.core.v1.ObjectReference targetRef = 4;

    pub fn targetRef(&self) -> &crate::v1_31::api::core::v1::ObjectReference {
        self.targetRef.as_ref().unwrap_or_else(|| <crate::v1_31::api::core::v1::ObjectReference as ::protobuf::Message>::default_instance())
    }

    pub fn clear_targetRef(&mut self) {
        self.targetRef.clear();
    }

    pub fn has_targetRef(&self) -> bool {
        self.targetRef.is_some()
    }

    // Param is passed by value, moved
    pub fn set_targetRef(&mut self, v: crate::v1_31::api::core::v1::ObjectReference) {
        self.targetRef = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_targetRef(&mut self) -> &mut crate::v1_31::api::core::v1::ObjectReference {
        self.targetRef.mut_or_insert_default()
    }

    // Take field
    pub fn take_targetRef(&mut self) -> crate::v1_31::api::core::v1::ObjectReference {
        self.targetRef.take().unwrap_or_else(|| crate::v1_31::api::core::v1::ObjectReference::new())
    }

    // repeated .api.discovery.v1.Endpoint.DeprecatedTopologyEntry deprecatedTopology = 5;

    pub fn deprecatedTopology(&self) -> &::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        &self.deprecatedTopology
    }

    pub fn clear_deprecatedTopology(&mut self) {
        self.deprecatedTopology.clear();
    }

    // Param is passed by value, moved
    pub fn set_deprecatedTopology(&mut self, v: ::std::collections::BTreeMap<::std::string::String, ::std::string::String>) {
        self.deprecatedTopology = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deprecatedTopology(&mut self) -> &mut ::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        &mut self.deprecatedTopology
    }

    // Take field
    pub fn take_deprecatedTopology(&mut self) -> ::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.deprecatedTopology, ::std::collections::BTreeMap::new())
    }

    // optional string nodeName = 6;

    pub fn nodeName(&self) -> &str {
        match self.nodeName.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_nodeName(&mut self) {
        self.nodeName = ::std::option::Option::None;
    }

    pub fn has_nodeName(&self) -> bool {
        self.nodeName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nodeName(&mut self, v: ::std::string::String) {
        self.nodeName = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nodeName(&mut self) -> &mut ::std::string::String {
        if self.nodeName.is_none() {
            self.nodeName = ::std::option::Option::Some(::std::string::String::new());
        }
        self.nodeName.as_mut().unwrap()
    }

    // Take field
    pub fn take_nodeName(&mut self) -> ::std::string::String {
        self.nodeName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string zone = 7;

    pub fn zone(&self) -> &str {
        match self.zone.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_zone(&mut self) {
        self.zone = ::std::option::Option::None;
    }

    pub fn has_zone(&self) -> bool {
        self.zone.is_some()
    }

    // Param is passed by value, moved
    pub fn set_zone(&mut self, v: ::std::string::String) {
        self.zone = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_zone(&mut self) -> &mut ::std::string::String {
        if self.zone.is_none() {
            self.zone = ::std::option::Option::Some(::std::string::String::new());
        }
        self.zone.as_mut().unwrap()
    }

    // Take field
    pub fn take_zone(&mut self) -> ::std::string::String {
        self.zone.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.discovery.v1.EndpointHints hints = 8;

    pub fn hints(&self) -> &EndpointHints {
        self.hints.as_ref().unwrap_or_else(|| <EndpointHints as ::protobuf::Message>::default_instance())
    }

    pub fn clear_hints(&mut self) {
        self.hints.clear();
    }

    pub fn has_hints(&self) -> bool {
        self.hints.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hints(&mut self, v: EndpointHints) {
        self.hints = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hints(&mut self) -> &mut EndpointHints {
        self.hints.mut_or_insert_default()
    }

    // Take field
    pub fn take_hints(&mut self) -> EndpointHints {
        self.hints.take().unwrap_or_else(|| EndpointHints::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "addresses",
            |m: &Endpoint| { &m.addresses },
            |m: &mut Endpoint| { &mut m.addresses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EndpointConditions>(
            "conditions",
            |m: &Endpoint| { &m.conditions },
            |m: &mut Endpoint| { &mut m.conditions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hostname",
            |m: &Endpoint| { &m.hostname },
            |m: &mut Endpoint| { &mut m.hostname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::api::core::v1::ObjectReference>(
            "targetRef",
            |m: &Endpoint| { &m.targetRef },
            |m: &mut Endpoint| { &mut m.targetRef },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "deprecatedTopology",
            |m: &Endpoint| { &m.deprecatedTopology },
            |m: &mut Endpoint| { &mut m.deprecatedTopology },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "nodeName",
            |m: &Endpoint| { &m.nodeName },
            |m: &mut Endpoint| { &mut m.nodeName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "zone",
            |m: &Endpoint| { &m.zone },
            |m: &mut Endpoint| { &mut m.zone },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EndpointHints>(
            "hints",
            |m: &Endpoint| { &m.hints },
            |m: &mut Endpoint| { &mut m.hints },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Endpoint>(
            "Endpoint",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Endpoint {
    const NAME: &'static str = "Endpoint";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.addresses.push(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.conditions)?;
                },
                26 => {
                    self.hostname = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.targetRef)?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.deprecatedTopology.insert(key, value);
                },
                50 => {
                    self.nodeName = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.zone = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.hints)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.addresses {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if let Some(v) = self.conditions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.hostname.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.targetRef.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.deprecatedTopology {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.nodeName.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.zone.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.hints.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.addresses {
            os.write_string(1, &v)?;
        };
        if let Some(v) = self.conditions.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.hostname.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.targetRef.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for (k, v) in &self.deprecatedTopology {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.nodeName.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.zone.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.hints.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Endpoint {
        Endpoint::new()
    }

    fn clear(&mut self) {
        self.addresses.clear();
        self.conditions.clear();
        self.hostname = ::std::option::Option::None;
        self.targetRef.clear();
        self.deprecatedTopology.clear();
        self.nodeName = ::std::option::Option::None;
        self.zone = ::std::option::Option::None;
        self.hints.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Endpoint {
        static instance: ::protobuf::rt::Lazy<Endpoint> = ::protobuf::rt::Lazy::new();
        instance.get(Endpoint::new)
    }
}

impl ::protobuf::MessageFull for Endpoint {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Endpoint").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Endpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Endpoint {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.discovery.v1.EndpointConditions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EndpointConditions {
    // message fields
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointConditions.ready)
    pub ready: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointConditions.serving)
    pub serving: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointConditions.terminating)
    pub terminating: ::std::option::Option<bool>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.discovery.v1.EndpointConditions.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EndpointConditions {
    fn default() -> &'a EndpointConditions {
        <EndpointConditions as ::protobuf::Message>::default_instance()
    }
}

impl EndpointConditions {
    pub fn new() -> EndpointConditions {
        ::std::default::Default::default()
    }

    // optional bool ready = 1;

    pub fn ready(&self) -> bool {
        self.ready.unwrap_or(false)
    }

    pub fn clear_ready(&mut self) {
        self.ready = ::std::option::Option::None;
    }

    pub fn has_ready(&self) -> bool {
        self.ready.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ready(&mut self, v: bool) {
        self.ready = ::std::option::Option::Some(v);
    }

    // optional bool serving = 2;

    pub fn serving(&self) -> bool {
        self.serving.unwrap_or(false)
    }

    pub fn clear_serving(&mut self) {
        self.serving = ::std::option::Option::None;
    }

    pub fn has_serving(&self) -> bool {
        self.serving.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serving(&mut self, v: bool) {
        self.serving = ::std::option::Option::Some(v);
    }

    // optional bool terminating = 3;

    pub fn terminating(&self) -> bool {
        self.terminating.unwrap_or(false)
    }

    pub fn clear_terminating(&mut self) {
        self.terminating = ::std::option::Option::None;
    }

    pub fn has_terminating(&self) -> bool {
        self.terminating.is_some()
    }

    // Param is passed by value, moved
    pub fn set_terminating(&mut self, v: bool) {
        self.terminating = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ready",
            |m: &EndpointConditions| { &m.ready },
            |m: &mut EndpointConditions| { &mut m.ready },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serving",
            |m: &EndpointConditions| { &m.serving },
            |m: &mut EndpointConditions| { &mut m.serving },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "terminating",
            |m: &EndpointConditions| { &m.terminating },
            |m: &mut EndpointConditions| { &mut m.terminating },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EndpointConditions>(
            "EndpointConditions",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EndpointConditions {
    const NAME: &'static str = "EndpointConditions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ready = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.serving = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.terminating = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ready {
            my_size += 1 + 1;
        }
        if let Some(v) = self.serving {
            my_size += 1 + 1;
        }
        if let Some(v) = self.terminating {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ready {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.serving {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.terminating {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EndpointConditions {
        EndpointConditions::new()
    }

    fn clear(&mut self) {
        self.ready = ::std::option::Option::None;
        self.serving = ::std::option::Option::None;
        self.terminating = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EndpointConditions {
        static instance: EndpointConditions = EndpointConditions {
            ready: ::std::option::Option::None,
            serving: ::std::option::Option::None,
            terminating: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EndpointConditions {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EndpointConditions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EndpointConditions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointConditions {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.discovery.v1.EndpointHints)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EndpointHints {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointHints.forZones)
    pub forZones: ::std::vec::Vec<ForZone>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.discovery.v1.EndpointHints.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EndpointHints {
    fn default() -> &'a EndpointHints {
        <EndpointHints as ::protobuf::Message>::default_instance()
    }
}

impl EndpointHints {
    pub fn new() -> EndpointHints {
        ::std::default::Default::default()
    }

    // repeated .api.discovery.v1.ForZone forZones = 1;

    pub fn forZones(&self) -> &[ForZone] {
        &self.forZones
    }

    pub fn clear_forZones(&mut self) {
        self.forZones.clear();
    }

    // Param is passed by value, moved
    pub fn set_forZones(&mut self, v: ::std::vec::Vec<ForZone>) {
        self.forZones = v;
    }

    // Mutable pointer to the field.
    pub fn mut_forZones(&mut self) -> &mut ::std::vec::Vec<ForZone> {
        &mut self.forZones
    }

    // Take field
    pub fn take_forZones(&mut self) -> ::std::vec::Vec<ForZone> {
        ::std::mem::replace(&mut self.forZones, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "forZones",
            |m: &EndpointHints| { &m.forZones },
            |m: &mut EndpointHints| { &mut m.forZones },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EndpointHints>(
            "EndpointHints",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EndpointHints {
    const NAME: &'static str = "EndpointHints";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.forZones.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.forZones {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.forZones {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EndpointHints {
        EndpointHints::new()
    }

    fn clear(&mut self) {
        self.forZones.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EndpointHints {
        static instance: EndpointHints = EndpointHints {
            forZones: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EndpointHints {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EndpointHints").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EndpointHints {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointHints {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.discovery.v1.EndpointPort)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EndpointPort {
    // message fields
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointPort.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointPort.protocol)
    pub protocol: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointPort.port)
    pub port: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointPort.appProtocol)
    pub appProtocol: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.discovery.v1.EndpointPort.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EndpointPort {
    fn default() -> &'a EndpointPort {
        <EndpointPort as ::protobuf::Message>::default_instance()
    }
}

impl EndpointPort {
    pub fn new() -> EndpointPort {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string protocol = 2;

    pub fn protocol(&self) -> &str {
        match self.protocol.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_protocol(&mut self) {
        self.protocol = ::std::option::Option::None;
    }

    pub fn has_protocol(&self) -> bool {
        self.protocol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ::std::string::String) {
        self.protocol = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol(&mut self) -> &mut ::std::string::String {
        if self.protocol.is_none() {
            self.protocol = ::std::option::Option::Some(::std::string::String::new());
        }
        self.protocol.as_mut().unwrap()
    }

    // Take field
    pub fn take_protocol(&mut self) -> ::std::string::String {
        self.protocol.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 port = 3;

    pub fn port(&self) -> i32 {
        self.port.unwrap_or(0)
    }

    pub fn clear_port(&mut self) {
        self.port = ::std::option::Option::None;
    }

    pub fn has_port(&self) -> bool {
        self.port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = ::std::option::Option::Some(v);
    }

    // optional string appProtocol = 4;

    pub fn appProtocol(&self) -> &str {
        match self.appProtocol.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_appProtocol(&mut self) {
        self.appProtocol = ::std::option::Option::None;
    }

    pub fn has_appProtocol(&self) -> bool {
        self.appProtocol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appProtocol(&mut self, v: ::std::string::String) {
        self.appProtocol = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_appProtocol(&mut self) -> &mut ::std::string::String {
        if self.appProtocol.is_none() {
            self.appProtocol = ::std::option::Option::Some(::std::string::String::new());
        }
        self.appProtocol.as_mut().unwrap()
    }

    // Take field
    pub fn take_appProtocol(&mut self) -> ::std::string::String {
        self.appProtocol.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &EndpointPort| { &m.name },
            |m: &mut EndpointPort| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol",
            |m: &EndpointPort| { &m.protocol },
            |m: &mut EndpointPort| { &mut m.protocol },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "port",
            |m: &EndpointPort| { &m.port },
            |m: &mut EndpointPort| { &mut m.port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appProtocol",
            |m: &EndpointPort| { &m.appProtocol },
            |m: &mut EndpointPort| { &mut m.appProtocol },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EndpointPort>(
            "EndpointPort",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EndpointPort {
    const NAME: &'static str = "EndpointPort";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.protocol = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.port = ::std::option::Option::Some(is.read_int32()?);
                },
                34 => {
                    self.appProtocol = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.protocol.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.port {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.appProtocol.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.protocol.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.port {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.appProtocol.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EndpointPort {
        EndpointPort::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.protocol = ::std::option::Option::None;
        self.port = ::std::option::Option::None;
        self.appProtocol = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EndpointPort {
        static instance: EndpointPort = EndpointPort {
            name: ::std::option::Option::None,
            protocol: ::std::option::Option::None,
            port: ::std::option::Option::None,
            appProtocol: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EndpointPort {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EndpointPort").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EndpointPort {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointPort {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.discovery.v1.EndpointSlice)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EndpointSlice {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointSlice.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointSlice.addressType)
    pub addressType: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointSlice.endpoints)
    pub endpoints: ::std::vec::Vec<Endpoint>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointSlice.ports)
    pub ports: ::std::vec::Vec<EndpointPort>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.discovery.v1.EndpointSlice.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EndpointSlice {
    fn default() -> &'a EndpointSlice {
        <EndpointSlice as ::protobuf::Message>::default_instance()
    }
}

impl EndpointSlice {
    pub fn new() -> EndpointSlice {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional string addressType = 4;

    pub fn addressType(&self) -> &str {
        match self.addressType.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_addressType(&mut self) {
        self.addressType = ::std::option::Option::None;
    }

    pub fn has_addressType(&self) -> bool {
        self.addressType.is_some()
    }

    // Param is passed by value, moved
    pub fn set_addressType(&mut self, v: ::std::string::String) {
        self.addressType = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addressType(&mut self) -> &mut ::std::string::String {
        if self.addressType.is_none() {
            self.addressType = ::std::option::Option::Some(::std::string::String::new());
        }
        self.addressType.as_mut().unwrap()
    }

    // Take field
    pub fn take_addressType(&mut self) -> ::std::string::String {
        self.addressType.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .api.discovery.v1.Endpoint endpoints = 2;

    pub fn endpoints(&self) -> &[Endpoint] {
        &self.endpoints
    }

    pub fn clear_endpoints(&mut self) {
        self.endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoints(&mut self, v: ::std::vec::Vec<Endpoint>) {
        self.endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_endpoints(&mut self) -> &mut ::std::vec::Vec<Endpoint> {
        &mut self.endpoints
    }

    // Take field
    pub fn take_endpoints(&mut self) -> ::std::vec::Vec<Endpoint> {
        ::std::mem::replace(&mut self.endpoints, ::std::vec::Vec::new())
    }

    // repeated .api.discovery.v1.EndpointPort ports = 3;

    pub fn ports(&self) -> &[EndpointPort] {
        &self.ports
    }

    pub fn clear_ports(&mut self) {
        self.ports.clear();
    }

    // Param is passed by value, moved
    pub fn set_ports(&mut self, v: ::std::vec::Vec<EndpointPort>) {
        self.ports = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ports(&mut self) -> &mut ::std::vec::Vec<EndpointPort> {
        &mut self.ports
    }

    // Take field
    pub fn take_ports(&mut self) -> ::std::vec::Vec<EndpointPort> {
        ::std::mem::replace(&mut self.ports, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &EndpointSlice| { &m.metadata },
            |m: &mut EndpointSlice| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "addressType",
            |m: &EndpointSlice| { &m.addressType },
            |m: &mut EndpointSlice| { &mut m.addressType },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "endpoints",
            |m: &EndpointSlice| { &m.endpoints },
            |m: &mut EndpointSlice| { &mut m.endpoints },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ports",
            |m: &EndpointSlice| { &m.ports },
            |m: &mut EndpointSlice| { &mut m.ports },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EndpointSlice>(
            "EndpointSlice",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EndpointSlice {
    const NAME: &'static str = "EndpointSlice";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                34 => {
                    self.addressType = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.endpoints.push(is.read_message()?);
                },
                26 => {
                    self.ports.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.addressType.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        for value in &self.endpoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.ports {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.addressType.as_ref() {
            os.write_string(4, v)?;
        }
        for v in &self.endpoints {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.ports {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EndpointSlice {
        EndpointSlice::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.addressType = ::std::option::Option::None;
        self.endpoints.clear();
        self.ports.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EndpointSlice {
        static instance: EndpointSlice = EndpointSlice {
            metadata: ::protobuf::MessageField::none(),
            addressType: ::std::option::Option::None,
            endpoints: ::std::vec::Vec::new(),
            ports: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EndpointSlice {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EndpointSlice").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EndpointSlice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointSlice {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.discovery.v1.EndpointSliceList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EndpointSliceList {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointSliceList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.discovery.v1.EndpointSliceList.items)
    pub items: ::std::vec::Vec<EndpointSlice>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.discovery.v1.EndpointSliceList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EndpointSliceList {
    fn default() -> &'a EndpointSliceList {
        <EndpointSliceList as ::protobuf::Message>::default_instance()
    }
}

impl EndpointSliceList {
    pub fn new() -> EndpointSliceList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.discovery.v1.EndpointSlice items = 2;

    pub fn items(&self) -> &[EndpointSlice] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<EndpointSlice>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<EndpointSlice> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<EndpointSlice> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &EndpointSliceList| { &m.metadata },
            |m: &mut EndpointSliceList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &EndpointSliceList| { &m.items },
            |m: &mut EndpointSliceList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EndpointSliceList>(
            "EndpointSliceList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EndpointSliceList {
    const NAME: &'static str = "EndpointSliceList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EndpointSliceList {
        EndpointSliceList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EndpointSliceList {
        static instance: EndpointSliceList = EndpointSliceList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EndpointSliceList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EndpointSliceList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EndpointSliceList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointSliceList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.discovery.v1.ForZone)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ForZone {
    // message fields
    // @@protoc_insertion_point(field:api.discovery.v1.ForZone.name)
    pub name: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.discovery.v1.ForZone.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ForZone {
    fn default() -> &'a ForZone {
        <ForZone as ::protobuf::Message>::default_instance()
    }
}

impl ForZone {
    pub fn new() -> ForZone {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &ForZone| { &m.name },
            |m: &mut ForZone| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ForZone>(
            "ForZone",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ForZone {
    const NAME: &'static str = "ForZone";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ForZone {
        ForZone::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ForZone {
        static instance: ForZone = ForZone {
            name: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ForZone {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ForZone").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ForZone {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ForZone {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20api/discovery/v1/generated.proto\x12\x10api.discovery.v1\x1a\x1bap\
    i/core/v1/generated.proto\x1a-apimachinery/pkg/apis/meta/v1/generated.pr\
    oto\x1a(apimachinery/pkg/runtime/generated.proto\x1a/apimachinery/pkg/ru\
    ntime/schema/generated.proto\"\xd8\x03\n\x08Endpoint\x12\x1c\n\taddresse\
    s\x18\x01\x20\x03(\tR\taddresses\x12D\n\nconditions\x18\x02\x20\x01(\x0b\
    2$.api.discovery.v1.EndpointConditionsR\nconditions\x12\x1a\n\x08hostnam\
    e\x18\x03\x20\x01(\tR\x08hostname\x12:\n\ttargetRef\x18\x04\x20\x01(\x0b\
    2\x1c.api.core.v1.ObjectReferenceR\ttargetRef\x12b\n\x12deprecatedTopolo\
    gy\x18\x05\x20\x03(\x0b22.api.discovery.v1.Endpoint.DeprecatedTopologyEn\
    tryR\x12deprecatedTopology\x12\x1a\n\x08nodeName\x18\x06\x20\x01(\tR\x08\
    nodeName\x12\x12\n\x04zone\x18\x07\x20\x01(\tR\x04zone\x125\n\x05hints\
    \x18\x08\x20\x01(\x0b2\x1f.api.discovery.v1.EndpointHintsR\x05hints\x1aE\
    \n\x17DeprecatedTopologyEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03ke\
    y\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"f\n\x12Endp\
    ointConditions\x12\x14\n\x05ready\x18\x01\x20\x01(\x08R\x05ready\x12\x18\
    \n\x07serving\x18\x02\x20\x01(\x08R\x07serving\x12\x20\n\x0bterminating\
    \x18\x03\x20\x01(\x08R\x0bterminating\"F\n\rEndpointHints\x125\n\x08forZ\
    ones\x18\x01\x20\x03(\x0b2\x19.api.discovery.v1.ForZoneR\x08forZones\"t\
    \n\x0cEndpointPort\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1a\
    \n\x08protocol\x18\x02\x20\x01(\tR\x08protocol\x12\x12\n\x04port\x18\x03\
    \x20\x01(\x05R\x04port\x12\x20\n\x0bappProtocol\x18\x04\x20\x01(\tR\x0ba\
    ppProtocol\"\xe8\x01\n\rEndpointSlice\x12E\n\x08metadata\x18\x01\x20\x01\
    (\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\x08metadata\x12\x20\n\
    \x0baddressType\x18\x04\x20\x01(\tR\x0baddressType\x128\n\tendpoints\x18\
    \x02\x20\x03(\x0b2\x1a.api.discovery.v1.EndpointR\tendpoints\x124\n\x05p\
    orts\x18\x03\x20\x03(\x0b2\x1e.api.discovery.v1.EndpointPortR\x05ports\"\
    \x8f\x01\n\x11EndpointSliceList\x12C\n\x08metadata\x18\x01\x20\x01(\x0b2\
    '.apimachinery.pkg.apis.meta.v1.ListMetaR\x08metadata\x125\n\x05items\
    \x18\x02\x20\x03(\x0b2\x1f.api.discovery.v1.EndpointSliceR\x05items\"\
    \x1d\n\x07ForZone\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x19Z\
    \x17k8s.io/api/discovery/v1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(Endpoint::generated_message_descriptor_data());
            messages.push(EndpointConditions::generated_message_descriptor_data());
            messages.push(EndpointHints::generated_message_descriptor_data());
            messages.push(EndpointPort::generated_message_descriptor_data());
            messages.push(EndpointSlice::generated_message_descriptor_data());
            messages.push(EndpointSliceList::generated_message_descriptor_data());
            messages.push(ForZone::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
