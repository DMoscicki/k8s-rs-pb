// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/apidiscovery/v2beta1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.apidiscovery.v2beta1.APIGroupDiscovery)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct APIGroupDiscovery {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIGroupDiscovery.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIGroupDiscovery.versions)
    pub versions: ::std::vec::Vec<APIVersionDiscovery>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.apidiscovery.v2beta1.APIGroupDiscovery.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a APIGroupDiscovery {
    fn default() -> &'a APIGroupDiscovery {
        <APIGroupDiscovery as ::protobuf::Message>::default_instance()
    }
}

impl APIGroupDiscovery {
    pub fn new() -> APIGroupDiscovery {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // repeated .api.apidiscovery.v2beta1.APIVersionDiscovery versions = 2;

    pub fn versions(&self) -> &[APIVersionDiscovery] {
        &self.versions
    }

    pub fn clear_versions(&mut self) {
        self.versions.clear();
    }

    // Param is passed by value, moved
    pub fn set_versions(&mut self, v: ::std::vec::Vec<APIVersionDiscovery>) {
        self.versions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_versions(&mut self) -> &mut ::std::vec::Vec<APIVersionDiscovery> {
        &mut self.versions
    }

    // Take field
    pub fn take_versions(&mut self) -> ::std::vec::Vec<APIVersionDiscovery> {
        ::std::mem::replace(&mut self.versions, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &APIGroupDiscovery| { &m.metadata },
            |m: &mut APIGroupDiscovery| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "versions",
            |m: &APIGroupDiscovery| { &m.versions },
            |m: &mut APIGroupDiscovery| { &mut m.versions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<APIGroupDiscovery>(
            "APIGroupDiscovery",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for APIGroupDiscovery {
    const NAME: &'static str = "APIGroupDiscovery";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.versions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.versions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.versions {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> APIGroupDiscovery {
        APIGroupDiscovery::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.versions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static APIGroupDiscovery {
        static instance: APIGroupDiscovery = APIGroupDiscovery {
            metadata: ::protobuf::MessageField::none(),
            versions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for APIGroupDiscovery {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("APIGroupDiscovery").unwrap()).clone()
    }
}

impl ::std::fmt::Display for APIGroupDiscovery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for APIGroupDiscovery {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.apidiscovery.v2beta1.APIGroupDiscoveryList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct APIGroupDiscoveryList {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIGroupDiscoveryList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIGroupDiscoveryList.items)
    pub items: ::std::vec::Vec<APIGroupDiscovery>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.apidiscovery.v2beta1.APIGroupDiscoveryList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a APIGroupDiscoveryList {
    fn default() -> &'a APIGroupDiscoveryList {
        <APIGroupDiscoveryList as ::protobuf::Message>::default_instance()
    }
}

impl APIGroupDiscoveryList {
    pub fn new() -> APIGroupDiscoveryList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.apidiscovery.v2beta1.APIGroupDiscovery items = 2;

    pub fn items(&self) -> &[APIGroupDiscovery] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<APIGroupDiscovery>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<APIGroupDiscovery> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<APIGroupDiscovery> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &APIGroupDiscoveryList| { &m.metadata },
            |m: &mut APIGroupDiscoveryList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &APIGroupDiscoveryList| { &m.items },
            |m: &mut APIGroupDiscoveryList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<APIGroupDiscoveryList>(
            "APIGroupDiscoveryList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for APIGroupDiscoveryList {
    const NAME: &'static str = "APIGroupDiscoveryList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> APIGroupDiscoveryList {
        APIGroupDiscoveryList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static APIGroupDiscoveryList {
        static instance: APIGroupDiscoveryList = APIGroupDiscoveryList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for APIGroupDiscoveryList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("APIGroupDiscoveryList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for APIGroupDiscoveryList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for APIGroupDiscoveryList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.apidiscovery.v2beta1.APIResourceDiscovery)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct APIResourceDiscovery {
    // message fields
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIResourceDiscovery.resource)
    pub resource: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIResourceDiscovery.responseKind)
    pub responseKind: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind>,
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIResourceDiscovery.scope)
    pub scope: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIResourceDiscovery.singularResource)
    pub singularResource: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIResourceDiscovery.verbs)
    pub verbs: ::std::vec::Vec<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIResourceDiscovery.shortNames)
    pub shortNames: ::std::vec::Vec<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIResourceDiscovery.categories)
    pub categories: ::std::vec::Vec<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIResourceDiscovery.subresources)
    pub subresources: ::std::vec::Vec<APISubresourceDiscovery>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.apidiscovery.v2beta1.APIResourceDiscovery.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a APIResourceDiscovery {
    fn default() -> &'a APIResourceDiscovery {
        <APIResourceDiscovery as ::protobuf::Message>::default_instance()
    }
}

impl APIResourceDiscovery {
    pub fn new() -> APIResourceDiscovery {
        ::std::default::Default::default()
    }

    // optional string resource = 1;

    pub fn resource(&self) -> &str {
        match self.resource.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_resource(&mut self) {
        self.resource = ::std::option::Option::None;
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: ::std::string::String) {
        self.resource = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut ::std::string::String {
        if self.resource.is_none() {
            self.resource = ::std::option::Option::Some(::std::string::String::new());
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> ::std::string::String {
        self.resource.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.GroupVersionKind responseKind = 2;

    pub fn responseKind(&self) -> &crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind {
        self.responseKind.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind as ::protobuf::Message>::default_instance())
    }

    pub fn clear_responseKind(&mut self) {
        self.responseKind.clear();
    }

    pub fn has_responseKind(&self) -> bool {
        self.responseKind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_responseKind(&mut self, v: crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind) {
        self.responseKind = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_responseKind(&mut self) -> &mut crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind {
        self.responseKind.mut_or_insert_default()
    }

    // Take field
    pub fn take_responseKind(&mut self) -> crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind {
        self.responseKind.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind::new())
    }

    // optional string scope = 3;

    pub fn scope(&self) -> &str {
        match self.scope.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_scope(&mut self) {
        self.scope = ::std::option::Option::None;
    }

    pub fn has_scope(&self) -> bool {
        self.scope.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scope(&mut self, v: ::std::string::String) {
        self.scope = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scope(&mut self) -> &mut ::std::string::String {
        if self.scope.is_none() {
            self.scope = ::std::option::Option::Some(::std::string::String::new());
        }
        self.scope.as_mut().unwrap()
    }

    // Take field
    pub fn take_scope(&mut self) -> ::std::string::String {
        self.scope.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string singularResource = 4;

    pub fn singularResource(&self) -> &str {
        match self.singularResource.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_singularResource(&mut self) {
        self.singularResource = ::std::option::Option::None;
    }

    pub fn has_singularResource(&self) -> bool {
        self.singularResource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_singularResource(&mut self, v: ::std::string::String) {
        self.singularResource = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_singularResource(&mut self) -> &mut ::std::string::String {
        if self.singularResource.is_none() {
            self.singularResource = ::std::option::Option::Some(::std::string::String::new());
        }
        self.singularResource.as_mut().unwrap()
    }

    // Take field
    pub fn take_singularResource(&mut self) -> ::std::string::String {
        self.singularResource.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string verbs = 5;

    pub fn verbs(&self) -> &[::std::string::String] {
        &self.verbs
    }

    pub fn clear_verbs(&mut self) {
        self.verbs.clear();
    }

    // Param is passed by value, moved
    pub fn set_verbs(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.verbs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_verbs(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.verbs
    }

    // Take field
    pub fn take_verbs(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.verbs, ::std::vec::Vec::new())
    }

    // repeated string shortNames = 6;

    pub fn shortNames(&self) -> &[::std::string::String] {
        &self.shortNames
    }

    pub fn clear_shortNames(&mut self) {
        self.shortNames.clear();
    }

    // Param is passed by value, moved
    pub fn set_shortNames(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.shortNames = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shortNames(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.shortNames
    }

    // Take field
    pub fn take_shortNames(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.shortNames, ::std::vec::Vec::new())
    }

    // repeated string categories = 7;

    pub fn categories(&self) -> &[::std::string::String] {
        &self.categories
    }

    pub fn clear_categories(&mut self) {
        self.categories.clear();
    }

    // Param is passed by value, moved
    pub fn set_categories(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.categories = v;
    }

    // Mutable pointer to the field.
    pub fn mut_categories(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.categories
    }

    // Take field
    pub fn take_categories(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.categories, ::std::vec::Vec::new())
    }

    // repeated .api.apidiscovery.v2beta1.APISubresourceDiscovery subresources = 8;

    pub fn subresources(&self) -> &[APISubresourceDiscovery] {
        &self.subresources
    }

    pub fn clear_subresources(&mut self) {
        self.subresources.clear();
    }

    // Param is passed by value, moved
    pub fn set_subresources(&mut self, v: ::std::vec::Vec<APISubresourceDiscovery>) {
        self.subresources = v;
    }

    // Mutable pointer to the field.
    pub fn mut_subresources(&mut self) -> &mut ::std::vec::Vec<APISubresourceDiscovery> {
        &mut self.subresources
    }

    // Take field
    pub fn take_subresources(&mut self) -> ::std::vec::Vec<APISubresourceDiscovery> {
        ::std::mem::replace(&mut self.subresources, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "resource",
            |m: &APIResourceDiscovery| { &m.resource },
            |m: &mut APIResourceDiscovery| { &mut m.resource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind>(
            "responseKind",
            |m: &APIResourceDiscovery| { &m.responseKind },
            |m: &mut APIResourceDiscovery| { &mut m.responseKind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "scope",
            |m: &APIResourceDiscovery| { &m.scope },
            |m: &mut APIResourceDiscovery| { &mut m.scope },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "singularResource",
            |m: &APIResourceDiscovery| { &m.singularResource },
            |m: &mut APIResourceDiscovery| { &mut m.singularResource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "verbs",
            |m: &APIResourceDiscovery| { &m.verbs },
            |m: &mut APIResourceDiscovery| { &mut m.verbs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "shortNames",
            |m: &APIResourceDiscovery| { &m.shortNames },
            |m: &mut APIResourceDiscovery| { &mut m.shortNames },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "categories",
            |m: &APIResourceDiscovery| { &m.categories },
            |m: &mut APIResourceDiscovery| { &mut m.categories },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "subresources",
            |m: &APIResourceDiscovery| { &m.subresources },
            |m: &mut APIResourceDiscovery| { &mut m.subresources },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<APIResourceDiscovery>(
            "APIResourceDiscovery",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for APIResourceDiscovery {
    const NAME: &'static str = "APIResourceDiscovery";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.resource = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.responseKind)?;
                },
                26 => {
                    self.scope = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.singularResource = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.verbs.push(is.read_string()?);
                },
                50 => {
                    self.shortNames.push(is.read_string()?);
                },
                58 => {
                    self.categories.push(is.read_string()?);
                },
                66 => {
                    self.subresources.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resource.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.responseKind.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.scope.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.singularResource.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        for value in &self.verbs {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        for value in &self.shortNames {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        for value in &self.categories {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        for value in &self.subresources {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resource.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.responseKind.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.scope.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.singularResource.as_ref() {
            os.write_string(4, v)?;
        }
        for v in &self.verbs {
            os.write_string(5, &v)?;
        };
        for v in &self.shortNames {
            os.write_string(6, &v)?;
        };
        for v in &self.categories {
            os.write_string(7, &v)?;
        };
        for v in &self.subresources {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> APIResourceDiscovery {
        APIResourceDiscovery::new()
    }

    fn clear(&mut self) {
        self.resource = ::std::option::Option::None;
        self.responseKind.clear();
        self.scope = ::std::option::Option::None;
        self.singularResource = ::std::option::Option::None;
        self.verbs.clear();
        self.shortNames.clear();
        self.categories.clear();
        self.subresources.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static APIResourceDiscovery {
        static instance: APIResourceDiscovery = APIResourceDiscovery {
            resource: ::std::option::Option::None,
            responseKind: ::protobuf::MessageField::none(),
            scope: ::std::option::Option::None,
            singularResource: ::std::option::Option::None,
            verbs: ::std::vec::Vec::new(),
            shortNames: ::std::vec::Vec::new(),
            categories: ::std::vec::Vec::new(),
            subresources: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for APIResourceDiscovery {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("APIResourceDiscovery").unwrap()).clone()
    }
}

impl ::std::fmt::Display for APIResourceDiscovery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for APIResourceDiscovery {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.apidiscovery.v2beta1.APISubresourceDiscovery)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct APISubresourceDiscovery {
    // message fields
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APISubresourceDiscovery.subresource)
    pub subresource: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APISubresourceDiscovery.responseKind)
    pub responseKind: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APISubresourceDiscovery.acceptedTypes)
    pub acceptedTypes: ::std::vec::Vec<crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APISubresourceDiscovery.verbs)
    pub verbs: ::std::vec::Vec<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.apidiscovery.v2beta1.APISubresourceDiscovery.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a APISubresourceDiscovery {
    fn default() -> &'a APISubresourceDiscovery {
        <APISubresourceDiscovery as ::protobuf::Message>::default_instance()
    }
}

impl APISubresourceDiscovery {
    pub fn new() -> APISubresourceDiscovery {
        ::std::default::Default::default()
    }

    // optional string subresource = 1;

    pub fn subresource(&self) -> &str {
        match self.subresource.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_subresource(&mut self) {
        self.subresource = ::std::option::Option::None;
    }

    pub fn has_subresource(&self) -> bool {
        self.subresource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_subresource(&mut self, v: ::std::string::String) {
        self.subresource = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subresource(&mut self) -> &mut ::std::string::String {
        if self.subresource.is_none() {
            self.subresource = ::std::option::Option::Some(::std::string::String::new());
        }
        self.subresource.as_mut().unwrap()
    }

    // Take field
    pub fn take_subresource(&mut self) -> ::std::string::String {
        self.subresource.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.GroupVersionKind responseKind = 2;

    pub fn responseKind(&self) -> &crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind {
        self.responseKind.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind as ::protobuf::Message>::default_instance())
    }

    pub fn clear_responseKind(&mut self) {
        self.responseKind.clear();
    }

    pub fn has_responseKind(&self) -> bool {
        self.responseKind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_responseKind(&mut self, v: crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind) {
        self.responseKind = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_responseKind(&mut self) -> &mut crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind {
        self.responseKind.mut_or_insert_default()
    }

    // Take field
    pub fn take_responseKind(&mut self) -> crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind {
        self.responseKind.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind::new())
    }

    // repeated .apimachinery.pkg.apis.meta.v1.GroupVersionKind acceptedTypes = 3;

    pub fn acceptedTypes(&self) -> &[crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind] {
        &self.acceptedTypes
    }

    pub fn clear_acceptedTypes(&mut self) {
        self.acceptedTypes.clear();
    }

    // Param is passed by value, moved
    pub fn set_acceptedTypes(&mut self, v: ::std::vec::Vec<crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind>) {
        self.acceptedTypes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_acceptedTypes(&mut self) -> &mut ::std::vec::Vec<crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind> {
        &mut self.acceptedTypes
    }

    // Take field
    pub fn take_acceptedTypes(&mut self) -> ::std::vec::Vec<crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind> {
        ::std::mem::replace(&mut self.acceptedTypes, ::std::vec::Vec::new())
    }

    // repeated string verbs = 4;

    pub fn verbs(&self) -> &[::std::string::String] {
        &self.verbs
    }

    pub fn clear_verbs(&mut self) {
        self.verbs.clear();
    }

    // Param is passed by value, moved
    pub fn set_verbs(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.verbs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_verbs(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.verbs
    }

    // Take field
    pub fn take_verbs(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.verbs, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "subresource",
            |m: &APISubresourceDiscovery| { &m.subresource },
            |m: &mut APISubresourceDiscovery| { &mut m.subresource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::apis::meta::v1::GroupVersionKind>(
            "responseKind",
            |m: &APISubresourceDiscovery| { &m.responseKind },
            |m: &mut APISubresourceDiscovery| { &mut m.responseKind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "acceptedTypes",
            |m: &APISubresourceDiscovery| { &m.acceptedTypes },
            |m: &mut APISubresourceDiscovery| { &mut m.acceptedTypes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "verbs",
            |m: &APISubresourceDiscovery| { &m.verbs },
            |m: &mut APISubresourceDiscovery| { &mut m.verbs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<APISubresourceDiscovery>(
            "APISubresourceDiscovery",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for APISubresourceDiscovery {
    const NAME: &'static str = "APISubresourceDiscovery";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.subresource = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.responseKind)?;
                },
                26 => {
                    self.acceptedTypes.push(is.read_message()?);
                },
                34 => {
                    self.verbs.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.subresource.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.responseKind.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.acceptedTypes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.verbs {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.subresource.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.responseKind.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.acceptedTypes {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.verbs {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> APISubresourceDiscovery {
        APISubresourceDiscovery::new()
    }

    fn clear(&mut self) {
        self.subresource = ::std::option::Option::None;
        self.responseKind.clear();
        self.acceptedTypes.clear();
        self.verbs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static APISubresourceDiscovery {
        static instance: APISubresourceDiscovery = APISubresourceDiscovery {
            subresource: ::std::option::Option::None,
            responseKind: ::protobuf::MessageField::none(),
            acceptedTypes: ::std::vec::Vec::new(),
            verbs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for APISubresourceDiscovery {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("APISubresourceDiscovery").unwrap()).clone()
    }
}

impl ::std::fmt::Display for APISubresourceDiscovery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for APISubresourceDiscovery {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.apidiscovery.v2beta1.APIVersionDiscovery)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct APIVersionDiscovery {
    // message fields
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIVersionDiscovery.version)
    pub version: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIVersionDiscovery.resources)
    pub resources: ::std::vec::Vec<APIResourceDiscovery>,
    // @@protoc_insertion_point(field:api.apidiscovery.v2beta1.APIVersionDiscovery.freshness)
    pub freshness: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.apidiscovery.v2beta1.APIVersionDiscovery.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a APIVersionDiscovery {
    fn default() -> &'a APIVersionDiscovery {
        <APIVersionDiscovery as ::protobuf::Message>::default_instance()
    }
}

impl APIVersionDiscovery {
    pub fn new() -> APIVersionDiscovery {
        ::std::default::Default::default()
    }

    // optional string version = 1;

    pub fn version(&self) -> &str {
        match self.version.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        if self.version.is_none() {
            self.version = ::std::option::Option::Some(::std::string::String::new());
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        self.version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .api.apidiscovery.v2beta1.APIResourceDiscovery resources = 2;

    pub fn resources(&self) -> &[APIResourceDiscovery] {
        &self.resources
    }

    pub fn clear_resources(&mut self) {
        self.resources.clear();
    }

    // Param is passed by value, moved
    pub fn set_resources(&mut self, v: ::std::vec::Vec<APIResourceDiscovery>) {
        self.resources = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resources(&mut self) -> &mut ::std::vec::Vec<APIResourceDiscovery> {
        &mut self.resources
    }

    // Take field
    pub fn take_resources(&mut self) -> ::std::vec::Vec<APIResourceDiscovery> {
        ::std::mem::replace(&mut self.resources, ::std::vec::Vec::new())
    }

    // optional string freshness = 3;

    pub fn freshness(&self) -> &str {
        match self.freshness.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_freshness(&mut self) {
        self.freshness = ::std::option::Option::None;
    }

    pub fn has_freshness(&self) -> bool {
        self.freshness.is_some()
    }

    // Param is passed by value, moved
    pub fn set_freshness(&mut self, v: ::std::string::String) {
        self.freshness = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_freshness(&mut self) -> &mut ::std::string::String {
        if self.freshness.is_none() {
            self.freshness = ::std::option::Option::Some(::std::string::String::new());
        }
        self.freshness.as_mut().unwrap()
    }

    // Take field
    pub fn take_freshness(&mut self) -> ::std::string::String {
        self.freshness.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &APIVersionDiscovery| { &m.version },
            |m: &mut APIVersionDiscovery| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "resources",
            |m: &APIVersionDiscovery| { &m.resources },
            |m: &mut APIVersionDiscovery| { &mut m.resources },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "freshness",
            |m: &APIVersionDiscovery| { &m.freshness },
            |m: &mut APIVersionDiscovery| { &mut m.freshness },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<APIVersionDiscovery>(
            "APIVersionDiscovery",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for APIVersionDiscovery {
    const NAME: &'static str = "APIVersionDiscovery";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.resources.push(is.read_message()?);
                },
                26 => {
                    self.freshness = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.resources {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.freshness.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.version.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.resources {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.freshness.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> APIVersionDiscovery {
        APIVersionDiscovery::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.resources.clear();
        self.freshness = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static APIVersionDiscovery {
        static instance: APIVersionDiscovery = APIVersionDiscovery {
            version: ::std::option::Option::None,
            resources: ::std::vec::Vec::new(),
            freshness: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for APIVersionDiscovery {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("APIVersionDiscovery").unwrap()).clone()
    }
}

impl ::std::fmt::Display for APIVersionDiscovery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for APIVersionDiscovery {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(api/apidiscovery/v2beta1/generated.proto\x12\x18api.apidiscovery.v2be\
    ta1\x1a-apimachinery/pkg/apis/meta/v1/generated.proto\x1a(apimachinery/p\
    kg/runtime/generated.proto\x1a/apimachinery/pkg/runtime/schema/generated\
    .proto\"\xa5\x01\n\x11APIGroupDiscovery\x12E\n\x08metadata\x18\x01\x20\
    \x01(\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\x08metadata\x12I\n\
    \x08versions\x18\x02\x20\x03(\x0b2-.api.apidiscovery.v2beta1.APIVersionD\
    iscoveryR\x08versions\"\x9f\x01\n\x15APIGroupDiscoveryList\x12C\n\x08met\
    adata\x18\x01\x20\x01(\x0b2'.apimachinery.pkg.apis.meta.v1.ListMetaR\x08\
    metadata\x12A\n\x05items\x18\x02\x20\x03(\x0b2+.api.apidiscovery.v2beta1\
    .APIGroupDiscoveryR\x05items\"\xf6\x02\n\x14APIResourceDiscovery\x12\x1a\
    \n\x08resource\x18\x01\x20\x01(\tR\x08resource\x12S\n\x0cresponseKind\
    \x18\x02\x20\x01(\x0b2/.apimachinery.pkg.apis.meta.v1.GroupVersionKindR\
    \x0cresponseKind\x12\x14\n\x05scope\x18\x03\x20\x01(\tR\x05scope\x12*\n\
    \x10singularResource\x18\x04\x20\x01(\tR\x10singularResource\x12\x14\n\
    \x05verbs\x18\x05\x20\x03(\tR\x05verbs\x12\x1e\n\nshortNames\x18\x06\x20\
    \x03(\tR\nshortNames\x12\x1e\n\ncategories\x18\x07\x20\x03(\tR\ncategori\
    es\x12U\n\x0csubresources\x18\x08\x20\x03(\x0b21.api.apidiscovery.v2beta\
    1.APISubresourceDiscoveryR\x0csubresources\"\xfd\x01\n\x17APISubresource\
    Discovery\x12\x20\n\x0bsubresource\x18\x01\x20\x01(\tR\x0bsubresource\
    \x12S\n\x0cresponseKind\x18\x02\x20\x01(\x0b2/.apimachinery.pkg.apis.met\
    a.v1.GroupVersionKindR\x0cresponseKind\x12U\n\racceptedTypes\x18\x03\x20\
    \x03(\x0b2/.apimachinery.pkg.apis.meta.v1.GroupVersionKindR\racceptedTyp\
    es\x12\x14\n\x05verbs\x18\x04\x20\x03(\tR\x05verbs\"\x9b\x01\n\x13APIVer\
    sionDiscovery\x12\x18\n\x07version\x18\x01\x20\x01(\tR\x07version\x12L\n\
    \tresources\x18\x02\x20\x03(\x0b2..api.apidiscovery.v2beta1.APIResourceD\
    iscoveryR\tresources\x12\x1c\n\tfreshness\x18\x03\x20\x01(\tR\tfreshness\
    B!Z\x1fk8s.io/api/apidiscovery/v2beta1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::v2beta1::file_descriptor().clone());
            deps.push(super::v2beta1::file_descriptor().clone());
            deps.push(super::v2beta1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(APIGroupDiscovery::generated_message_descriptor_data());
            messages.push(APIGroupDiscoveryList::generated_message_descriptor_data());
            messages.push(APIResourceDiscovery::generated_message_descriptor_data());
            messages.push(APISubresourceDiscovery::generated_message_descriptor_data());
            messages.push(APIVersionDiscovery::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
