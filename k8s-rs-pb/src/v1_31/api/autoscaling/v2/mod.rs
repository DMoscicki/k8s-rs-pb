// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/autoscaling/v2/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.ContainerResourceMetricSource)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContainerResourceMetricSource {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.ContainerResourceMetricSource.name)
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ContainerResourceMetricSource.target)
    pub target: ::protobuf::MessageField<MetricTarget>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.ContainerResourceMetricSource.container)
    pub container: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.ContainerResourceMetricSource.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContainerResourceMetricSource {
    fn default() -> &'a ContainerResourceMetricSource {
        <ContainerResourceMetricSource as ::protobuf::Message>::default_instance()
    }
}

impl ContainerResourceMetricSource {
    pub fn new() -> ContainerResourceMetricSource {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.autoscaling.v2.MetricTarget target = 2;

    pub fn target(&self) -> &MetricTarget {
        self.target.as_ref().unwrap_or_else(|| <MetricTarget as ::protobuf::Message>::default_instance())
    }

    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    pub fn has_target(&self) -> bool {
        self.target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: MetricTarget) {
        self.target = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target(&mut self) -> &mut MetricTarget {
        self.target.mut_or_insert_default()
    }

    // Take field
    pub fn take_target(&mut self) -> MetricTarget {
        self.target.take().unwrap_or_else(|| MetricTarget::new())
    }

    // optional string container = 3;

    pub fn container(&self) -> &str {
        match self.container.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_container(&mut self) {
        self.container = ::std::option::Option::None;
    }

    pub fn has_container(&self) -> bool {
        self.container.is_some()
    }

    // Param is passed by value, moved
    pub fn set_container(&mut self, v: ::std::string::String) {
        self.container = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container(&mut self) -> &mut ::std::string::String {
        if self.container.is_none() {
            self.container = ::std::option::Option::Some(::std::string::String::new());
        }
        self.container.as_mut().unwrap()
    }

    // Take field
    pub fn take_container(&mut self) -> ::std::string::String {
        self.container.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &ContainerResourceMetricSource| { &m.name },
            |m: &mut ContainerResourceMetricSource| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricTarget>(
            "target",
            |m: &ContainerResourceMetricSource| { &m.target },
            |m: &mut ContainerResourceMetricSource| { &mut m.target },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "container",
            |m: &ContainerResourceMetricSource| { &m.container },
            |m: &mut ContainerResourceMetricSource| { &mut m.container },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContainerResourceMetricSource>(
            "ContainerResourceMetricSource",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContainerResourceMetricSource {
    const NAME: &'static str = "ContainerResourceMetricSource";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.target)?;
                },
                26 => {
                    self.container = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.target.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.container.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.target.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.container.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContainerResourceMetricSource {
        ContainerResourceMetricSource::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.target.clear();
        self.container = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContainerResourceMetricSource {
        static instance: ContainerResourceMetricSource = ContainerResourceMetricSource {
            name: ::std::option::Option::None,
            target: ::protobuf::MessageField::none(),
            container: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContainerResourceMetricSource {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContainerResourceMetricSource").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContainerResourceMetricSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContainerResourceMetricSource {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.ContainerResourceMetricStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContainerResourceMetricStatus {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.ContainerResourceMetricStatus.name)
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ContainerResourceMetricStatus.current)
    pub current: ::protobuf::MessageField<MetricValueStatus>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.ContainerResourceMetricStatus.container)
    pub container: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.ContainerResourceMetricStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContainerResourceMetricStatus {
    fn default() -> &'a ContainerResourceMetricStatus {
        <ContainerResourceMetricStatus as ::protobuf::Message>::default_instance()
    }
}

impl ContainerResourceMetricStatus {
    pub fn new() -> ContainerResourceMetricStatus {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.autoscaling.v2.MetricValueStatus current = 2;

    pub fn current(&self) -> &MetricValueStatus {
        self.current.as_ref().unwrap_or_else(|| <MetricValueStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_current(&mut self) {
        self.current.clear();
    }

    pub fn has_current(&self) -> bool {
        self.current.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current(&mut self, v: MetricValueStatus) {
        self.current = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current(&mut self) -> &mut MetricValueStatus {
        self.current.mut_or_insert_default()
    }

    // Take field
    pub fn take_current(&mut self) -> MetricValueStatus {
        self.current.take().unwrap_or_else(|| MetricValueStatus::new())
    }

    // optional string container = 3;

    pub fn container(&self) -> &str {
        match self.container.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_container(&mut self) {
        self.container = ::std::option::Option::None;
    }

    pub fn has_container(&self) -> bool {
        self.container.is_some()
    }

    // Param is passed by value, moved
    pub fn set_container(&mut self, v: ::std::string::String) {
        self.container = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container(&mut self) -> &mut ::std::string::String {
        if self.container.is_none() {
            self.container = ::std::option::Option::Some(::std::string::String::new());
        }
        self.container.as_mut().unwrap()
    }

    // Take field
    pub fn take_container(&mut self) -> ::std::string::String {
        self.container.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &ContainerResourceMetricStatus| { &m.name },
            |m: &mut ContainerResourceMetricStatus| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricValueStatus>(
            "current",
            |m: &ContainerResourceMetricStatus| { &m.current },
            |m: &mut ContainerResourceMetricStatus| { &mut m.current },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "container",
            |m: &ContainerResourceMetricStatus| { &m.container },
            |m: &mut ContainerResourceMetricStatus| { &mut m.container },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContainerResourceMetricStatus>(
            "ContainerResourceMetricStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContainerResourceMetricStatus {
    const NAME: &'static str = "ContainerResourceMetricStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.current)?;
                },
                26 => {
                    self.container = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.current.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.container.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.current.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.container.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContainerResourceMetricStatus {
        ContainerResourceMetricStatus::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.current.clear();
        self.container = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContainerResourceMetricStatus {
        static instance: ContainerResourceMetricStatus = ContainerResourceMetricStatus {
            name: ::std::option::Option::None,
            current: ::protobuf::MessageField::none(),
            container: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContainerResourceMetricStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContainerResourceMetricStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContainerResourceMetricStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContainerResourceMetricStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.CrossVersionObjectReference)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CrossVersionObjectReference {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.CrossVersionObjectReference.kind)
    pub kind: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.CrossVersionObjectReference.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.CrossVersionObjectReference.apiVersion)
    pub apiVersion: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.CrossVersionObjectReference.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CrossVersionObjectReference {
    fn default() -> &'a CrossVersionObjectReference {
        <CrossVersionObjectReference as ::protobuf::Message>::default_instance()
    }
}

impl CrossVersionObjectReference {
    pub fn new() -> CrossVersionObjectReference {
        ::std::default::Default::default()
    }

    // optional string kind = 1;

    pub fn kind(&self) -> &str {
        match self.kind.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_kind(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_kind(&self) -> bool {
        self.kind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: ::std::string::String) {
        self.kind = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind(&mut self) -> &mut ::std::string::String {
        if self.kind.is_none() {
            self.kind = ::std::option::Option::Some(::std::string::String::new());
        }
        self.kind.as_mut().unwrap()
    }

    // Take field
    pub fn take_kind(&mut self) -> ::std::string::String {
        self.kind.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string apiVersion = 3;

    pub fn apiVersion(&self) -> &str {
        match self.apiVersion.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_apiVersion(&mut self) {
        self.apiVersion = ::std::option::Option::None;
    }

    pub fn has_apiVersion(&self) -> bool {
        self.apiVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apiVersion(&mut self, v: ::std::string::String) {
        self.apiVersion = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apiVersion(&mut self) -> &mut ::std::string::String {
        if self.apiVersion.is_none() {
            self.apiVersion = ::std::option::Option::Some(::std::string::String::new());
        }
        self.apiVersion.as_mut().unwrap()
    }

    // Take field
    pub fn take_apiVersion(&mut self) -> ::std::string::String {
        self.apiVersion.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "kind",
            |m: &CrossVersionObjectReference| { &m.kind },
            |m: &mut CrossVersionObjectReference| { &mut m.kind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &CrossVersionObjectReference| { &m.name },
            |m: &mut CrossVersionObjectReference| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "apiVersion",
            |m: &CrossVersionObjectReference| { &m.apiVersion },
            |m: &mut CrossVersionObjectReference| { &mut m.apiVersion },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CrossVersionObjectReference>(
            "CrossVersionObjectReference",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CrossVersionObjectReference {
    const NAME: &'static str = "CrossVersionObjectReference";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.kind = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.apiVersion = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.kind.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.apiVersion.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.kind.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.apiVersion.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CrossVersionObjectReference {
        CrossVersionObjectReference::new()
    }

    fn clear(&mut self) {
        self.kind = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.apiVersion = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CrossVersionObjectReference {
        static instance: CrossVersionObjectReference = CrossVersionObjectReference {
            kind: ::std::option::Option::None,
            name: ::std::option::Option::None,
            apiVersion: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CrossVersionObjectReference {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CrossVersionObjectReference").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CrossVersionObjectReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CrossVersionObjectReference {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.ExternalMetricSource)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExternalMetricSource {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ExternalMetricSource.metric)
    pub metric: ::protobuf::MessageField<MetricIdentifier>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ExternalMetricSource.target)
    pub target: ::protobuf::MessageField<MetricTarget>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.ExternalMetricSource.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExternalMetricSource {
    fn default() -> &'a ExternalMetricSource {
        <ExternalMetricSource as ::protobuf::Message>::default_instance()
    }
}

impl ExternalMetricSource {
    pub fn new() -> ExternalMetricSource {
        ::std::default::Default::default()
    }

    // optional .api.autoscaling.v2.MetricIdentifier metric = 1;

    pub fn metric(&self) -> &MetricIdentifier {
        self.metric.as_ref().unwrap_or_else(|| <MetricIdentifier as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metric(&mut self) {
        self.metric.clear();
    }

    pub fn has_metric(&self) -> bool {
        self.metric.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metric(&mut self, v: MetricIdentifier) {
        self.metric = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric(&mut self) -> &mut MetricIdentifier {
        self.metric.mut_or_insert_default()
    }

    // Take field
    pub fn take_metric(&mut self) -> MetricIdentifier {
        self.metric.take().unwrap_or_else(|| MetricIdentifier::new())
    }

    // optional .api.autoscaling.v2.MetricTarget target = 2;

    pub fn target(&self) -> &MetricTarget {
        self.target.as_ref().unwrap_or_else(|| <MetricTarget as ::protobuf::Message>::default_instance())
    }

    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    pub fn has_target(&self) -> bool {
        self.target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: MetricTarget) {
        self.target = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target(&mut self) -> &mut MetricTarget {
        self.target.mut_or_insert_default()
    }

    // Take field
    pub fn take_target(&mut self) -> MetricTarget {
        self.target.take().unwrap_or_else(|| MetricTarget::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricIdentifier>(
            "metric",
            |m: &ExternalMetricSource| { &m.metric },
            |m: &mut ExternalMetricSource| { &mut m.metric },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricTarget>(
            "target",
            |m: &ExternalMetricSource| { &m.target },
            |m: &mut ExternalMetricSource| { &mut m.target },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExternalMetricSource>(
            "ExternalMetricSource",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExternalMetricSource {
    const NAME: &'static str = "ExternalMetricSource";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metric)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.target)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metric.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.target.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metric.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.target.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExternalMetricSource {
        ExternalMetricSource::new()
    }

    fn clear(&mut self) {
        self.metric.clear();
        self.target.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExternalMetricSource {
        static instance: ExternalMetricSource = ExternalMetricSource {
            metric: ::protobuf::MessageField::none(),
            target: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExternalMetricSource {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExternalMetricSource").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExternalMetricSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExternalMetricSource {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.ExternalMetricStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExternalMetricStatus {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ExternalMetricStatus.metric)
    pub metric: ::protobuf::MessageField<MetricIdentifier>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ExternalMetricStatus.current)
    pub current: ::protobuf::MessageField<MetricValueStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.ExternalMetricStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExternalMetricStatus {
    fn default() -> &'a ExternalMetricStatus {
        <ExternalMetricStatus as ::protobuf::Message>::default_instance()
    }
}

impl ExternalMetricStatus {
    pub fn new() -> ExternalMetricStatus {
        ::std::default::Default::default()
    }

    // optional .api.autoscaling.v2.MetricIdentifier metric = 1;

    pub fn metric(&self) -> &MetricIdentifier {
        self.metric.as_ref().unwrap_or_else(|| <MetricIdentifier as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metric(&mut self) {
        self.metric.clear();
    }

    pub fn has_metric(&self) -> bool {
        self.metric.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metric(&mut self, v: MetricIdentifier) {
        self.metric = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric(&mut self) -> &mut MetricIdentifier {
        self.metric.mut_or_insert_default()
    }

    // Take field
    pub fn take_metric(&mut self) -> MetricIdentifier {
        self.metric.take().unwrap_or_else(|| MetricIdentifier::new())
    }

    // optional .api.autoscaling.v2.MetricValueStatus current = 2;

    pub fn current(&self) -> &MetricValueStatus {
        self.current.as_ref().unwrap_or_else(|| <MetricValueStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_current(&mut self) {
        self.current.clear();
    }

    pub fn has_current(&self) -> bool {
        self.current.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current(&mut self, v: MetricValueStatus) {
        self.current = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current(&mut self) -> &mut MetricValueStatus {
        self.current.mut_or_insert_default()
    }

    // Take field
    pub fn take_current(&mut self) -> MetricValueStatus {
        self.current.take().unwrap_or_else(|| MetricValueStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricIdentifier>(
            "metric",
            |m: &ExternalMetricStatus| { &m.metric },
            |m: &mut ExternalMetricStatus| { &mut m.metric },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricValueStatus>(
            "current",
            |m: &ExternalMetricStatus| { &m.current },
            |m: &mut ExternalMetricStatus| { &mut m.current },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExternalMetricStatus>(
            "ExternalMetricStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExternalMetricStatus {
    const NAME: &'static str = "ExternalMetricStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metric)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.current)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metric.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.current.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metric.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.current.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExternalMetricStatus {
        ExternalMetricStatus::new()
    }

    fn clear(&mut self) {
        self.metric.clear();
        self.current.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExternalMetricStatus {
        static instance: ExternalMetricStatus = ExternalMetricStatus {
            metric: ::protobuf::MessageField::none(),
            current: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExternalMetricStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExternalMetricStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExternalMetricStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExternalMetricStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.HPAScalingPolicy)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HPAScalingPolicy {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.HPAScalingPolicy.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.HPAScalingPolicy.value)
    pub value: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.HPAScalingPolicy.periodSeconds)
    pub periodSeconds: ::std::option::Option<i32>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.HPAScalingPolicy.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HPAScalingPolicy {
    fn default() -> &'a HPAScalingPolicy {
        <HPAScalingPolicy as ::protobuf::Message>::default_instance()
    }
}

impl HPAScalingPolicy {
    pub fn new() -> HPAScalingPolicy {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 value = 2;

    pub fn value(&self) -> i32 {
        self.value.unwrap_or(0)
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: i32) {
        self.value = ::std::option::Option::Some(v);
    }

    // optional int32 periodSeconds = 3;

    pub fn periodSeconds(&self) -> i32 {
        self.periodSeconds.unwrap_or(0)
    }

    pub fn clear_periodSeconds(&mut self) {
        self.periodSeconds = ::std::option::Option::None;
    }

    pub fn has_periodSeconds(&self) -> bool {
        self.periodSeconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_periodSeconds(&mut self, v: i32) {
        self.periodSeconds = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &HPAScalingPolicy| { &m.type_ },
            |m: &mut HPAScalingPolicy| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &HPAScalingPolicy| { &m.value },
            |m: &mut HPAScalingPolicy| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "periodSeconds",
            |m: &HPAScalingPolicy| { &m.periodSeconds },
            |m: &mut HPAScalingPolicy| { &mut m.periodSeconds },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HPAScalingPolicy>(
            "HPAScalingPolicy",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HPAScalingPolicy {
    const NAME: &'static str = "HPAScalingPolicy";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.value = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.periodSeconds = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.value {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.periodSeconds {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.value {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.periodSeconds {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HPAScalingPolicy {
        HPAScalingPolicy::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.periodSeconds = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HPAScalingPolicy {
        static instance: HPAScalingPolicy = HPAScalingPolicy {
            type_: ::std::option::Option::None,
            value: ::std::option::Option::None,
            periodSeconds: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HPAScalingPolicy {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HPAScalingPolicy").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HPAScalingPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HPAScalingPolicy {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.HPAScalingRules)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HPAScalingRules {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.HPAScalingRules.stabilizationWindowSeconds)
    pub stabilizationWindowSeconds: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.HPAScalingRules.selectPolicy)
    pub selectPolicy: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HPAScalingRules.policies)
    pub policies: ::std::vec::Vec<HPAScalingPolicy>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.HPAScalingRules.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HPAScalingRules {
    fn default() -> &'a HPAScalingRules {
        <HPAScalingRules as ::protobuf::Message>::default_instance()
    }
}

impl HPAScalingRules {
    pub fn new() -> HPAScalingRules {
        ::std::default::Default::default()
    }

    // optional int32 stabilizationWindowSeconds = 3;

    pub fn stabilizationWindowSeconds(&self) -> i32 {
        self.stabilizationWindowSeconds.unwrap_or(0)
    }

    pub fn clear_stabilizationWindowSeconds(&mut self) {
        self.stabilizationWindowSeconds = ::std::option::Option::None;
    }

    pub fn has_stabilizationWindowSeconds(&self) -> bool {
        self.stabilizationWindowSeconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stabilizationWindowSeconds(&mut self, v: i32) {
        self.stabilizationWindowSeconds = ::std::option::Option::Some(v);
    }

    // optional string selectPolicy = 1;

    pub fn selectPolicy(&self) -> &str {
        match self.selectPolicy.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_selectPolicy(&mut self) {
        self.selectPolicy = ::std::option::Option::None;
    }

    pub fn has_selectPolicy(&self) -> bool {
        self.selectPolicy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_selectPolicy(&mut self, v: ::std::string::String) {
        self.selectPolicy = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selectPolicy(&mut self) -> &mut ::std::string::String {
        if self.selectPolicy.is_none() {
            self.selectPolicy = ::std::option::Option::Some(::std::string::String::new());
        }
        self.selectPolicy.as_mut().unwrap()
    }

    // Take field
    pub fn take_selectPolicy(&mut self) -> ::std::string::String {
        self.selectPolicy.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .api.autoscaling.v2.HPAScalingPolicy policies = 2;

    pub fn policies(&self) -> &[HPAScalingPolicy] {
        &self.policies
    }

    pub fn clear_policies(&mut self) {
        self.policies.clear();
    }

    // Param is passed by value, moved
    pub fn set_policies(&mut self, v: ::std::vec::Vec<HPAScalingPolicy>) {
        self.policies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_policies(&mut self) -> &mut ::std::vec::Vec<HPAScalingPolicy> {
        &mut self.policies
    }

    // Take field
    pub fn take_policies(&mut self) -> ::std::vec::Vec<HPAScalingPolicy> {
        ::std::mem::replace(&mut self.policies, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "stabilizationWindowSeconds",
            |m: &HPAScalingRules| { &m.stabilizationWindowSeconds },
            |m: &mut HPAScalingRules| { &mut m.stabilizationWindowSeconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "selectPolicy",
            |m: &HPAScalingRules| { &m.selectPolicy },
            |m: &mut HPAScalingRules| { &mut m.selectPolicy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "policies",
            |m: &HPAScalingRules| { &m.policies },
            |m: &mut HPAScalingRules| { &mut m.policies },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HPAScalingRules>(
            "HPAScalingRules",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HPAScalingRules {
    const NAME: &'static str = "HPAScalingRules";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.stabilizationWindowSeconds = ::std::option::Option::Some(is.read_int32()?);
                },
                10 => {
                    self.selectPolicy = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.policies.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.stabilizationWindowSeconds {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.selectPolicy.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.policies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.stabilizationWindowSeconds {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.selectPolicy.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.policies {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HPAScalingRules {
        HPAScalingRules::new()
    }

    fn clear(&mut self) {
        self.stabilizationWindowSeconds = ::std::option::Option::None;
        self.selectPolicy = ::std::option::Option::None;
        self.policies.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HPAScalingRules {
        static instance: HPAScalingRules = HPAScalingRules {
            stabilizationWindowSeconds: ::std::option::Option::None,
            selectPolicy: ::std::option::Option::None,
            policies: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HPAScalingRules {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HPAScalingRules").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HPAScalingRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HPAScalingRules {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.HorizontalPodAutoscaler)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HorizontalPodAutoscaler {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscaler.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscaler.spec)
    pub spec: ::protobuf::MessageField<HorizontalPodAutoscalerSpec>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscaler.status)
    pub status: ::protobuf::MessageField<HorizontalPodAutoscalerStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.HorizontalPodAutoscaler.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HorizontalPodAutoscaler {
    fn default() -> &'a HorizontalPodAutoscaler {
        <HorizontalPodAutoscaler as ::protobuf::Message>::default_instance()
    }
}

impl HorizontalPodAutoscaler {
    pub fn new() -> HorizontalPodAutoscaler {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.autoscaling.v2.HorizontalPodAutoscalerSpec spec = 2;

    pub fn spec(&self) -> &HorizontalPodAutoscalerSpec {
        self.spec.as_ref().unwrap_or_else(|| <HorizontalPodAutoscalerSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: HorizontalPodAutoscalerSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut HorizontalPodAutoscalerSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> HorizontalPodAutoscalerSpec {
        self.spec.take().unwrap_or_else(|| HorizontalPodAutoscalerSpec::new())
    }

    // optional .api.autoscaling.v2.HorizontalPodAutoscalerStatus status = 3;

    pub fn status(&self) -> &HorizontalPodAutoscalerStatus {
        self.status.as_ref().unwrap_or_else(|| <HorizontalPodAutoscalerStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: HorizontalPodAutoscalerStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut HorizontalPodAutoscalerStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> HorizontalPodAutoscalerStatus {
        self.status.take().unwrap_or_else(|| HorizontalPodAutoscalerStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &HorizontalPodAutoscaler| { &m.metadata },
            |m: &mut HorizontalPodAutoscaler| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, HorizontalPodAutoscalerSpec>(
            "spec",
            |m: &HorizontalPodAutoscaler| { &m.spec },
            |m: &mut HorizontalPodAutoscaler| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, HorizontalPodAutoscalerStatus>(
            "status",
            |m: &HorizontalPodAutoscaler| { &m.status },
            |m: &mut HorizontalPodAutoscaler| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HorizontalPodAutoscaler>(
            "HorizontalPodAutoscaler",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HorizontalPodAutoscaler {
    const NAME: &'static str = "HorizontalPodAutoscaler";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HorizontalPodAutoscaler {
        HorizontalPodAutoscaler::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HorizontalPodAutoscaler {
        static instance: HorizontalPodAutoscaler = HorizontalPodAutoscaler {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HorizontalPodAutoscaler {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HorizontalPodAutoscaler").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HorizontalPodAutoscaler {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HorizontalPodAutoscaler {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.HorizontalPodAutoscalerBehavior)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HorizontalPodAutoscalerBehavior {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerBehavior.scaleUp)
    pub scaleUp: ::protobuf::MessageField<HPAScalingRules>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerBehavior.scaleDown)
    pub scaleDown: ::protobuf::MessageField<HPAScalingRules>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.HorizontalPodAutoscalerBehavior.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HorizontalPodAutoscalerBehavior {
    fn default() -> &'a HorizontalPodAutoscalerBehavior {
        <HorizontalPodAutoscalerBehavior as ::protobuf::Message>::default_instance()
    }
}

impl HorizontalPodAutoscalerBehavior {
    pub fn new() -> HorizontalPodAutoscalerBehavior {
        ::std::default::Default::default()
    }

    // optional .api.autoscaling.v2.HPAScalingRules scaleUp = 1;

    pub fn scaleUp(&self) -> &HPAScalingRules {
        self.scaleUp.as_ref().unwrap_or_else(|| <HPAScalingRules as ::protobuf::Message>::default_instance())
    }

    pub fn clear_scaleUp(&mut self) {
        self.scaleUp.clear();
    }

    pub fn has_scaleUp(&self) -> bool {
        self.scaleUp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scaleUp(&mut self, v: HPAScalingRules) {
        self.scaleUp = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scaleUp(&mut self) -> &mut HPAScalingRules {
        self.scaleUp.mut_or_insert_default()
    }

    // Take field
    pub fn take_scaleUp(&mut self) -> HPAScalingRules {
        self.scaleUp.take().unwrap_or_else(|| HPAScalingRules::new())
    }

    // optional .api.autoscaling.v2.HPAScalingRules scaleDown = 2;

    pub fn scaleDown(&self) -> &HPAScalingRules {
        self.scaleDown.as_ref().unwrap_or_else(|| <HPAScalingRules as ::protobuf::Message>::default_instance())
    }

    pub fn clear_scaleDown(&mut self) {
        self.scaleDown.clear();
    }

    pub fn has_scaleDown(&self) -> bool {
        self.scaleDown.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scaleDown(&mut self, v: HPAScalingRules) {
        self.scaleDown = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scaleDown(&mut self) -> &mut HPAScalingRules {
        self.scaleDown.mut_or_insert_default()
    }

    // Take field
    pub fn take_scaleDown(&mut self) -> HPAScalingRules {
        self.scaleDown.take().unwrap_or_else(|| HPAScalingRules::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, HPAScalingRules>(
            "scaleUp",
            |m: &HorizontalPodAutoscalerBehavior| { &m.scaleUp },
            |m: &mut HorizontalPodAutoscalerBehavior| { &mut m.scaleUp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, HPAScalingRules>(
            "scaleDown",
            |m: &HorizontalPodAutoscalerBehavior| { &m.scaleDown },
            |m: &mut HorizontalPodAutoscalerBehavior| { &mut m.scaleDown },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HorizontalPodAutoscalerBehavior>(
            "HorizontalPodAutoscalerBehavior",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HorizontalPodAutoscalerBehavior {
    const NAME: &'static str = "HorizontalPodAutoscalerBehavior";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scaleUp)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scaleDown)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.scaleUp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.scaleDown.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.scaleUp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.scaleDown.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HorizontalPodAutoscalerBehavior {
        HorizontalPodAutoscalerBehavior::new()
    }

    fn clear(&mut self) {
        self.scaleUp.clear();
        self.scaleDown.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HorizontalPodAutoscalerBehavior {
        static instance: HorizontalPodAutoscalerBehavior = HorizontalPodAutoscalerBehavior {
            scaleUp: ::protobuf::MessageField::none(),
            scaleDown: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HorizontalPodAutoscalerBehavior {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HorizontalPodAutoscalerBehavior").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HorizontalPodAutoscalerBehavior {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HorizontalPodAutoscalerBehavior {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.HorizontalPodAutoscalerCondition)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HorizontalPodAutoscalerCondition {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerCondition.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerCondition.status)
    pub status: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerCondition.lastTransitionTime)
    pub lastTransitionTime: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerCondition.reason)
    pub reason: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerCondition.message)
    pub message: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.HorizontalPodAutoscalerCondition.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HorizontalPodAutoscalerCondition {
    fn default() -> &'a HorizontalPodAutoscalerCondition {
        <HorizontalPodAutoscalerCondition as ::protobuf::Message>::default_instance()
    }
}

impl HorizontalPodAutoscalerCondition {
    pub fn new() -> HorizontalPodAutoscalerCondition {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string status = 2;

    pub fn status(&self) -> &str {
        match self.status.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        if self.status.is_none() {
            self.status = ::std::option::Option::Some(::std::string::String::new());
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        self.status.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

    pub fn lastTransitionTime(&self) -> &crate::v1_31::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastTransitionTime(&mut self) {
        self.lastTransitionTime.clear();
    }

    pub fn has_lastTransitionTime(&self) -> bool {
        self.lastTransitionTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastTransitionTime(&mut self, v: crate::v1_31::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastTransitionTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastTransitionTime(&mut self) -> &mut crate::v1_31::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastTransitionTime(&mut self) -> crate::v1_31::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional string reason = 4;

    pub fn reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string message = 5;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &HorizontalPodAutoscalerCondition| { &m.type_ },
            |m: &mut HorizontalPodAutoscalerCondition| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &HorizontalPodAutoscalerCondition| { &m.status },
            |m: &mut HorizontalPodAutoscalerCondition| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::apis::meta::v1::Time>(
            "lastTransitionTime",
            |m: &HorizontalPodAutoscalerCondition| { &m.lastTransitionTime },
            |m: &mut HorizontalPodAutoscalerCondition| { &mut m.lastTransitionTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &HorizontalPodAutoscalerCondition| { &m.reason },
            |m: &mut HorizontalPodAutoscalerCondition| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &HorizontalPodAutoscalerCondition| { &m.message },
            |m: &mut HorizontalPodAutoscalerCondition| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HorizontalPodAutoscalerCondition>(
            "HorizontalPodAutoscalerCondition",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HorizontalPodAutoscalerCondition {
    const NAME: &'static str = "HorizontalPodAutoscalerCondition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.status = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastTransitionTime)?;
                },
                34 => {
                    self.reason = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.status.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.lastTransitionTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.reason.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.status.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.lastTransitionTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.reason.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HorizontalPodAutoscalerCondition {
        HorizontalPodAutoscalerCondition::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.lastTransitionTime.clear();
        self.reason = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HorizontalPodAutoscalerCondition {
        static instance: HorizontalPodAutoscalerCondition = HorizontalPodAutoscalerCondition {
            type_: ::std::option::Option::None,
            status: ::std::option::Option::None,
            lastTransitionTime: ::protobuf::MessageField::none(),
            reason: ::std::option::Option::None,
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HorizontalPodAutoscalerCondition {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HorizontalPodAutoscalerCondition").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HorizontalPodAutoscalerCondition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HorizontalPodAutoscalerCondition {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.HorizontalPodAutoscalerList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HorizontalPodAutoscalerList {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerList.items)
    pub items: ::std::vec::Vec<HorizontalPodAutoscaler>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.HorizontalPodAutoscalerList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HorizontalPodAutoscalerList {
    fn default() -> &'a HorizontalPodAutoscalerList {
        <HorizontalPodAutoscalerList as ::protobuf::Message>::default_instance()
    }
}

impl HorizontalPodAutoscalerList {
    pub fn new() -> HorizontalPodAutoscalerList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.autoscaling.v2.HorizontalPodAutoscaler items = 2;

    pub fn items(&self) -> &[HorizontalPodAutoscaler] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<HorizontalPodAutoscaler>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<HorizontalPodAutoscaler> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<HorizontalPodAutoscaler> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &HorizontalPodAutoscalerList| { &m.metadata },
            |m: &mut HorizontalPodAutoscalerList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &HorizontalPodAutoscalerList| { &m.items },
            |m: &mut HorizontalPodAutoscalerList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HorizontalPodAutoscalerList>(
            "HorizontalPodAutoscalerList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HorizontalPodAutoscalerList {
    const NAME: &'static str = "HorizontalPodAutoscalerList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HorizontalPodAutoscalerList {
        HorizontalPodAutoscalerList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HorizontalPodAutoscalerList {
        static instance: HorizontalPodAutoscalerList = HorizontalPodAutoscalerList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HorizontalPodAutoscalerList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HorizontalPodAutoscalerList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HorizontalPodAutoscalerList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HorizontalPodAutoscalerList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.HorizontalPodAutoscalerSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HorizontalPodAutoscalerSpec {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerSpec.scaleTargetRef)
    pub scaleTargetRef: ::protobuf::MessageField<CrossVersionObjectReference>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerSpec.minReplicas)
    pub minReplicas: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerSpec.maxReplicas)
    pub maxReplicas: ::std::option::Option<i32>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerSpec.metrics)
    pub metrics: ::std::vec::Vec<MetricSpec>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerSpec.behavior)
    pub behavior: ::protobuf::MessageField<HorizontalPodAutoscalerBehavior>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.HorizontalPodAutoscalerSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HorizontalPodAutoscalerSpec {
    fn default() -> &'a HorizontalPodAutoscalerSpec {
        <HorizontalPodAutoscalerSpec as ::protobuf::Message>::default_instance()
    }
}

impl HorizontalPodAutoscalerSpec {
    pub fn new() -> HorizontalPodAutoscalerSpec {
        ::std::default::Default::default()
    }

    // optional .api.autoscaling.v2.CrossVersionObjectReference scaleTargetRef = 1;

    pub fn scaleTargetRef(&self) -> &CrossVersionObjectReference {
        self.scaleTargetRef.as_ref().unwrap_or_else(|| <CrossVersionObjectReference as ::protobuf::Message>::default_instance())
    }

    pub fn clear_scaleTargetRef(&mut self) {
        self.scaleTargetRef.clear();
    }

    pub fn has_scaleTargetRef(&self) -> bool {
        self.scaleTargetRef.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scaleTargetRef(&mut self, v: CrossVersionObjectReference) {
        self.scaleTargetRef = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scaleTargetRef(&mut self) -> &mut CrossVersionObjectReference {
        self.scaleTargetRef.mut_or_insert_default()
    }

    // Take field
    pub fn take_scaleTargetRef(&mut self) -> CrossVersionObjectReference {
        self.scaleTargetRef.take().unwrap_or_else(|| CrossVersionObjectReference::new())
    }

    // optional int32 minReplicas = 2;

    pub fn minReplicas(&self) -> i32 {
        self.minReplicas.unwrap_or(0)
    }

    pub fn clear_minReplicas(&mut self) {
        self.minReplicas = ::std::option::Option::None;
    }

    pub fn has_minReplicas(&self) -> bool {
        self.minReplicas.is_some()
    }

    // Param is passed by value, moved
    pub fn set_minReplicas(&mut self, v: i32) {
        self.minReplicas = ::std::option::Option::Some(v);
    }

    // optional int32 maxReplicas = 3;

    pub fn maxReplicas(&self) -> i32 {
        self.maxReplicas.unwrap_or(0)
    }

    pub fn clear_maxReplicas(&mut self) {
        self.maxReplicas = ::std::option::Option::None;
    }

    pub fn has_maxReplicas(&self) -> bool {
        self.maxReplicas.is_some()
    }

    // Param is passed by value, moved
    pub fn set_maxReplicas(&mut self, v: i32) {
        self.maxReplicas = ::std::option::Option::Some(v);
    }

    // repeated .api.autoscaling.v2.MetricSpec metrics = 4;

    pub fn metrics(&self) -> &[MetricSpec] {
        &self.metrics
    }

    pub fn clear_metrics(&mut self) {
        self.metrics.clear();
    }

    // Param is passed by value, moved
    pub fn set_metrics(&mut self, v: ::std::vec::Vec<MetricSpec>) {
        self.metrics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metrics(&mut self) -> &mut ::std::vec::Vec<MetricSpec> {
        &mut self.metrics
    }

    // Take field
    pub fn take_metrics(&mut self) -> ::std::vec::Vec<MetricSpec> {
        ::std::mem::replace(&mut self.metrics, ::std::vec::Vec::new())
    }

    // optional .api.autoscaling.v2.HorizontalPodAutoscalerBehavior behavior = 5;

    pub fn behavior(&self) -> &HorizontalPodAutoscalerBehavior {
        self.behavior.as_ref().unwrap_or_else(|| <HorizontalPodAutoscalerBehavior as ::protobuf::Message>::default_instance())
    }

    pub fn clear_behavior(&mut self) {
        self.behavior.clear();
    }

    pub fn has_behavior(&self) -> bool {
        self.behavior.is_some()
    }

    // Param is passed by value, moved
    pub fn set_behavior(&mut self, v: HorizontalPodAutoscalerBehavior) {
        self.behavior = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_behavior(&mut self) -> &mut HorizontalPodAutoscalerBehavior {
        self.behavior.mut_or_insert_default()
    }

    // Take field
    pub fn take_behavior(&mut self) -> HorizontalPodAutoscalerBehavior {
        self.behavior.take().unwrap_or_else(|| HorizontalPodAutoscalerBehavior::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CrossVersionObjectReference>(
            "scaleTargetRef",
            |m: &HorizontalPodAutoscalerSpec| { &m.scaleTargetRef },
            |m: &mut HorizontalPodAutoscalerSpec| { &mut m.scaleTargetRef },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "minReplicas",
            |m: &HorizontalPodAutoscalerSpec| { &m.minReplicas },
            |m: &mut HorizontalPodAutoscalerSpec| { &mut m.minReplicas },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "maxReplicas",
            |m: &HorizontalPodAutoscalerSpec| { &m.maxReplicas },
            |m: &mut HorizontalPodAutoscalerSpec| { &mut m.maxReplicas },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "metrics",
            |m: &HorizontalPodAutoscalerSpec| { &m.metrics },
            |m: &mut HorizontalPodAutoscalerSpec| { &mut m.metrics },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, HorizontalPodAutoscalerBehavior>(
            "behavior",
            |m: &HorizontalPodAutoscalerSpec| { &m.behavior },
            |m: &mut HorizontalPodAutoscalerSpec| { &mut m.behavior },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HorizontalPodAutoscalerSpec>(
            "HorizontalPodAutoscalerSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HorizontalPodAutoscalerSpec {
    const NAME: &'static str = "HorizontalPodAutoscalerSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scaleTargetRef)?;
                },
                16 => {
                    self.minReplicas = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.maxReplicas = ::std::option::Option::Some(is.read_int32()?);
                },
                34 => {
                    self.metrics.push(is.read_message()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.behavior)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.scaleTargetRef.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.minReplicas {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.maxReplicas {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        for value in &self.metrics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.behavior.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.scaleTargetRef.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.minReplicas {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.maxReplicas {
            os.write_int32(3, v)?;
        }
        for v in &self.metrics {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.behavior.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HorizontalPodAutoscalerSpec {
        HorizontalPodAutoscalerSpec::new()
    }

    fn clear(&mut self) {
        self.scaleTargetRef.clear();
        self.minReplicas = ::std::option::Option::None;
        self.maxReplicas = ::std::option::Option::None;
        self.metrics.clear();
        self.behavior.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HorizontalPodAutoscalerSpec {
        static instance: HorizontalPodAutoscalerSpec = HorizontalPodAutoscalerSpec {
            scaleTargetRef: ::protobuf::MessageField::none(),
            minReplicas: ::std::option::Option::None,
            maxReplicas: ::std::option::Option::None,
            metrics: ::std::vec::Vec::new(),
            behavior: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HorizontalPodAutoscalerSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HorizontalPodAutoscalerSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HorizontalPodAutoscalerSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HorizontalPodAutoscalerSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.HorizontalPodAutoscalerStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HorizontalPodAutoscalerStatus {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerStatus.observedGeneration)
    pub observedGeneration: ::std::option::Option<i64>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerStatus.lastScaleTime)
    pub lastScaleTime: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerStatus.currentReplicas)
    pub currentReplicas: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerStatus.desiredReplicas)
    pub desiredReplicas: ::std::option::Option<i32>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerStatus.currentMetrics)
    pub currentMetrics: ::std::vec::Vec<MetricStatus>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.HorizontalPodAutoscalerStatus.conditions)
    pub conditions: ::std::vec::Vec<HorizontalPodAutoscalerCondition>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.HorizontalPodAutoscalerStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HorizontalPodAutoscalerStatus {
    fn default() -> &'a HorizontalPodAutoscalerStatus {
        <HorizontalPodAutoscalerStatus as ::protobuf::Message>::default_instance()
    }
}

impl HorizontalPodAutoscalerStatus {
    pub fn new() -> HorizontalPodAutoscalerStatus {
        ::std::default::Default::default()
    }

    // optional int64 observedGeneration = 1;

    pub fn observedGeneration(&self) -> i64 {
        self.observedGeneration.unwrap_or(0)
    }

    pub fn clear_observedGeneration(&mut self) {
        self.observedGeneration = ::std::option::Option::None;
    }

    pub fn has_observedGeneration(&self) -> bool {
        self.observedGeneration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_observedGeneration(&mut self, v: i64) {
        self.observedGeneration = ::std::option::Option::Some(v);
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastScaleTime = 2;

    pub fn lastScaleTime(&self) -> &crate::v1_31::apimachinery::pkg::apis::meta::v1::Time {
        self.lastScaleTime.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastScaleTime(&mut self) {
        self.lastScaleTime.clear();
    }

    pub fn has_lastScaleTime(&self) -> bool {
        self.lastScaleTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastScaleTime(&mut self, v: crate::v1_31::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastScaleTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastScaleTime(&mut self) -> &mut crate::v1_31::apimachinery::pkg::apis::meta::v1::Time {
        self.lastScaleTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastScaleTime(&mut self) -> crate::v1_31::apimachinery::pkg::apis::meta::v1::Time {
        self.lastScaleTime.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional int32 currentReplicas = 3;

    pub fn currentReplicas(&self) -> i32 {
        self.currentReplicas.unwrap_or(0)
    }

    pub fn clear_currentReplicas(&mut self) {
        self.currentReplicas = ::std::option::Option::None;
    }

    pub fn has_currentReplicas(&self) -> bool {
        self.currentReplicas.is_some()
    }

    // Param is passed by value, moved
    pub fn set_currentReplicas(&mut self, v: i32) {
        self.currentReplicas = ::std::option::Option::Some(v);
    }

    // optional int32 desiredReplicas = 4;

    pub fn desiredReplicas(&self) -> i32 {
        self.desiredReplicas.unwrap_or(0)
    }

    pub fn clear_desiredReplicas(&mut self) {
        self.desiredReplicas = ::std::option::Option::None;
    }

    pub fn has_desiredReplicas(&self) -> bool {
        self.desiredReplicas.is_some()
    }

    // Param is passed by value, moved
    pub fn set_desiredReplicas(&mut self, v: i32) {
        self.desiredReplicas = ::std::option::Option::Some(v);
    }

    // repeated .api.autoscaling.v2.MetricStatus currentMetrics = 5;

    pub fn currentMetrics(&self) -> &[MetricStatus] {
        &self.currentMetrics
    }

    pub fn clear_currentMetrics(&mut self) {
        self.currentMetrics.clear();
    }

    // Param is passed by value, moved
    pub fn set_currentMetrics(&mut self, v: ::std::vec::Vec<MetricStatus>) {
        self.currentMetrics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_currentMetrics(&mut self) -> &mut ::std::vec::Vec<MetricStatus> {
        &mut self.currentMetrics
    }

    // Take field
    pub fn take_currentMetrics(&mut self) -> ::std::vec::Vec<MetricStatus> {
        ::std::mem::replace(&mut self.currentMetrics, ::std::vec::Vec::new())
    }

    // repeated .api.autoscaling.v2.HorizontalPodAutoscalerCondition conditions = 6;

    pub fn conditions(&self) -> &[HorizontalPodAutoscalerCondition] {
        &self.conditions
    }

    pub fn clear_conditions(&mut self) {
        self.conditions.clear();
    }

    // Param is passed by value, moved
    pub fn set_conditions(&mut self, v: ::std::vec::Vec<HorizontalPodAutoscalerCondition>) {
        self.conditions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_conditions(&mut self) -> &mut ::std::vec::Vec<HorizontalPodAutoscalerCondition> {
        &mut self.conditions
    }

    // Take field
    pub fn take_conditions(&mut self) -> ::std::vec::Vec<HorizontalPodAutoscalerCondition> {
        ::std::mem::replace(&mut self.conditions, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "observedGeneration",
            |m: &HorizontalPodAutoscalerStatus| { &m.observedGeneration },
            |m: &mut HorizontalPodAutoscalerStatus| { &mut m.observedGeneration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::apis::meta::v1::Time>(
            "lastScaleTime",
            |m: &HorizontalPodAutoscalerStatus| { &m.lastScaleTime },
            |m: &mut HorizontalPodAutoscalerStatus| { &mut m.lastScaleTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "currentReplicas",
            |m: &HorizontalPodAutoscalerStatus| { &m.currentReplicas },
            |m: &mut HorizontalPodAutoscalerStatus| { &mut m.currentReplicas },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "desiredReplicas",
            |m: &HorizontalPodAutoscalerStatus| { &m.desiredReplicas },
            |m: &mut HorizontalPodAutoscalerStatus| { &mut m.desiredReplicas },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "currentMetrics",
            |m: &HorizontalPodAutoscalerStatus| { &m.currentMetrics },
            |m: &mut HorizontalPodAutoscalerStatus| { &mut m.currentMetrics },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "conditions",
            |m: &HorizontalPodAutoscalerStatus| { &m.conditions },
            |m: &mut HorizontalPodAutoscalerStatus| { &mut m.conditions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HorizontalPodAutoscalerStatus>(
            "HorizontalPodAutoscalerStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HorizontalPodAutoscalerStatus {
    const NAME: &'static str = "HorizontalPodAutoscalerStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.observedGeneration = ::std::option::Option::Some(is.read_int64()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastScaleTime)?;
                },
                24 => {
                    self.currentReplicas = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.desiredReplicas = ::std::option::Option::Some(is.read_int32()?);
                },
                42 => {
                    self.currentMetrics.push(is.read_message()?);
                },
                50 => {
                    self.conditions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.observedGeneration {
            my_size += ::protobuf::rt::int64_size(1, v);
        }
        if let Some(v) = self.lastScaleTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.currentReplicas {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.desiredReplicas {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        for value in &self.currentMetrics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.conditions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.observedGeneration {
            os.write_int64(1, v)?;
        }
        if let Some(v) = self.lastScaleTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.currentReplicas {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.desiredReplicas {
            os.write_int32(4, v)?;
        }
        for v in &self.currentMetrics {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.conditions {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HorizontalPodAutoscalerStatus {
        HorizontalPodAutoscalerStatus::new()
    }

    fn clear(&mut self) {
        self.observedGeneration = ::std::option::Option::None;
        self.lastScaleTime.clear();
        self.currentReplicas = ::std::option::Option::None;
        self.desiredReplicas = ::std::option::Option::None;
        self.currentMetrics.clear();
        self.conditions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HorizontalPodAutoscalerStatus {
        static instance: HorizontalPodAutoscalerStatus = HorizontalPodAutoscalerStatus {
            observedGeneration: ::std::option::Option::None,
            lastScaleTime: ::protobuf::MessageField::none(),
            currentReplicas: ::std::option::Option::None,
            desiredReplicas: ::std::option::Option::None,
            currentMetrics: ::std::vec::Vec::new(),
            conditions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HorizontalPodAutoscalerStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HorizontalPodAutoscalerStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HorizontalPodAutoscalerStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HorizontalPodAutoscalerStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.MetricIdentifier)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricIdentifier {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricIdentifier.name)
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricIdentifier.selector)
    pub selector: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::apis::meta::v1::LabelSelector>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.MetricIdentifier.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricIdentifier {
    fn default() -> &'a MetricIdentifier {
        <MetricIdentifier as ::protobuf::Message>::default_instance()
    }
}

impl MetricIdentifier {
    pub fn new() -> MetricIdentifier {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.LabelSelector selector = 2;

    pub fn selector(&self) -> &crate::v1_31::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.selector.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::apis::meta::v1::LabelSelector as ::protobuf::Message>::default_instance())
    }

    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    pub fn has_selector(&self) -> bool {
        self.selector.is_some()
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: crate::v1_31::apimachinery::pkg::apis::meta::v1::LabelSelector) {
        self.selector = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut crate::v1_31::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.selector.mut_or_insert_default()
    }

    // Take field
    pub fn take_selector(&mut self) -> crate::v1_31::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.selector.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::apis::meta::v1::LabelSelector::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &MetricIdentifier| { &m.name },
            |m: &mut MetricIdentifier| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::apis::meta::v1::LabelSelector>(
            "selector",
            |m: &MetricIdentifier| { &m.selector },
            |m: &mut MetricIdentifier| { &mut m.selector },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricIdentifier>(
            "MetricIdentifier",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricIdentifier {
    const NAME: &'static str = "MetricIdentifier";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.selector)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.selector.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.selector.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricIdentifier {
        MetricIdentifier::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.selector.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricIdentifier {
        static instance: MetricIdentifier = MetricIdentifier {
            name: ::std::option::Option::None,
            selector: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricIdentifier {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricIdentifier").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricIdentifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricIdentifier {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.MetricSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricSpec {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricSpec.type)
    pub type_: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricSpec.object)
    pub object: ::protobuf::MessageField<ObjectMetricSource>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricSpec.pods)
    pub pods: ::protobuf::MessageField<PodsMetricSource>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricSpec.resource)
    pub resource: ::protobuf::MessageField<ResourceMetricSource>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricSpec.containerResource)
    pub containerResource: ::protobuf::MessageField<ContainerResourceMetricSource>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricSpec.external)
    pub external: ::protobuf::MessageField<ExternalMetricSource>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.MetricSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricSpec {
    fn default() -> &'a MetricSpec {
        <MetricSpec as ::protobuf::Message>::default_instance()
    }
}

impl MetricSpec {
    pub fn new() -> MetricSpec {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.autoscaling.v2.ObjectMetricSource object = 2;

    pub fn object(&self) -> &ObjectMetricSource {
        self.object.as_ref().unwrap_or_else(|| <ObjectMetricSource as ::protobuf::Message>::default_instance())
    }

    pub fn clear_object(&mut self) {
        self.object.clear();
    }

    pub fn has_object(&self) -> bool {
        self.object.is_some()
    }

    // Param is passed by value, moved
    pub fn set_object(&mut self, v: ObjectMetricSource) {
        self.object = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_object(&mut self) -> &mut ObjectMetricSource {
        self.object.mut_or_insert_default()
    }

    // Take field
    pub fn take_object(&mut self) -> ObjectMetricSource {
        self.object.take().unwrap_or_else(|| ObjectMetricSource::new())
    }

    // optional .api.autoscaling.v2.PodsMetricSource pods = 3;

    pub fn pods(&self) -> &PodsMetricSource {
        self.pods.as_ref().unwrap_or_else(|| <PodsMetricSource as ::protobuf::Message>::default_instance())
    }

    pub fn clear_pods(&mut self) {
        self.pods.clear();
    }

    pub fn has_pods(&self) -> bool {
        self.pods.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pods(&mut self, v: PodsMetricSource) {
        self.pods = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pods(&mut self) -> &mut PodsMetricSource {
        self.pods.mut_or_insert_default()
    }

    // Take field
    pub fn take_pods(&mut self) -> PodsMetricSource {
        self.pods.take().unwrap_or_else(|| PodsMetricSource::new())
    }

    // optional .api.autoscaling.v2.ResourceMetricSource resource = 4;

    pub fn resource(&self) -> &ResourceMetricSource {
        self.resource.as_ref().unwrap_or_else(|| <ResourceMetricSource as ::protobuf::Message>::default_instance())
    }

    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: ResourceMetricSource) {
        self.resource = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut ResourceMetricSource {
        self.resource.mut_or_insert_default()
    }

    // Take field
    pub fn take_resource(&mut self) -> ResourceMetricSource {
        self.resource.take().unwrap_or_else(|| ResourceMetricSource::new())
    }

    // optional .api.autoscaling.v2.ContainerResourceMetricSource containerResource = 7;

    pub fn containerResource(&self) -> &ContainerResourceMetricSource {
        self.containerResource.as_ref().unwrap_or_else(|| <ContainerResourceMetricSource as ::protobuf::Message>::default_instance())
    }

    pub fn clear_containerResource(&mut self) {
        self.containerResource.clear();
    }

    pub fn has_containerResource(&self) -> bool {
        self.containerResource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_containerResource(&mut self, v: ContainerResourceMetricSource) {
        self.containerResource = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_containerResource(&mut self) -> &mut ContainerResourceMetricSource {
        self.containerResource.mut_or_insert_default()
    }

    // Take field
    pub fn take_containerResource(&mut self) -> ContainerResourceMetricSource {
        self.containerResource.take().unwrap_or_else(|| ContainerResourceMetricSource::new())
    }

    // optional .api.autoscaling.v2.ExternalMetricSource external = 5;

    pub fn external(&self) -> &ExternalMetricSource {
        self.external.as_ref().unwrap_or_else(|| <ExternalMetricSource as ::protobuf::Message>::default_instance())
    }

    pub fn clear_external(&mut self) {
        self.external.clear();
    }

    pub fn has_external(&self) -> bool {
        self.external.is_some()
    }

    // Param is passed by value, moved
    pub fn set_external(&mut self, v: ExternalMetricSource) {
        self.external = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_external(&mut self) -> &mut ExternalMetricSource {
        self.external.mut_or_insert_default()
    }

    // Take field
    pub fn take_external(&mut self) -> ExternalMetricSource {
        self.external.take().unwrap_or_else(|| ExternalMetricSource::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &MetricSpec| { &m.type_ },
            |m: &mut MetricSpec| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ObjectMetricSource>(
            "object",
            |m: &MetricSpec| { &m.object },
            |m: &mut MetricSpec| { &mut m.object },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PodsMetricSource>(
            "pods",
            |m: &MetricSpec| { &m.pods },
            |m: &mut MetricSpec| { &mut m.pods },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ResourceMetricSource>(
            "resource",
            |m: &MetricSpec| { &m.resource },
            |m: &mut MetricSpec| { &mut m.resource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ContainerResourceMetricSource>(
            "containerResource",
            |m: &MetricSpec| { &m.containerResource },
            |m: &mut MetricSpec| { &mut m.containerResource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ExternalMetricSource>(
            "external",
            |m: &MetricSpec| { &m.external },
            |m: &mut MetricSpec| { &mut m.external },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricSpec>(
            "MetricSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricSpec {
    const NAME: &'static str = "MetricSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.object)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pods)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resource)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.containerResource)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.external)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.object.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.pods.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.containerResource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.external.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.object.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.pods.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.resource.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.containerResource.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.external.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricSpec {
        MetricSpec::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.object.clear();
        self.pods.clear();
        self.resource.clear();
        self.containerResource.clear();
        self.external.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricSpec {
        static instance: MetricSpec = MetricSpec {
            type_: ::std::option::Option::None,
            object: ::protobuf::MessageField::none(),
            pods: ::protobuf::MessageField::none(),
            resource: ::protobuf::MessageField::none(),
            containerResource: ::protobuf::MessageField::none(),
            external: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.MetricStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricStatus {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricStatus.type)
    pub type_: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricStatus.object)
    pub object: ::protobuf::MessageField<ObjectMetricStatus>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricStatus.pods)
    pub pods: ::protobuf::MessageField<PodsMetricStatus>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricStatus.resource)
    pub resource: ::protobuf::MessageField<ResourceMetricStatus>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricStatus.containerResource)
    pub containerResource: ::protobuf::MessageField<ContainerResourceMetricStatus>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricStatus.external)
    pub external: ::protobuf::MessageField<ExternalMetricStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.MetricStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricStatus {
    fn default() -> &'a MetricStatus {
        <MetricStatus as ::protobuf::Message>::default_instance()
    }
}

impl MetricStatus {
    pub fn new() -> MetricStatus {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.autoscaling.v2.ObjectMetricStatus object = 2;

    pub fn object(&self) -> &ObjectMetricStatus {
        self.object.as_ref().unwrap_or_else(|| <ObjectMetricStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_object(&mut self) {
        self.object.clear();
    }

    pub fn has_object(&self) -> bool {
        self.object.is_some()
    }

    // Param is passed by value, moved
    pub fn set_object(&mut self, v: ObjectMetricStatus) {
        self.object = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_object(&mut self) -> &mut ObjectMetricStatus {
        self.object.mut_or_insert_default()
    }

    // Take field
    pub fn take_object(&mut self) -> ObjectMetricStatus {
        self.object.take().unwrap_or_else(|| ObjectMetricStatus::new())
    }

    // optional .api.autoscaling.v2.PodsMetricStatus pods = 3;

    pub fn pods(&self) -> &PodsMetricStatus {
        self.pods.as_ref().unwrap_or_else(|| <PodsMetricStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_pods(&mut self) {
        self.pods.clear();
    }

    pub fn has_pods(&self) -> bool {
        self.pods.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pods(&mut self, v: PodsMetricStatus) {
        self.pods = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pods(&mut self) -> &mut PodsMetricStatus {
        self.pods.mut_or_insert_default()
    }

    // Take field
    pub fn take_pods(&mut self) -> PodsMetricStatus {
        self.pods.take().unwrap_or_else(|| PodsMetricStatus::new())
    }

    // optional .api.autoscaling.v2.ResourceMetricStatus resource = 4;

    pub fn resource(&self) -> &ResourceMetricStatus {
        self.resource.as_ref().unwrap_or_else(|| <ResourceMetricStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: ResourceMetricStatus) {
        self.resource = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut ResourceMetricStatus {
        self.resource.mut_or_insert_default()
    }

    // Take field
    pub fn take_resource(&mut self) -> ResourceMetricStatus {
        self.resource.take().unwrap_or_else(|| ResourceMetricStatus::new())
    }

    // optional .api.autoscaling.v2.ContainerResourceMetricStatus containerResource = 7;

    pub fn containerResource(&self) -> &ContainerResourceMetricStatus {
        self.containerResource.as_ref().unwrap_or_else(|| <ContainerResourceMetricStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_containerResource(&mut self) {
        self.containerResource.clear();
    }

    pub fn has_containerResource(&self) -> bool {
        self.containerResource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_containerResource(&mut self, v: ContainerResourceMetricStatus) {
        self.containerResource = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_containerResource(&mut self) -> &mut ContainerResourceMetricStatus {
        self.containerResource.mut_or_insert_default()
    }

    // Take field
    pub fn take_containerResource(&mut self) -> ContainerResourceMetricStatus {
        self.containerResource.take().unwrap_or_else(|| ContainerResourceMetricStatus::new())
    }

    // optional .api.autoscaling.v2.ExternalMetricStatus external = 5;

    pub fn external(&self) -> &ExternalMetricStatus {
        self.external.as_ref().unwrap_or_else(|| <ExternalMetricStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_external(&mut self) {
        self.external.clear();
    }

    pub fn has_external(&self) -> bool {
        self.external.is_some()
    }

    // Param is passed by value, moved
    pub fn set_external(&mut self, v: ExternalMetricStatus) {
        self.external = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_external(&mut self) -> &mut ExternalMetricStatus {
        self.external.mut_or_insert_default()
    }

    // Take field
    pub fn take_external(&mut self) -> ExternalMetricStatus {
        self.external.take().unwrap_or_else(|| ExternalMetricStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &MetricStatus| { &m.type_ },
            |m: &mut MetricStatus| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ObjectMetricStatus>(
            "object",
            |m: &MetricStatus| { &m.object },
            |m: &mut MetricStatus| { &mut m.object },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PodsMetricStatus>(
            "pods",
            |m: &MetricStatus| { &m.pods },
            |m: &mut MetricStatus| { &mut m.pods },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ResourceMetricStatus>(
            "resource",
            |m: &MetricStatus| { &m.resource },
            |m: &mut MetricStatus| { &mut m.resource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ContainerResourceMetricStatus>(
            "containerResource",
            |m: &MetricStatus| { &m.containerResource },
            |m: &mut MetricStatus| { &mut m.containerResource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ExternalMetricStatus>(
            "external",
            |m: &MetricStatus| { &m.external },
            |m: &mut MetricStatus| { &mut m.external },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricStatus>(
            "MetricStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricStatus {
    const NAME: &'static str = "MetricStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.object)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pods)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resource)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.containerResource)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.external)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.object.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.pods.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.containerResource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.external.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.object.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.pods.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.resource.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.containerResource.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.external.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricStatus {
        MetricStatus::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.object.clear();
        self.pods.clear();
        self.resource.clear();
        self.containerResource.clear();
        self.external.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricStatus {
        static instance: MetricStatus = MetricStatus {
            type_: ::std::option::Option::None,
            object: ::protobuf::MessageField::none(),
            pods: ::protobuf::MessageField::none(),
            resource: ::protobuf::MessageField::none(),
            containerResource: ::protobuf::MessageField::none(),
            external: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.MetricTarget)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricTarget {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricTarget.type)
    pub type_: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricTarget.value)
    pub value: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::api::resource::Quantity>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricTarget.averageValue)
    pub averageValue: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::api::resource::Quantity>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricTarget.averageUtilization)
    pub averageUtilization: ::std::option::Option<i32>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.MetricTarget.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricTarget {
    fn default() -> &'a MetricTarget {
        <MetricTarget as ::protobuf::Message>::default_instance()
    }
}

impl MetricTarget {
    pub fn new() -> MetricTarget {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.api.resource.Quantity value = 2;

    pub fn value(&self) -> &crate::v1_31::apimachinery::pkg::api::resource::Quantity {
        self.value.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::api::resource::Quantity as ::protobuf::Message>::default_instance())
    }

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: crate::v1_31::apimachinery::pkg::api::resource::Quantity) {
        self.value = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut crate::v1_31::apimachinery::pkg::api::resource::Quantity {
        self.value.mut_or_insert_default()
    }

    // Take field
    pub fn take_value(&mut self) -> crate::v1_31::apimachinery::pkg::api::resource::Quantity {
        self.value.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::api::resource::Quantity::new())
    }

    // optional .apimachinery.pkg.api.resource.Quantity averageValue = 3;

    pub fn averageValue(&self) -> &crate::v1_31::apimachinery::pkg::api::resource::Quantity {
        self.averageValue.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::api::resource::Quantity as ::protobuf::Message>::default_instance())
    }

    pub fn clear_averageValue(&mut self) {
        self.averageValue.clear();
    }

    pub fn has_averageValue(&self) -> bool {
        self.averageValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_averageValue(&mut self, v: crate::v1_31::apimachinery::pkg::api::resource::Quantity) {
        self.averageValue = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_averageValue(&mut self) -> &mut crate::v1_31::apimachinery::pkg::api::resource::Quantity {
        self.averageValue.mut_or_insert_default()
    }

    // Take field
    pub fn take_averageValue(&mut self) -> crate::v1_31::apimachinery::pkg::api::resource::Quantity {
        self.averageValue.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::api::resource::Quantity::new())
    }

    // optional int32 averageUtilization = 4;

    pub fn averageUtilization(&self) -> i32 {
        self.averageUtilization.unwrap_or(0)
    }

    pub fn clear_averageUtilization(&mut self) {
        self.averageUtilization = ::std::option::Option::None;
    }

    pub fn has_averageUtilization(&self) -> bool {
        self.averageUtilization.is_some()
    }

    // Param is passed by value, moved
    pub fn set_averageUtilization(&mut self, v: i32) {
        self.averageUtilization = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &MetricTarget| { &m.type_ },
            |m: &mut MetricTarget| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::api::resource::Quantity>(
            "value",
            |m: &MetricTarget| { &m.value },
            |m: &mut MetricTarget| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::api::resource::Quantity>(
            "averageValue",
            |m: &MetricTarget| { &m.averageValue },
            |m: &mut MetricTarget| { &mut m.averageValue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "averageUtilization",
            |m: &MetricTarget| { &m.averageUtilization },
            |m: &mut MetricTarget| { &mut m.averageUtilization },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricTarget>(
            "MetricTarget",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricTarget {
    const NAME: &'static str = "MetricTarget";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.averageValue)?;
                },
                32 => {
                    self.averageUtilization = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.averageValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.averageUtilization {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.averageValue.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.averageUtilization {
            os.write_int32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricTarget {
        MetricTarget::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.value.clear();
        self.averageValue.clear();
        self.averageUtilization = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricTarget {
        static instance: MetricTarget = MetricTarget {
            type_: ::std::option::Option::None,
            value: ::protobuf::MessageField::none(),
            averageValue: ::protobuf::MessageField::none(),
            averageUtilization: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricTarget {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricTarget").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricTarget {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricTarget {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.MetricValueStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricValueStatus {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricValueStatus.value)
    pub value: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::api::resource::Quantity>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricValueStatus.averageValue)
    pub averageValue: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::api::resource::Quantity>,
    // @@protoc_insertion_point(field:api.autoscaling.v2.MetricValueStatus.averageUtilization)
    pub averageUtilization: ::std::option::Option<i32>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.MetricValueStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricValueStatus {
    fn default() -> &'a MetricValueStatus {
        <MetricValueStatus as ::protobuf::Message>::default_instance()
    }
}

impl MetricValueStatus {
    pub fn new() -> MetricValueStatus {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.api.resource.Quantity value = 1;

    pub fn value(&self) -> &crate::v1_31::apimachinery::pkg::api::resource::Quantity {
        self.value.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::api::resource::Quantity as ::protobuf::Message>::default_instance())
    }

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: crate::v1_31::apimachinery::pkg::api::resource::Quantity) {
        self.value = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut crate::v1_31::apimachinery::pkg::api::resource::Quantity {
        self.value.mut_or_insert_default()
    }

    // Take field
    pub fn take_value(&mut self) -> crate::v1_31::apimachinery::pkg::api::resource::Quantity {
        self.value.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::api::resource::Quantity::new())
    }

    // optional .apimachinery.pkg.api.resource.Quantity averageValue = 2;

    pub fn averageValue(&self) -> &crate::v1_31::apimachinery::pkg::api::resource::Quantity {
        self.averageValue.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::api::resource::Quantity as ::protobuf::Message>::default_instance())
    }

    pub fn clear_averageValue(&mut self) {
        self.averageValue.clear();
    }

    pub fn has_averageValue(&self) -> bool {
        self.averageValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_averageValue(&mut self, v: crate::v1_31::apimachinery::pkg::api::resource::Quantity) {
        self.averageValue = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_averageValue(&mut self) -> &mut crate::v1_31::apimachinery::pkg::api::resource::Quantity {
        self.averageValue.mut_or_insert_default()
    }

    // Take field
    pub fn take_averageValue(&mut self) -> crate::v1_31::apimachinery::pkg::api::resource::Quantity {
        self.averageValue.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::api::resource::Quantity::new())
    }

    // optional int32 averageUtilization = 3;

    pub fn averageUtilization(&self) -> i32 {
        self.averageUtilization.unwrap_or(0)
    }

    pub fn clear_averageUtilization(&mut self) {
        self.averageUtilization = ::std::option::Option::None;
    }

    pub fn has_averageUtilization(&self) -> bool {
        self.averageUtilization.is_some()
    }

    // Param is passed by value, moved
    pub fn set_averageUtilization(&mut self, v: i32) {
        self.averageUtilization = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::api::resource::Quantity>(
            "value",
            |m: &MetricValueStatus| { &m.value },
            |m: &mut MetricValueStatus| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::api::resource::Quantity>(
            "averageValue",
            |m: &MetricValueStatus| { &m.averageValue },
            |m: &mut MetricValueStatus| { &mut m.averageValue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "averageUtilization",
            |m: &MetricValueStatus| { &m.averageUtilization },
            |m: &mut MetricValueStatus| { &mut m.averageUtilization },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricValueStatus>(
            "MetricValueStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricValueStatus {
    const NAME: &'static str = "MetricValueStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.averageValue)?;
                },
                24 => {
                    self.averageUtilization = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.averageValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.averageUtilization {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.averageValue.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.averageUtilization {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricValueStatus {
        MetricValueStatus::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.averageValue.clear();
        self.averageUtilization = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricValueStatus {
        static instance: MetricValueStatus = MetricValueStatus {
            value: ::protobuf::MessageField::none(),
            averageValue: ::protobuf::MessageField::none(),
            averageUtilization: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricValueStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricValueStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricValueStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricValueStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.ObjectMetricSource)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ObjectMetricSource {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ObjectMetricSource.describedObject)
    pub describedObject: ::protobuf::MessageField<CrossVersionObjectReference>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ObjectMetricSource.target)
    pub target: ::protobuf::MessageField<MetricTarget>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ObjectMetricSource.metric)
    pub metric: ::protobuf::MessageField<MetricIdentifier>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.ObjectMetricSource.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ObjectMetricSource {
    fn default() -> &'a ObjectMetricSource {
        <ObjectMetricSource as ::protobuf::Message>::default_instance()
    }
}

impl ObjectMetricSource {
    pub fn new() -> ObjectMetricSource {
        ::std::default::Default::default()
    }

    // optional .api.autoscaling.v2.CrossVersionObjectReference describedObject = 1;

    pub fn describedObject(&self) -> &CrossVersionObjectReference {
        self.describedObject.as_ref().unwrap_or_else(|| <CrossVersionObjectReference as ::protobuf::Message>::default_instance())
    }

    pub fn clear_describedObject(&mut self) {
        self.describedObject.clear();
    }

    pub fn has_describedObject(&self) -> bool {
        self.describedObject.is_some()
    }

    // Param is passed by value, moved
    pub fn set_describedObject(&mut self, v: CrossVersionObjectReference) {
        self.describedObject = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_describedObject(&mut self) -> &mut CrossVersionObjectReference {
        self.describedObject.mut_or_insert_default()
    }

    // Take field
    pub fn take_describedObject(&mut self) -> CrossVersionObjectReference {
        self.describedObject.take().unwrap_or_else(|| CrossVersionObjectReference::new())
    }

    // optional .api.autoscaling.v2.MetricTarget target = 2;

    pub fn target(&self) -> &MetricTarget {
        self.target.as_ref().unwrap_or_else(|| <MetricTarget as ::protobuf::Message>::default_instance())
    }

    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    pub fn has_target(&self) -> bool {
        self.target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: MetricTarget) {
        self.target = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target(&mut self) -> &mut MetricTarget {
        self.target.mut_or_insert_default()
    }

    // Take field
    pub fn take_target(&mut self) -> MetricTarget {
        self.target.take().unwrap_or_else(|| MetricTarget::new())
    }

    // optional .api.autoscaling.v2.MetricIdentifier metric = 3;

    pub fn metric(&self) -> &MetricIdentifier {
        self.metric.as_ref().unwrap_or_else(|| <MetricIdentifier as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metric(&mut self) {
        self.metric.clear();
    }

    pub fn has_metric(&self) -> bool {
        self.metric.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metric(&mut self, v: MetricIdentifier) {
        self.metric = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric(&mut self) -> &mut MetricIdentifier {
        self.metric.mut_or_insert_default()
    }

    // Take field
    pub fn take_metric(&mut self) -> MetricIdentifier {
        self.metric.take().unwrap_or_else(|| MetricIdentifier::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CrossVersionObjectReference>(
            "describedObject",
            |m: &ObjectMetricSource| { &m.describedObject },
            |m: &mut ObjectMetricSource| { &mut m.describedObject },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricTarget>(
            "target",
            |m: &ObjectMetricSource| { &m.target },
            |m: &mut ObjectMetricSource| { &mut m.target },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricIdentifier>(
            "metric",
            |m: &ObjectMetricSource| { &m.metric },
            |m: &mut ObjectMetricSource| { &mut m.metric },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ObjectMetricSource>(
            "ObjectMetricSource",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ObjectMetricSource {
    const NAME: &'static str = "ObjectMetricSource";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.describedObject)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.target)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metric)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.describedObject.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.target.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.metric.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.describedObject.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.target.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.metric.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ObjectMetricSource {
        ObjectMetricSource::new()
    }

    fn clear(&mut self) {
        self.describedObject.clear();
        self.target.clear();
        self.metric.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ObjectMetricSource {
        static instance: ObjectMetricSource = ObjectMetricSource {
            describedObject: ::protobuf::MessageField::none(),
            target: ::protobuf::MessageField::none(),
            metric: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ObjectMetricSource {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ObjectMetricSource").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ObjectMetricSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ObjectMetricSource {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.ObjectMetricStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ObjectMetricStatus {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ObjectMetricStatus.metric)
    pub metric: ::protobuf::MessageField<MetricIdentifier>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ObjectMetricStatus.current)
    pub current: ::protobuf::MessageField<MetricValueStatus>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ObjectMetricStatus.describedObject)
    pub describedObject: ::protobuf::MessageField<CrossVersionObjectReference>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.ObjectMetricStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ObjectMetricStatus {
    fn default() -> &'a ObjectMetricStatus {
        <ObjectMetricStatus as ::protobuf::Message>::default_instance()
    }
}

impl ObjectMetricStatus {
    pub fn new() -> ObjectMetricStatus {
        ::std::default::Default::default()
    }

    // optional .api.autoscaling.v2.MetricIdentifier metric = 1;

    pub fn metric(&self) -> &MetricIdentifier {
        self.metric.as_ref().unwrap_or_else(|| <MetricIdentifier as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metric(&mut self) {
        self.metric.clear();
    }

    pub fn has_metric(&self) -> bool {
        self.metric.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metric(&mut self, v: MetricIdentifier) {
        self.metric = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric(&mut self) -> &mut MetricIdentifier {
        self.metric.mut_or_insert_default()
    }

    // Take field
    pub fn take_metric(&mut self) -> MetricIdentifier {
        self.metric.take().unwrap_or_else(|| MetricIdentifier::new())
    }

    // optional .api.autoscaling.v2.MetricValueStatus current = 2;

    pub fn current(&self) -> &MetricValueStatus {
        self.current.as_ref().unwrap_or_else(|| <MetricValueStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_current(&mut self) {
        self.current.clear();
    }

    pub fn has_current(&self) -> bool {
        self.current.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current(&mut self, v: MetricValueStatus) {
        self.current = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current(&mut self) -> &mut MetricValueStatus {
        self.current.mut_or_insert_default()
    }

    // Take field
    pub fn take_current(&mut self) -> MetricValueStatus {
        self.current.take().unwrap_or_else(|| MetricValueStatus::new())
    }

    // optional .api.autoscaling.v2.CrossVersionObjectReference describedObject = 3;

    pub fn describedObject(&self) -> &CrossVersionObjectReference {
        self.describedObject.as_ref().unwrap_or_else(|| <CrossVersionObjectReference as ::protobuf::Message>::default_instance())
    }

    pub fn clear_describedObject(&mut self) {
        self.describedObject.clear();
    }

    pub fn has_describedObject(&self) -> bool {
        self.describedObject.is_some()
    }

    // Param is passed by value, moved
    pub fn set_describedObject(&mut self, v: CrossVersionObjectReference) {
        self.describedObject = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_describedObject(&mut self) -> &mut CrossVersionObjectReference {
        self.describedObject.mut_or_insert_default()
    }

    // Take field
    pub fn take_describedObject(&mut self) -> CrossVersionObjectReference {
        self.describedObject.take().unwrap_or_else(|| CrossVersionObjectReference::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricIdentifier>(
            "metric",
            |m: &ObjectMetricStatus| { &m.metric },
            |m: &mut ObjectMetricStatus| { &mut m.metric },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricValueStatus>(
            "current",
            |m: &ObjectMetricStatus| { &m.current },
            |m: &mut ObjectMetricStatus| { &mut m.current },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CrossVersionObjectReference>(
            "describedObject",
            |m: &ObjectMetricStatus| { &m.describedObject },
            |m: &mut ObjectMetricStatus| { &mut m.describedObject },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ObjectMetricStatus>(
            "ObjectMetricStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ObjectMetricStatus {
    const NAME: &'static str = "ObjectMetricStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metric)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.current)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.describedObject)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metric.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.current.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.describedObject.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metric.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.current.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.describedObject.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ObjectMetricStatus {
        ObjectMetricStatus::new()
    }

    fn clear(&mut self) {
        self.metric.clear();
        self.current.clear();
        self.describedObject.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ObjectMetricStatus {
        static instance: ObjectMetricStatus = ObjectMetricStatus {
            metric: ::protobuf::MessageField::none(),
            current: ::protobuf::MessageField::none(),
            describedObject: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ObjectMetricStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ObjectMetricStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ObjectMetricStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ObjectMetricStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.PodsMetricSource)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodsMetricSource {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.PodsMetricSource.metric)
    pub metric: ::protobuf::MessageField<MetricIdentifier>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.PodsMetricSource.target)
    pub target: ::protobuf::MessageField<MetricTarget>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.PodsMetricSource.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodsMetricSource {
    fn default() -> &'a PodsMetricSource {
        <PodsMetricSource as ::protobuf::Message>::default_instance()
    }
}

impl PodsMetricSource {
    pub fn new() -> PodsMetricSource {
        ::std::default::Default::default()
    }

    // optional .api.autoscaling.v2.MetricIdentifier metric = 1;

    pub fn metric(&self) -> &MetricIdentifier {
        self.metric.as_ref().unwrap_or_else(|| <MetricIdentifier as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metric(&mut self) {
        self.metric.clear();
    }

    pub fn has_metric(&self) -> bool {
        self.metric.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metric(&mut self, v: MetricIdentifier) {
        self.metric = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric(&mut self) -> &mut MetricIdentifier {
        self.metric.mut_or_insert_default()
    }

    // Take field
    pub fn take_metric(&mut self) -> MetricIdentifier {
        self.metric.take().unwrap_or_else(|| MetricIdentifier::new())
    }

    // optional .api.autoscaling.v2.MetricTarget target = 2;

    pub fn target(&self) -> &MetricTarget {
        self.target.as_ref().unwrap_or_else(|| <MetricTarget as ::protobuf::Message>::default_instance())
    }

    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    pub fn has_target(&self) -> bool {
        self.target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: MetricTarget) {
        self.target = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target(&mut self) -> &mut MetricTarget {
        self.target.mut_or_insert_default()
    }

    // Take field
    pub fn take_target(&mut self) -> MetricTarget {
        self.target.take().unwrap_or_else(|| MetricTarget::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricIdentifier>(
            "metric",
            |m: &PodsMetricSource| { &m.metric },
            |m: &mut PodsMetricSource| { &mut m.metric },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricTarget>(
            "target",
            |m: &PodsMetricSource| { &m.target },
            |m: &mut PodsMetricSource| { &mut m.target },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodsMetricSource>(
            "PodsMetricSource",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodsMetricSource {
    const NAME: &'static str = "PodsMetricSource";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metric)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.target)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metric.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.target.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metric.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.target.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodsMetricSource {
        PodsMetricSource::new()
    }

    fn clear(&mut self) {
        self.metric.clear();
        self.target.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodsMetricSource {
        static instance: PodsMetricSource = PodsMetricSource {
            metric: ::protobuf::MessageField::none(),
            target: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PodsMetricSource {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodsMetricSource").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodsMetricSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodsMetricSource {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.PodsMetricStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodsMetricStatus {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.PodsMetricStatus.metric)
    pub metric: ::protobuf::MessageField<MetricIdentifier>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.PodsMetricStatus.current)
    pub current: ::protobuf::MessageField<MetricValueStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.PodsMetricStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodsMetricStatus {
    fn default() -> &'a PodsMetricStatus {
        <PodsMetricStatus as ::protobuf::Message>::default_instance()
    }
}

impl PodsMetricStatus {
    pub fn new() -> PodsMetricStatus {
        ::std::default::Default::default()
    }

    // optional .api.autoscaling.v2.MetricIdentifier metric = 1;

    pub fn metric(&self) -> &MetricIdentifier {
        self.metric.as_ref().unwrap_or_else(|| <MetricIdentifier as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metric(&mut self) {
        self.metric.clear();
    }

    pub fn has_metric(&self) -> bool {
        self.metric.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metric(&mut self, v: MetricIdentifier) {
        self.metric = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric(&mut self) -> &mut MetricIdentifier {
        self.metric.mut_or_insert_default()
    }

    // Take field
    pub fn take_metric(&mut self) -> MetricIdentifier {
        self.metric.take().unwrap_or_else(|| MetricIdentifier::new())
    }

    // optional .api.autoscaling.v2.MetricValueStatus current = 2;

    pub fn current(&self) -> &MetricValueStatus {
        self.current.as_ref().unwrap_or_else(|| <MetricValueStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_current(&mut self) {
        self.current.clear();
    }

    pub fn has_current(&self) -> bool {
        self.current.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current(&mut self, v: MetricValueStatus) {
        self.current = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current(&mut self) -> &mut MetricValueStatus {
        self.current.mut_or_insert_default()
    }

    // Take field
    pub fn take_current(&mut self) -> MetricValueStatus {
        self.current.take().unwrap_or_else(|| MetricValueStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricIdentifier>(
            "metric",
            |m: &PodsMetricStatus| { &m.metric },
            |m: &mut PodsMetricStatus| { &mut m.metric },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricValueStatus>(
            "current",
            |m: &PodsMetricStatus| { &m.current },
            |m: &mut PodsMetricStatus| { &mut m.current },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodsMetricStatus>(
            "PodsMetricStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodsMetricStatus {
    const NAME: &'static str = "PodsMetricStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metric)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.current)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metric.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.current.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metric.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.current.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodsMetricStatus {
        PodsMetricStatus::new()
    }

    fn clear(&mut self) {
        self.metric.clear();
        self.current.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodsMetricStatus {
        static instance: PodsMetricStatus = PodsMetricStatus {
            metric: ::protobuf::MessageField::none(),
            current: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PodsMetricStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodsMetricStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodsMetricStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodsMetricStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.ResourceMetricSource)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ResourceMetricSource {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.ResourceMetricSource.name)
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ResourceMetricSource.target)
    pub target: ::protobuf::MessageField<MetricTarget>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.ResourceMetricSource.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResourceMetricSource {
    fn default() -> &'a ResourceMetricSource {
        <ResourceMetricSource as ::protobuf::Message>::default_instance()
    }
}

impl ResourceMetricSource {
    pub fn new() -> ResourceMetricSource {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.autoscaling.v2.MetricTarget target = 2;

    pub fn target(&self) -> &MetricTarget {
        self.target.as_ref().unwrap_or_else(|| <MetricTarget as ::protobuf::Message>::default_instance())
    }

    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    pub fn has_target(&self) -> bool {
        self.target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: MetricTarget) {
        self.target = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target(&mut self) -> &mut MetricTarget {
        self.target.mut_or_insert_default()
    }

    // Take field
    pub fn take_target(&mut self) -> MetricTarget {
        self.target.take().unwrap_or_else(|| MetricTarget::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &ResourceMetricSource| { &m.name },
            |m: &mut ResourceMetricSource| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricTarget>(
            "target",
            |m: &ResourceMetricSource| { &m.target },
            |m: &mut ResourceMetricSource| { &mut m.target },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResourceMetricSource>(
            "ResourceMetricSource",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResourceMetricSource {
    const NAME: &'static str = "ResourceMetricSource";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.target)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.target.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.target.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResourceMetricSource {
        ResourceMetricSource::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.target.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResourceMetricSource {
        static instance: ResourceMetricSource = ResourceMetricSource {
            name: ::std::option::Option::None,
            target: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResourceMetricSource {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResourceMetricSource").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResourceMetricSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceMetricSource {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.autoscaling.v2.ResourceMetricStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ResourceMetricStatus {
    // message fields
    // @@protoc_insertion_point(field:api.autoscaling.v2.ResourceMetricStatus.name)
    pub name: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.autoscaling.v2.ResourceMetricStatus.current)
    pub current: ::protobuf::MessageField<MetricValueStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.autoscaling.v2.ResourceMetricStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResourceMetricStatus {
    fn default() -> &'a ResourceMetricStatus {
        <ResourceMetricStatus as ::protobuf::Message>::default_instance()
    }
}

impl ResourceMetricStatus {
    pub fn new() -> ResourceMetricStatus {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.autoscaling.v2.MetricValueStatus current = 2;

    pub fn current(&self) -> &MetricValueStatus {
        self.current.as_ref().unwrap_or_else(|| <MetricValueStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_current(&mut self) {
        self.current.clear();
    }

    pub fn has_current(&self) -> bool {
        self.current.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current(&mut self, v: MetricValueStatus) {
        self.current = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current(&mut self) -> &mut MetricValueStatus {
        self.current.mut_or_insert_default()
    }

    // Take field
    pub fn take_current(&mut self) -> MetricValueStatus {
        self.current.take().unwrap_or_else(|| MetricValueStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &ResourceMetricStatus| { &m.name },
            |m: &mut ResourceMetricStatus| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricValueStatus>(
            "current",
            |m: &ResourceMetricStatus| { &m.current },
            |m: &mut ResourceMetricStatus| { &mut m.current },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResourceMetricStatus>(
            "ResourceMetricStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResourceMetricStatus {
    const NAME: &'static str = "ResourceMetricStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.current)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.current.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.current.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResourceMetricStatus {
        ResourceMetricStatus::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.current.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResourceMetricStatus {
        static instance: ResourceMetricStatus = ResourceMetricStatus {
            name: ::std::option::Option::None,
            current: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResourceMetricStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResourceMetricStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResourceMetricStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceMetricStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"api/autoscaling/v2/generated.proto\x12\x12api.autoscaling.v2\x1a\x1b\
    api/core/v1/generated.proto\x1a-apimachinery/pkg/api/resource/generated.\
    proto\x1a-apimachinery/pkg/apis/meta/v1/generated.proto\x1a(apimachinery\
    /pkg/runtime/generated.proto\x1a/apimachinery/pkg/runtime/schema/generat\
    ed.proto\"\x8b\x01\n\x1dContainerResourceMetricSource\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x128\n\x06target\x18\x02\x20\x01(\x0b2\x20.\
    api.autoscaling.v2.MetricTargetR\x06target\x12\x1c\n\tcontainer\x18\x03\
    \x20\x01(\tR\tcontainer\"\x92\x01\n\x1dContainerResourceMetricStatus\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12?\n\x07current\x18\x02\x20\
    \x01(\x0b2%.api.autoscaling.v2.MetricValueStatusR\x07current\x12\x1c\n\t\
    container\x18\x03\x20\x01(\tR\tcontainer\"e\n\x1bCrossVersionObjectRefer\
    ence\x12\x12\n\x04kind\x18\x01\x20\x01(\tR\x04kind\x12\x12\n\x04name\x18\
    \x02\x20\x01(\tR\x04name\x12\x1e\n\napiVersion\x18\x03\x20\x01(\tR\napiV\
    ersion\"\x8e\x01\n\x14ExternalMetricSource\x12<\n\x06metric\x18\x01\x20\
    \x01(\x0b2$.api.autoscaling.v2.MetricIdentifierR\x06metric\x128\n\x06tar\
    get\x18\x02\x20\x01(\x0b2\x20.api.autoscaling.v2.MetricTargetR\x06target\
    \"\x95\x01\n\x14ExternalMetricStatus\x12<\n\x06metric\x18\x01\x20\x01(\
    \x0b2$.api.autoscaling.v2.MetricIdentifierR\x06metric\x12?\n\x07current\
    \x18\x02\x20\x01(\x0b2%.api.autoscaling.v2.MetricValueStatusR\x07current\
    \"b\n\x10HPAScalingPolicy\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\
    \x12\x14\n\x05value\x18\x02\x20\x01(\x05R\x05value\x12$\n\rperiodSeconds\
    \x18\x03\x20\x01(\x05R\rperiodSeconds\"\xb7\x01\n\x0fHPAScalingRules\x12\
    >\n\x1astabilizationWindowSeconds\x18\x03\x20\x01(\x05R\x1astabilization\
    WindowSeconds\x12\"\n\x0cselectPolicy\x18\x01\x20\x01(\tR\x0cselectPolic\
    y\x12@\n\x08policies\x18\x02\x20\x03(\x0b2$.api.autoscaling.v2.HPAScalin\
    gPolicyR\x08policies\"\xf0\x01\n\x17HorizontalPodAutoscaler\x12E\n\x08me\
    tadata\x18\x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\
    \x08metadata\x12C\n\x04spec\x18\x02\x20\x01(\x0b2/.api.autoscaling.v2.Ho\
    rizontalPodAutoscalerSpecR\x04spec\x12I\n\x06status\x18\x03\x20\x01(\x0b\
    21.api.autoscaling.v2.HorizontalPodAutoscalerStatusR\x06status\"\xa3\x01\
    \n\x1fHorizontalPodAutoscalerBehavior\x12=\n\x07scaleUp\x18\x01\x20\x01(\
    \x0b2#.api.autoscaling.v2.HPAScalingRulesR\x07scaleUp\x12A\n\tscaleDown\
    \x18\x02\x20\x01(\x0b2#.api.autoscaling.v2.HPAScalingRulesR\tscaleDown\"\
    \xd5\x01\n\x20HorizontalPodAutoscalerCondition\x12\x12\n\x04type\x18\x01\
    \x20\x01(\tR\x04type\x12\x16\n\x06status\x18\x02\x20\x01(\tR\x06status\
    \x12S\n\x12lastTransitionTime\x18\x03\x20\x01(\x0b2#.apimachinery.pkg.ap\
    is.meta.v1.TimeR\x12lastTransitionTime\x12\x16\n\x06reason\x18\x04\x20\
    \x01(\tR\x06reason\x12\x18\n\x07message\x18\x05\x20\x01(\tR\x07message\"\
    \xa5\x01\n\x1bHorizontalPodAutoscalerList\x12C\n\x08metadata\x18\x01\x20\
    \x01(\x0b2'.apimachinery.pkg.apis.meta.v1.ListMetaR\x08metadata\x12A\n\
    \x05items\x18\x02\x20\x03(\x0b2+.api.autoscaling.v2.HorizontalPodAutosca\
    lerR\x05items\"\xc5\x02\n\x1bHorizontalPodAutoscalerSpec\x12W\n\x0escale\
    TargetRef\x18\x01\x20\x01(\x0b2/.api.autoscaling.v2.CrossVersionObjectRe\
    ferenceR\x0escaleTargetRef\x12\x20\n\x0bminReplicas\x18\x02\x20\x01(\x05\
    R\x0bminReplicas\x12\x20\n\x0bmaxReplicas\x18\x03\x20\x01(\x05R\x0bmaxRe\
    plicas\x128\n\x07metrics\x18\x04\x20\x03(\x0b2\x1e.api.autoscaling.v2.Me\
    tricSpecR\x07metrics\x12O\n\x08behavior\x18\x05\x20\x01(\x0b23.api.autos\
    caling.v2.HorizontalPodAutoscalerBehaviorR\x08behavior\"\x8e\x03\n\x1dHo\
    rizontalPodAutoscalerStatus\x12.\n\x12observedGeneration\x18\x01\x20\x01\
    (\x03R\x12observedGeneration\x12I\n\rlastScaleTime\x18\x02\x20\x01(\x0b2\
    #.apimachinery.pkg.apis.meta.v1.TimeR\rlastScaleTime\x12(\n\x0fcurrentRe\
    plicas\x18\x03\x20\x01(\x05R\x0fcurrentReplicas\x12(\n\x0fdesiredReplica\
    s\x18\x04\x20\x01(\x05R\x0fdesiredReplicas\x12H\n\x0ecurrentMetrics\x18\
    \x05\x20\x03(\x0b2\x20.api.autoscaling.v2.MetricStatusR\x0ecurrentMetric\
    s\x12T\n\nconditions\x18\x06\x20\x03(\x0b24.api.autoscaling.v2.Horizonta\
    lPodAutoscalerConditionR\nconditions\"p\n\x10MetricIdentifier\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12H\n\x08selector\x18\x02\x20\x01(\
    \x0b2,.apimachinery.pkg.apis.meta.v1.LabelSelectorR\x08selector\"\x87\
    \x03\n\nMetricSpec\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12>\n\
    \x06object\x18\x02\x20\x01(\x0b2&.api.autoscaling.v2.ObjectMetricSourceR\
    \x06object\x128\n\x04pods\x18\x03\x20\x01(\x0b2$.api.autoscaling.v2.Pods\
    MetricSourceR\x04pods\x12D\n\x08resource\x18\x04\x20\x01(\x0b2(.api.auto\
    scaling.v2.ResourceMetricSourceR\x08resource\x12_\n\x11containerResource\
    \x18\x07\x20\x01(\x0b21.api.autoscaling.v2.ContainerResourceMetricSource\
    R\x11containerResource\x12D\n\x08external\x18\x05\x20\x01(\x0b2(.api.aut\
    oscaling.v2.ExternalMetricSourceR\x08external\"\x89\x03\n\x0cMetricStatu\
    s\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12>\n\x06object\x18\x02\
    \x20\x01(\x0b2&.api.autoscaling.v2.ObjectMetricStatusR\x06object\x128\n\
    \x04pods\x18\x03\x20\x01(\x0b2$.api.autoscaling.v2.PodsMetricStatusR\x04\
    pods\x12D\n\x08resource\x18\x04\x20\x01(\x0b2(.api.autoscaling.v2.Resour\
    ceMetricStatusR\x08resource\x12_\n\x11containerResource\x18\x07\x20\x01(\
    \x0b21.api.autoscaling.v2.ContainerResourceMetricStatusR\x11containerRes\
    ource\x12D\n\x08external\x18\x05\x20\x01(\x0b2(.api.autoscaling.v2.Exter\
    nalMetricStatusR\x08external\"\xde\x01\n\x0cMetricTarget\x12\x12\n\x04ty\
    pe\x18\x01\x20\x01(\tR\x04type\x12=\n\x05value\x18\x02\x20\x01(\x0b2'.ap\
    imachinery.pkg.api.resource.QuantityR\x05value\x12K\n\x0caverageValue\
    \x18\x03\x20\x01(\x0b2'.apimachinery.pkg.api.resource.QuantityR\x0cavera\
    geValue\x12.\n\x12averageUtilization\x18\x04\x20\x01(\x05R\x12averageUti\
    lization\"\xcf\x01\n\x11MetricValueStatus\x12=\n\x05value\x18\x01\x20\
    \x01(\x0b2'.apimachinery.pkg.api.resource.QuantityR\x05value\x12K\n\x0ca\
    verageValue\x18\x02\x20\x01(\x0b2'.apimachinery.pkg.api.resource.Quantit\
    yR\x0caverageValue\x12.\n\x12averageUtilization\x18\x03\x20\x01(\x05R\
    \x12averageUtilization\"\xe7\x01\n\x12ObjectMetricSource\x12Y\n\x0fdescr\
    ibedObject\x18\x01\x20\x01(\x0b2/.api.autoscaling.v2.CrossVersionObjectR\
    eferenceR\x0fdescribedObject\x128\n\x06target\x18\x02\x20\x01(\x0b2\x20.\
    api.autoscaling.v2.MetricTargetR\x06target\x12<\n\x06metric\x18\x03\x20\
    \x01(\x0b2$.api.autoscaling.v2.MetricIdentifierR\x06metric\"\xee\x01\n\
    \x12ObjectMetricStatus\x12<\n\x06metric\x18\x01\x20\x01(\x0b2$.api.autos\
    caling.v2.MetricIdentifierR\x06metric\x12?\n\x07current\x18\x02\x20\x01(\
    \x0b2%.api.autoscaling.v2.MetricValueStatusR\x07current\x12Y\n\x0fdescri\
    bedObject\x18\x03\x20\x01(\x0b2/.api.autoscaling.v2.CrossVersionObjectRe\
    ferenceR\x0fdescribedObject\"\x8a\x01\n\x10PodsMetricSource\x12<\n\x06me\
    tric\x18\x01\x20\x01(\x0b2$.api.autoscaling.v2.MetricIdentifierR\x06metr\
    ic\x128\n\x06target\x18\x02\x20\x01(\x0b2\x20.api.autoscaling.v2.MetricT\
    argetR\x06target\"\x91\x01\n\x10PodsMetricStatus\x12<\n\x06metric\x18\
    \x01\x20\x01(\x0b2$.api.autoscaling.v2.MetricIdentifierR\x06metric\x12?\
    \n\x07current\x18\x02\x20\x01(\x0b2%.api.autoscaling.v2.MetricValueStatu\
    sR\x07current\"d\n\x14ResourceMetricSource\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x128\n\x06target\x18\x02\x20\x01(\x0b2\x20.api.autoscal\
    ing.v2.MetricTargetR\x06target\"k\n\x14ResourceMetricStatus\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12?\n\x07current\x18\x02\x20\x01(\
    \x0b2%.api.autoscaling.v2.MetricValueStatusR\x07currentB\x1bZ\x19k8s.io/\
    api/autoscaling/v2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::v2::file_descriptor().clone());
            deps.push(super::v2::file_descriptor().clone());
            deps.push(super::v2::file_descriptor().clone());
            deps.push(super::v2::file_descriptor().clone());
            deps.push(super::v2::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(24);
            messages.push(ContainerResourceMetricSource::generated_message_descriptor_data());
            messages.push(ContainerResourceMetricStatus::generated_message_descriptor_data());
            messages.push(CrossVersionObjectReference::generated_message_descriptor_data());
            messages.push(ExternalMetricSource::generated_message_descriptor_data());
            messages.push(ExternalMetricStatus::generated_message_descriptor_data());
            messages.push(HPAScalingPolicy::generated_message_descriptor_data());
            messages.push(HPAScalingRules::generated_message_descriptor_data());
            messages.push(HorizontalPodAutoscaler::generated_message_descriptor_data());
            messages.push(HorizontalPodAutoscalerBehavior::generated_message_descriptor_data());
            messages.push(HorizontalPodAutoscalerCondition::generated_message_descriptor_data());
            messages.push(HorizontalPodAutoscalerList::generated_message_descriptor_data());
            messages.push(HorizontalPodAutoscalerSpec::generated_message_descriptor_data());
            messages.push(HorizontalPodAutoscalerStatus::generated_message_descriptor_data());
            messages.push(MetricIdentifier::generated_message_descriptor_data());
            messages.push(MetricSpec::generated_message_descriptor_data());
            messages.push(MetricStatus::generated_message_descriptor_data());
            messages.push(MetricTarget::generated_message_descriptor_data());
            messages.push(MetricValueStatus::generated_message_descriptor_data());
            messages.push(ObjectMetricSource::generated_message_descriptor_data());
            messages.push(ObjectMetricStatus::generated_message_descriptor_data());
            messages.push(PodsMetricSource::generated_message_descriptor_data());
            messages.push(PodsMetricStatus::generated_message_descriptor_data());
            messages.push(ResourceMetricSource::generated_message_descriptor_data());
            messages.push(ResourceMetricStatus::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
