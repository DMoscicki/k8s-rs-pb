// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/authentication/v1alpha1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1alpha1.SelfSubjectReview)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SelfSubjectReview {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1alpha1.SelfSubjectReview.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1alpha1.SelfSubjectReview.status)
    pub status: ::protobuf::MessageField<SelfSubjectReviewStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1alpha1.SelfSubjectReview.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SelfSubjectReview {
    fn default() -> &'a SelfSubjectReview {
        <SelfSubjectReview as ::protobuf::Message>::default_instance()
    }
}

impl SelfSubjectReview {
    pub fn new() -> SelfSubjectReview {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.authentication.v1alpha1.SelfSubjectReviewStatus status = 2;

    pub fn status(&self) -> &SelfSubjectReviewStatus {
        self.status.as_ref().unwrap_or_else(|| <SelfSubjectReviewStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: SelfSubjectReviewStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut SelfSubjectReviewStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> SelfSubjectReviewStatus {
        self.status.take().unwrap_or_else(|| SelfSubjectReviewStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &SelfSubjectReview| { &m.metadata },
            |m: &mut SelfSubjectReview| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SelfSubjectReviewStatus>(
            "status",
            |m: &SelfSubjectReview| { &m.status },
            |m: &mut SelfSubjectReview| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SelfSubjectReview>(
            "SelfSubjectReview",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SelfSubjectReview {
    const NAME: &'static str = "SelfSubjectReview";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SelfSubjectReview {
        SelfSubjectReview::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SelfSubjectReview {
        static instance: SelfSubjectReview = SelfSubjectReview {
            metadata: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SelfSubjectReview {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SelfSubjectReview").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SelfSubjectReview {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelfSubjectReview {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1alpha1.SelfSubjectReviewStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SelfSubjectReviewStatus {
    // message fields
    #[serde(with = "crate::v1_31::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1alpha1.SelfSubjectReviewStatus.userInfo)
    pub userInfo: ::protobuf::MessageField<crate::v1_31::api::authentication::v1::UserInfo>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1alpha1.SelfSubjectReviewStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SelfSubjectReviewStatus {
    fn default() -> &'a SelfSubjectReviewStatus {
        <SelfSubjectReviewStatus as ::protobuf::Message>::default_instance()
    }
}

impl SelfSubjectReviewStatus {
    pub fn new() -> SelfSubjectReviewStatus {
        ::std::default::Default::default()
    }

    // optional .api.authentication.v1.UserInfo userInfo = 1;

    pub fn userInfo(&self) -> &crate::v1_31::api::authentication::v1::UserInfo {
        self.userInfo.as_ref().unwrap_or_else(|| <crate::v1_31::api::authentication::v1::UserInfo as ::protobuf::Message>::default_instance())
    }

    pub fn clear_userInfo(&mut self) {
        self.userInfo.clear();
    }

    pub fn has_userInfo(&self) -> bool {
        self.userInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_userInfo(&mut self, v: crate::v1_31::api::authentication::v1::UserInfo) {
        self.userInfo = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_userInfo(&mut self) -> &mut crate::v1_31::api::authentication::v1::UserInfo {
        self.userInfo.mut_or_insert_default()
    }

    // Take field
    pub fn take_userInfo(&mut self) -> crate::v1_31::api::authentication::v1::UserInfo {
        self.userInfo.take().unwrap_or_else(|| crate::v1_31::api::authentication::v1::UserInfo::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_31::api::authentication::v1::UserInfo>(
            "userInfo",
            |m: &SelfSubjectReviewStatus| { &m.userInfo },
            |m: &mut SelfSubjectReviewStatus| { &mut m.userInfo },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SelfSubjectReviewStatus>(
            "SelfSubjectReviewStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SelfSubjectReviewStatus {
    const NAME: &'static str = "SelfSubjectReviewStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.userInfo)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.userInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.userInfo.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SelfSubjectReviewStatus {
        SelfSubjectReviewStatus::new()
    }

    fn clear(&mut self) {
        self.userInfo.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SelfSubjectReviewStatus {
        static instance: SelfSubjectReviewStatus = SelfSubjectReviewStatus {
            userInfo: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SelfSubjectReviewStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SelfSubjectReviewStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SelfSubjectReviewStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelfSubjectReviewStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+api/authentication/v1alpha1/generated.proto\x12\x1bapi.authentication\
    .v1alpha1\x1a%api/authentication/v1/generated.proto\x1a-apimachinery/pkg\
    /apis/meta/v1/generated.proto\x1a(apimachinery/pkg/runtime/generated.pro\
    to\x1a/apimachinery/pkg/runtime/schema/generated.proto\"\xa8\x01\n\x11Se\
    lfSubjectReview\x12E\n\x08metadata\x18\x01\x20\x01(\x0b2).apimachinery.p\
    kg.apis.meta.v1.ObjectMetaR\x08metadata\x12L\n\x06status\x18\x02\x20\x01\
    (\x0b24.api.authentication.v1alpha1.SelfSubjectReviewStatusR\x06status\"\
    V\n\x17SelfSubjectReviewStatus\x12;\n\x08userInfo\x18\x01\x20\x01(\x0b2\
    \x1f.api.authentication.v1.UserInfoR\x08userInfoB$Z\"k8s.io/api/authenti\
    cation/v1alpha1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::v1alpha1::file_descriptor().clone());
            deps.push(super::v1alpha1::file_descriptor().clone());
            deps.push(super::v1alpha1::file_descriptor().clone());
            deps.push(super::v1alpha1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(SelfSubjectReview::generated_message_descriptor_data());
            messages.push(SelfSubjectReviewStatus::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
