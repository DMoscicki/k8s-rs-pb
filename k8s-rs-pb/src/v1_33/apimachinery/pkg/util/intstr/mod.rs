// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `apimachinery/pkg/util/intstr/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:apimachinery.pkg.util.intstr.IntOrString)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IntOrString {
    // message fields
    // @@protoc_insertion_point(field:apimachinery.pkg.util.intstr.IntOrString.type)
    pub type_: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:apimachinery.pkg.util.intstr.IntOrString.intVal)
    pub intVal: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:apimachinery.pkg.util.intstr.IntOrString.strVal)
    pub strVal: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:apimachinery.pkg.util.intstr.IntOrString.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IntOrString {
    fn default() -> &'a IntOrString {
        <IntOrString as ::protobuf::Message>::default_instance()
    }
}

impl IntOrString {
    pub fn new() -> IntOrString {
        ::std::default::Default::default()
    }

    // optional int64 type = 1;

    pub fn type_(&self) -> i64 {
        self.type_.unwrap_or(0)
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: i64) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // optional int32 intVal = 2;

    pub fn intVal(&self) -> i32 {
        self.intVal.unwrap_or(0)
    }

    pub fn clear_intVal(&mut self) {
        self.intVal = ::std::option::Option::None;
    }

    pub fn has_intVal(&self) -> bool {
        self.intVal.is_some()
    }

    // Param is passed by value, moved
    pub fn set_intVal(&mut self, v: i32) {
        self.intVal = ::std::option::Option::Some(v);
    }

    // optional string strVal = 3;

    pub fn strVal(&self) -> &str {
        match self.strVal.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_strVal(&mut self) {
        self.strVal = ::std::option::Option::None;
    }

    pub fn has_strVal(&self) -> bool {
        self.strVal.is_some()
    }

    // Param is passed by value, moved
    pub fn set_strVal(&mut self, v: ::std::string::String) {
        self.strVal = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_strVal(&mut self) -> &mut ::std::string::String {
        if self.strVal.is_none() {
            self.strVal = ::std::option::Option::Some(::std::string::String::new());
        }
        self.strVal.as_mut().unwrap()
    }

    // Take field
    pub fn take_strVal(&mut self) -> ::std::string::String {
        self.strVal.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &IntOrString| { &m.type_ },
            |m: &mut IntOrString| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "intVal",
            |m: &IntOrString| { &m.intVal },
            |m: &mut IntOrString| { &mut m.intVal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "strVal",
            |m: &IntOrString| { &m.strVal },
            |m: &mut IntOrString| { &mut m.strVal },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IntOrString>(
            "IntOrString",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IntOrString {
    const NAME: &'static str = "IntOrString";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_int64()?);
                },
                16 => {
                    self.intVal = ::std::option::Option::Some(is.read_int32()?);
                },
                26 => {
                    self.strVal = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int64_size(1, v);
        }
        if let Some(v) = self.intVal {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.strVal.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_int64(1, v)?;
        }
        if let Some(v) = self.intVal {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.strVal.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IntOrString {
        IntOrString::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.intVal = ::std::option::Option::None;
        self.strVal = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IntOrString {
        static instance: IntOrString = IntOrString {
            type_: ::std::option::Option::None,
            intVal: ::std::option::Option::None,
            strVal: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IntOrString {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IntOrString").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IntOrString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IntOrString {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,apimachinery/pkg/util/intstr/generated.proto\x12\x1capimachinery.pkg.\
    util.intstr\"Q\n\x0bIntOrString\x12\x12\n\x04type\x18\x01\x20\x01(\x03R\
    \x04type\x12\x16\n\x06intVal\x18\x02\x20\x01(\x05R\x06intVal\x12\x16\n\
    \x06strVal\x18\x03\x20\x01(\tR\x06strValB%Z#k8s.io/apimachinery/pkg/util\
    /intstr\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(IntOrString::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
