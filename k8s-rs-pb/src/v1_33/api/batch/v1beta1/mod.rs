// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/batch/v1beta1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1beta1.CronJob)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CronJob {
    // message fields
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJob.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJob.spec)
    pub spec: ::protobuf::MessageField<CronJobSpec>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJob.status)
    pub status: ::protobuf::MessageField<CronJobStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1beta1.CronJob.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CronJob {
    fn default() -> &'a CronJob {
        <CronJob as ::protobuf::Message>::default_instance()
    }
}

impl CronJob {
    pub fn new() -> CronJob {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.batch.v1beta1.CronJobSpec spec = 2;

    pub fn spec(&self) -> &CronJobSpec {
        self.spec.as_ref().unwrap_or_else(|| <CronJobSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: CronJobSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut CronJobSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> CronJobSpec {
        self.spec.take().unwrap_or_else(|| CronJobSpec::new())
    }

    // optional .api.batch.v1beta1.CronJobStatus status = 3;

    pub fn status(&self) -> &CronJobStatus {
        self.status.as_ref().unwrap_or_else(|| <CronJobStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: CronJobStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut CronJobStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> CronJobStatus {
        self.status.take().unwrap_or_else(|| CronJobStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &CronJob| { &m.metadata },
            |m: &mut CronJob| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CronJobSpec>(
            "spec",
            |m: &CronJob| { &m.spec },
            |m: &mut CronJob| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CronJobStatus>(
            "status",
            |m: &CronJob| { &m.status },
            |m: &mut CronJob| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CronJob>(
            "CronJob",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CronJob {
    const NAME: &'static str = "CronJob";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CronJob {
        CronJob::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CronJob {
        static instance: CronJob = CronJob {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CronJob {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CronJob").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CronJob {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CronJob {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1beta1.CronJobList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CronJobList {
    // message fields
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobList.items)
    pub items: ::std::vec::Vec<CronJob>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1beta1.CronJobList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CronJobList {
    fn default() -> &'a CronJobList {
        <CronJobList as ::protobuf::Message>::default_instance()
    }
}

impl CronJobList {
    pub fn new() -> CronJobList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.batch.v1beta1.CronJob items = 2;

    pub fn items(&self) -> &[CronJob] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<CronJob>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<CronJob> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<CronJob> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &CronJobList| { &m.metadata },
            |m: &mut CronJobList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &CronJobList| { &m.items },
            |m: &mut CronJobList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CronJobList>(
            "CronJobList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CronJobList {
    const NAME: &'static str = "CronJobList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CronJobList {
        CronJobList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CronJobList {
        static instance: CronJobList = CronJobList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CronJobList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CronJobList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CronJobList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CronJobList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1beta1.CronJobSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CronJobSpec {
    // message fields
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobSpec.schedule)
    pub schedule: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobSpec.timeZone)
    pub timeZone: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobSpec.startingDeadlineSeconds)
    pub startingDeadlineSeconds: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobSpec.concurrencyPolicy)
    pub concurrencyPolicy: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobSpec.suspend)
    pub suspend: ::std::option::Option<bool>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobSpec.jobTemplate)
    pub jobTemplate: ::protobuf::MessageField<JobTemplateSpec>,
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobSpec.successfulJobsHistoryLimit)
    pub successfulJobsHistoryLimit: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobSpec.failedJobsHistoryLimit)
    pub failedJobsHistoryLimit: ::std::option::Option<i32>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1beta1.CronJobSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CronJobSpec {
    fn default() -> &'a CronJobSpec {
        <CronJobSpec as ::protobuf::Message>::default_instance()
    }
}

impl CronJobSpec {
    pub fn new() -> CronJobSpec {
        ::std::default::Default::default()
    }

    // optional string schedule = 1;

    pub fn schedule(&self) -> &str {
        match self.schedule.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_schedule(&mut self) {
        self.schedule = ::std::option::Option::None;
    }

    pub fn has_schedule(&self) -> bool {
        self.schedule.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedule(&mut self, v: ::std::string::String) {
        self.schedule = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schedule(&mut self) -> &mut ::std::string::String {
        if self.schedule.is_none() {
            self.schedule = ::std::option::Option::Some(::std::string::String::new());
        }
        self.schedule.as_mut().unwrap()
    }

    // Take field
    pub fn take_schedule(&mut self) -> ::std::string::String {
        self.schedule.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string timeZone = 8;

    pub fn timeZone(&self) -> &str {
        match self.timeZone.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_timeZone(&mut self) {
        self.timeZone = ::std::option::Option::None;
    }

    pub fn has_timeZone(&self) -> bool {
        self.timeZone.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeZone(&mut self, v: ::std::string::String) {
        self.timeZone = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timeZone(&mut self) -> &mut ::std::string::String {
        if self.timeZone.is_none() {
            self.timeZone = ::std::option::Option::Some(::std::string::String::new());
        }
        self.timeZone.as_mut().unwrap()
    }

    // Take field
    pub fn take_timeZone(&mut self) -> ::std::string::String {
        self.timeZone.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int64 startingDeadlineSeconds = 2;

    pub fn startingDeadlineSeconds(&self) -> i64 {
        self.startingDeadlineSeconds.unwrap_or(0)
    }

    pub fn clear_startingDeadlineSeconds(&mut self) {
        self.startingDeadlineSeconds = ::std::option::Option::None;
    }

    pub fn has_startingDeadlineSeconds(&self) -> bool {
        self.startingDeadlineSeconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_startingDeadlineSeconds(&mut self, v: i64) {
        self.startingDeadlineSeconds = ::std::option::Option::Some(v);
    }

    // optional string concurrencyPolicy = 3;

    pub fn concurrencyPolicy(&self) -> &str {
        match self.concurrencyPolicy.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_concurrencyPolicy(&mut self) {
        self.concurrencyPolicy = ::std::option::Option::None;
    }

    pub fn has_concurrencyPolicy(&self) -> bool {
        self.concurrencyPolicy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_concurrencyPolicy(&mut self, v: ::std::string::String) {
        self.concurrencyPolicy = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_concurrencyPolicy(&mut self) -> &mut ::std::string::String {
        if self.concurrencyPolicy.is_none() {
            self.concurrencyPolicy = ::std::option::Option::Some(::std::string::String::new());
        }
        self.concurrencyPolicy.as_mut().unwrap()
    }

    // Take field
    pub fn take_concurrencyPolicy(&mut self) -> ::std::string::String {
        self.concurrencyPolicy.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool suspend = 4;

    pub fn suspend(&self) -> bool {
        self.suspend.unwrap_or(false)
    }

    pub fn clear_suspend(&mut self) {
        self.suspend = ::std::option::Option::None;
    }

    pub fn has_suspend(&self) -> bool {
        self.suspend.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suspend(&mut self, v: bool) {
        self.suspend = ::std::option::Option::Some(v);
    }

    // optional .api.batch.v1beta1.JobTemplateSpec jobTemplate = 5;

    pub fn jobTemplate(&self) -> &JobTemplateSpec {
        self.jobTemplate.as_ref().unwrap_or_else(|| <JobTemplateSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_jobTemplate(&mut self) {
        self.jobTemplate.clear();
    }

    pub fn has_jobTemplate(&self) -> bool {
        self.jobTemplate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_jobTemplate(&mut self, v: JobTemplateSpec) {
        self.jobTemplate = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_jobTemplate(&mut self) -> &mut JobTemplateSpec {
        self.jobTemplate.mut_or_insert_default()
    }

    // Take field
    pub fn take_jobTemplate(&mut self) -> JobTemplateSpec {
        self.jobTemplate.take().unwrap_or_else(|| JobTemplateSpec::new())
    }

    // optional int32 successfulJobsHistoryLimit = 6;

    pub fn successfulJobsHistoryLimit(&self) -> i32 {
        self.successfulJobsHistoryLimit.unwrap_or(0)
    }

    pub fn clear_successfulJobsHistoryLimit(&mut self) {
        self.successfulJobsHistoryLimit = ::std::option::Option::None;
    }

    pub fn has_successfulJobsHistoryLimit(&self) -> bool {
        self.successfulJobsHistoryLimit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_successfulJobsHistoryLimit(&mut self, v: i32) {
        self.successfulJobsHistoryLimit = ::std::option::Option::Some(v);
    }

    // optional int32 failedJobsHistoryLimit = 7;

    pub fn failedJobsHistoryLimit(&self) -> i32 {
        self.failedJobsHistoryLimit.unwrap_or(0)
    }

    pub fn clear_failedJobsHistoryLimit(&mut self) {
        self.failedJobsHistoryLimit = ::std::option::Option::None;
    }

    pub fn has_failedJobsHistoryLimit(&self) -> bool {
        self.failedJobsHistoryLimit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_failedJobsHistoryLimit(&mut self, v: i32) {
        self.failedJobsHistoryLimit = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "schedule",
            |m: &CronJobSpec| { &m.schedule },
            |m: &mut CronJobSpec| { &mut m.schedule },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timeZone",
            |m: &CronJobSpec| { &m.timeZone },
            |m: &mut CronJobSpec| { &mut m.timeZone },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "startingDeadlineSeconds",
            |m: &CronJobSpec| { &m.startingDeadlineSeconds },
            |m: &mut CronJobSpec| { &mut m.startingDeadlineSeconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "concurrencyPolicy",
            |m: &CronJobSpec| { &m.concurrencyPolicy },
            |m: &mut CronJobSpec| { &mut m.concurrencyPolicy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suspend",
            |m: &CronJobSpec| { &m.suspend },
            |m: &mut CronJobSpec| { &mut m.suspend },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, JobTemplateSpec>(
            "jobTemplate",
            |m: &CronJobSpec| { &m.jobTemplate },
            |m: &mut CronJobSpec| { &mut m.jobTemplate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "successfulJobsHistoryLimit",
            |m: &CronJobSpec| { &m.successfulJobsHistoryLimit },
            |m: &mut CronJobSpec| { &mut m.successfulJobsHistoryLimit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "failedJobsHistoryLimit",
            |m: &CronJobSpec| { &m.failedJobsHistoryLimit },
            |m: &mut CronJobSpec| { &mut m.failedJobsHistoryLimit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CronJobSpec>(
            "CronJobSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CronJobSpec {
    const NAME: &'static str = "CronJobSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.schedule = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.timeZone = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.startingDeadlineSeconds = ::std::option::Option::Some(is.read_int64()?);
                },
                26 => {
                    self.concurrencyPolicy = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.suspend = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.jobTemplate)?;
                },
                48 => {
                    self.successfulJobsHistoryLimit = ::std::option::Option::Some(is.read_int32()?);
                },
                56 => {
                    self.failedJobsHistoryLimit = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schedule.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.timeZone.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.startingDeadlineSeconds {
            my_size += ::protobuf::rt::int64_size(2, v);
        }
        if let Some(v) = self.concurrencyPolicy.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.suspend {
            my_size += 1 + 1;
        }
        if let Some(v) = self.jobTemplate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.successfulJobsHistoryLimit {
            my_size += ::protobuf::rt::int32_size(6, v);
        }
        if let Some(v) = self.failedJobsHistoryLimit {
            my_size += ::protobuf::rt::int32_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.schedule.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.timeZone.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.startingDeadlineSeconds {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.concurrencyPolicy.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.suspend {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.jobTemplate.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.successfulJobsHistoryLimit {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.failedJobsHistoryLimit {
            os.write_int32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CronJobSpec {
        CronJobSpec::new()
    }

    fn clear(&mut self) {
        self.schedule = ::std::option::Option::None;
        self.timeZone = ::std::option::Option::None;
        self.startingDeadlineSeconds = ::std::option::Option::None;
        self.concurrencyPolicy = ::std::option::Option::None;
        self.suspend = ::std::option::Option::None;
        self.jobTemplate.clear();
        self.successfulJobsHistoryLimit = ::std::option::Option::None;
        self.failedJobsHistoryLimit = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CronJobSpec {
        static instance: CronJobSpec = CronJobSpec {
            schedule: ::std::option::Option::None,
            timeZone: ::std::option::Option::None,
            startingDeadlineSeconds: ::std::option::Option::None,
            concurrencyPolicy: ::std::option::Option::None,
            suspend: ::std::option::Option::None,
            jobTemplate: ::protobuf::MessageField::none(),
            successfulJobsHistoryLimit: ::std::option::Option::None,
            failedJobsHistoryLimit: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CronJobSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CronJobSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CronJobSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CronJobSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1beta1.CronJobStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CronJobStatus {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobStatus.active)
    pub active: ::std::vec::Vec<crate::v1_33::api::core::v1::ObjectReference>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobStatus.lastScheduleTime)
    pub lastScheduleTime: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1beta1.CronJobStatus.lastSuccessfulTime)
    pub lastSuccessfulTime: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1beta1.CronJobStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CronJobStatus {
    fn default() -> &'a CronJobStatus {
        <CronJobStatus as ::protobuf::Message>::default_instance()
    }
}

impl CronJobStatus {
    pub fn new() -> CronJobStatus {
        ::std::default::Default::default()
    }

    // repeated .api.core.v1.ObjectReference active = 1;

    pub fn active(&self) -> &[crate::v1_33::api::core::v1::ObjectReference] {
        &self.active
    }

    pub fn clear_active(&mut self) {
        self.active.clear();
    }

    // Param is passed by value, moved
    pub fn set_active(&mut self, v: ::std::vec::Vec<crate::v1_33::api::core::v1::ObjectReference>) {
        self.active = v;
    }

    // Mutable pointer to the field.
    pub fn mut_active(&mut self) -> &mut ::std::vec::Vec<crate::v1_33::api::core::v1::ObjectReference> {
        &mut self.active
    }

    // Take field
    pub fn take_active(&mut self) -> ::std::vec::Vec<crate::v1_33::api::core::v1::ObjectReference> {
        ::std::mem::replace(&mut self.active, ::std::vec::Vec::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastScheduleTime = 4;

    pub fn lastScheduleTime(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.lastScheduleTime.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastScheduleTime(&mut self) {
        self.lastScheduleTime.clear();
    }

    pub fn has_lastScheduleTime(&self) -> bool {
        self.lastScheduleTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastScheduleTime(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastScheduleTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastScheduleTime(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.lastScheduleTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastScheduleTime(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.lastScheduleTime.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastSuccessfulTime = 5;

    pub fn lastSuccessfulTime(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.lastSuccessfulTime.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastSuccessfulTime(&mut self) {
        self.lastSuccessfulTime.clear();
    }

    pub fn has_lastSuccessfulTime(&self) -> bool {
        self.lastSuccessfulTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastSuccessfulTime(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastSuccessfulTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastSuccessfulTime(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.lastSuccessfulTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastSuccessfulTime(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.lastSuccessfulTime.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "active",
            |m: &CronJobStatus| { &m.active },
            |m: &mut CronJobStatus| { &mut m.active },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>(
            "lastScheduleTime",
            |m: &CronJobStatus| { &m.lastScheduleTime },
            |m: &mut CronJobStatus| { &mut m.lastScheduleTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>(
            "lastSuccessfulTime",
            |m: &CronJobStatus| { &m.lastSuccessfulTime },
            |m: &mut CronJobStatus| { &mut m.lastSuccessfulTime },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CronJobStatus>(
            "CronJobStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CronJobStatus {
    const NAME: &'static str = "CronJobStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.active.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastScheduleTime)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastSuccessfulTime)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.active {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.lastScheduleTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lastSuccessfulTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.active {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.lastScheduleTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.lastSuccessfulTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CronJobStatus {
        CronJobStatus::new()
    }

    fn clear(&mut self) {
        self.active.clear();
        self.lastScheduleTime.clear();
        self.lastSuccessfulTime.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CronJobStatus {
        static instance: CronJobStatus = CronJobStatus {
            active: ::std::vec::Vec::new(),
            lastScheduleTime: ::protobuf::MessageField::none(),
            lastSuccessfulTime: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CronJobStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CronJobStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CronJobStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CronJobStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1beta1.JobTemplateSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JobTemplateSpec {
    // message fields
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1beta1.JobTemplateSpec.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1beta1.JobTemplateSpec.spec)
    pub spec: ::protobuf::MessageField<crate::v1_33::api::batch::v1::JobSpec>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1beta1.JobTemplateSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobTemplateSpec {
    fn default() -> &'a JobTemplateSpec {
        <JobTemplateSpec as ::protobuf::Message>::default_instance()
    }
}

impl JobTemplateSpec {
    pub fn new() -> JobTemplateSpec {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.batch.v1.JobSpec spec = 2;

    pub fn spec(&self) -> &crate::v1_33::api::batch::v1::JobSpec {
        self.spec.as_ref().unwrap_or_else(|| <crate::v1_33::api::batch::v1::JobSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: crate::v1_33::api::batch::v1::JobSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut crate::v1_33::api::batch::v1::JobSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> crate::v1_33::api::batch::v1::JobSpec {
        self.spec.take().unwrap_or_else(|| crate::v1_33::api::batch::v1::JobSpec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &JobTemplateSpec| { &m.metadata },
            |m: &mut JobTemplateSpec| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::api::batch::v1::JobSpec>(
            "spec",
            |m: &JobTemplateSpec| { &m.spec },
            |m: &mut JobTemplateSpec| { &mut m.spec },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobTemplateSpec>(
            "JobTemplateSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobTemplateSpec {
    const NAME: &'static str = "JobTemplateSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobTemplateSpec {
        JobTemplateSpec::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobTemplateSpec {
        static instance: JobTemplateSpec = JobTemplateSpec {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobTemplateSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobTemplateSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobTemplateSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobTemplateSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!api/batch/v1beta1/generated.proto\x12\x11api.batch.v1beta1\x1a\x1capi\
    /batch/v1/generated.proto\x1a\x1bapi/core/v1/generated.proto\x1a-apimach\
    inery/pkg/apis/meta/v1/generated.proto\x1a(apimachinery/pkg/runtime/gene\
    rated.proto\x1a/apimachinery/pkg/runtime/schema/generated.proto\"\xbe\
    \x01\n\x07CronJob\x12E\n\x08metadata\x18\x01\x20\x01(\x0b2).apimachinery\
    .pkg.apis.meta.v1.ObjectMetaR\x08metadata\x122\n\x04spec\x18\x02\x20\x01\
    (\x0b2\x1e.api.batch.v1beta1.CronJobSpecR\x04spec\x128\n\x06status\x18\
    \x03\x20\x01(\x0b2\x20.api.batch.v1beta1.CronJobStatusR\x06status\"\x84\
    \x01\n\x0bCronJobList\x12C\n\x08metadata\x18\x01\x20\x01(\x0b2'.apimachi\
    nery.pkg.apis.meta.v1.ListMetaR\x08metadata\x120\n\x05items\x18\x02\x20\
    \x03(\x0b2\x1a.api.batch.v1beta1.CronJobR\x05items\"\x85\x03\n\x0bCronJo\
    bSpec\x12\x1a\n\x08schedule\x18\x01\x20\x01(\tR\x08schedule\x12\x1a\n\
    \x08timeZone\x18\x08\x20\x01(\tR\x08timeZone\x128\n\x17startingDeadlineS\
    econds\x18\x02\x20\x01(\x03R\x17startingDeadlineSeconds\x12,\n\x11concur\
    rencyPolicy\x18\x03\x20\x01(\tR\x11concurrencyPolicy\x12\x18\n\x07suspen\
    d\x18\x04\x20\x01(\x08R\x07suspend\x12D\n\x0bjobTemplate\x18\x05\x20\x01\
    (\x0b2\".api.batch.v1beta1.JobTemplateSpecR\x0bjobTemplate\x12>\n\x1asuc\
    cessfulJobsHistoryLimit\x18\x06\x20\x01(\x05R\x1asuccessfulJobsHistoryLi\
    mit\x126\n\x16failedJobsHistoryLimit\x18\x07\x20\x01(\x05R\x16failedJobs\
    HistoryLimit\"\xeb\x01\n\rCronJobStatus\x124\n\x06active\x18\x01\x20\x03\
    (\x0b2\x1c.api.core.v1.ObjectReferenceR\x06active\x12O\n\x10lastSchedule\
    Time\x18\x04\x20\x01(\x0b2#.apimachinery.pkg.apis.meta.v1.TimeR\x10lastS\
    cheduleTime\x12S\n\x12lastSuccessfulTime\x18\x05\x20\x01(\x0b2#.apimachi\
    nery.pkg.apis.meta.v1.TimeR\x12lastSuccessfulTime\"\x83\x01\n\x0fJobTemp\
    lateSpec\x12E\n\x08metadata\x18\x01\x20\x01(\x0b2).apimachinery.pkg.apis\
    .meta.v1.ObjectMetaR\x08metadata\x12)\n\x04spec\x18\x02\x20\x01(\x0b2\
    \x15.api.batch.v1.JobSpecR\x04specB\x1aZ\x18k8s.io/api/batch/v1beta1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(CronJob::generated_message_descriptor_data());
            messages.push(CronJobList::generated_message_descriptor_data());
            messages.push(CronJobSpec::generated_message_descriptor_data());
            messages.push(CronJobStatus::generated_message_descriptor_data());
            messages.push(JobTemplateSpec::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
