// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/coordination/v1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.coordination.v1.Lease)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Lease {
    // message fields
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.coordination.v1.Lease.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.coordination.v1.Lease.spec)
    pub spec: ::protobuf::MessageField<LeaseSpec>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.coordination.v1.Lease.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Lease {
    fn default() -> &'a Lease {
        <Lease as ::protobuf::Message>::default_instance()
    }
}

impl Lease {
    pub fn new() -> Lease {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.coordination.v1.LeaseSpec spec = 2;

    pub fn spec(&self) -> &LeaseSpec {
        self.spec.as_ref().unwrap_or_else(|| <LeaseSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: LeaseSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut LeaseSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> LeaseSpec {
        self.spec.take().unwrap_or_else(|| LeaseSpec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &Lease| { &m.metadata },
            |m: &mut Lease| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LeaseSpec>(
            "spec",
            |m: &Lease| { &m.spec },
            |m: &mut Lease| { &mut m.spec },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Lease>(
            "Lease",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Lease {
    const NAME: &'static str = "Lease";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Lease {
        Lease::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Lease {
        static instance: Lease = Lease {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Lease {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Lease").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Lease {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Lease {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.coordination.v1.LeaseList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LeaseList {
    // message fields
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.coordination.v1.LeaseList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.coordination.v1.LeaseList.items)
    pub items: ::std::vec::Vec<Lease>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.coordination.v1.LeaseList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LeaseList {
    fn default() -> &'a LeaseList {
        <LeaseList as ::protobuf::Message>::default_instance()
    }
}

impl LeaseList {
    pub fn new() -> LeaseList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.coordination.v1.Lease items = 2;

    pub fn items(&self) -> &[Lease] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<Lease>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<Lease> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<Lease> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &LeaseList| { &m.metadata },
            |m: &mut LeaseList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &LeaseList| { &m.items },
            |m: &mut LeaseList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LeaseList>(
            "LeaseList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LeaseList {
    const NAME: &'static str = "LeaseList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LeaseList {
        LeaseList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LeaseList {
        static instance: LeaseList = LeaseList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LeaseList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LeaseList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LeaseList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaseList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.coordination.v1.LeaseSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LeaseSpec {
    // message fields
    // @@protoc_insertion_point(field:api.coordination.v1.LeaseSpec.holderIdentity)
    pub holderIdentity: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.coordination.v1.LeaseSpec.leaseDurationSeconds)
    pub leaseDurationSeconds: ::std::option::Option<i32>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.coordination.v1.LeaseSpec.acquireTime)
    pub acquireTime: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.coordination.v1.LeaseSpec.renewTime)
    pub renewTime: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:api.coordination.v1.LeaseSpec.leaseTransitions)
    pub leaseTransitions: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.coordination.v1.LeaseSpec.strategy)
    pub strategy: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.coordination.v1.LeaseSpec.preferredHolder)
    pub preferredHolder: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.coordination.v1.LeaseSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LeaseSpec {
    fn default() -> &'a LeaseSpec {
        <LeaseSpec as ::protobuf::Message>::default_instance()
    }
}

impl LeaseSpec {
    pub fn new() -> LeaseSpec {
        ::std::default::Default::default()
    }

    // optional string holderIdentity = 1;

    pub fn holderIdentity(&self) -> &str {
        match self.holderIdentity.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_holderIdentity(&mut self) {
        self.holderIdentity = ::std::option::Option::None;
    }

    pub fn has_holderIdentity(&self) -> bool {
        self.holderIdentity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_holderIdentity(&mut self, v: ::std::string::String) {
        self.holderIdentity = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_holderIdentity(&mut self) -> &mut ::std::string::String {
        if self.holderIdentity.is_none() {
            self.holderIdentity = ::std::option::Option::Some(::std::string::String::new());
        }
        self.holderIdentity.as_mut().unwrap()
    }

    // Take field
    pub fn take_holderIdentity(&mut self) -> ::std::string::String {
        self.holderIdentity.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 leaseDurationSeconds = 2;

    pub fn leaseDurationSeconds(&self) -> i32 {
        self.leaseDurationSeconds.unwrap_or(0)
    }

    pub fn clear_leaseDurationSeconds(&mut self) {
        self.leaseDurationSeconds = ::std::option::Option::None;
    }

    pub fn has_leaseDurationSeconds(&self) -> bool {
        self.leaseDurationSeconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leaseDurationSeconds(&mut self, v: i32) {
        self.leaseDurationSeconds = ::std::option::Option::Some(v);
    }

    // optional .apimachinery.pkg.apis.meta.v1.MicroTime acquireTime = 3;

    pub fn acquireTime(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.acquireTime.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_acquireTime(&mut self) {
        self.acquireTime.clear();
    }

    pub fn has_acquireTime(&self) -> bool {
        self.acquireTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_acquireTime(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::Time) {
        self.acquireTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acquireTime(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.acquireTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_acquireTime(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.acquireTime.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.MicroTime renewTime = 4;

    pub fn renewTime(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.renewTime.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_renewTime(&mut self) {
        self.renewTime.clear();
    }

    pub fn has_renewTime(&self) -> bool {
        self.renewTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_renewTime(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::Time) {
        self.renewTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_renewTime(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.renewTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_renewTime(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.renewTime.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional int32 leaseTransitions = 5;

    pub fn leaseTransitions(&self) -> i32 {
        self.leaseTransitions.unwrap_or(0)
    }

    pub fn clear_leaseTransitions(&mut self) {
        self.leaseTransitions = ::std::option::Option::None;
    }

    pub fn has_leaseTransitions(&self) -> bool {
        self.leaseTransitions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leaseTransitions(&mut self, v: i32) {
        self.leaseTransitions = ::std::option::Option::Some(v);
    }

    // optional string strategy = 6;

    pub fn strategy(&self) -> &str {
        match self.strategy.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_strategy(&mut self) {
        self.strategy = ::std::option::Option::None;
    }

    pub fn has_strategy(&self) -> bool {
        self.strategy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_strategy(&mut self, v: ::std::string::String) {
        self.strategy = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_strategy(&mut self) -> &mut ::std::string::String {
        if self.strategy.is_none() {
            self.strategy = ::std::option::Option::Some(::std::string::String::new());
        }
        self.strategy.as_mut().unwrap()
    }

    // Take field
    pub fn take_strategy(&mut self) -> ::std::string::String {
        self.strategy.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string preferredHolder = 7;

    pub fn preferredHolder(&self) -> &str {
        match self.preferredHolder.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_preferredHolder(&mut self) {
        self.preferredHolder = ::std::option::Option::None;
    }

    pub fn has_preferredHolder(&self) -> bool {
        self.preferredHolder.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preferredHolder(&mut self, v: ::std::string::String) {
        self.preferredHolder = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_preferredHolder(&mut self) -> &mut ::std::string::String {
        if self.preferredHolder.is_none() {
            self.preferredHolder = ::std::option::Option::Some(::std::string::String::new());
        }
        self.preferredHolder.as_mut().unwrap()
    }

    // Take field
    pub fn take_preferredHolder(&mut self) -> ::std::string::String {
        self.preferredHolder.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "holderIdentity",
            |m: &LeaseSpec| { &m.holderIdentity },
            |m: &mut LeaseSpec| { &mut m.holderIdentity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "leaseDurationSeconds",
            |m: &LeaseSpec| { &m.leaseDurationSeconds },
            |m: &mut LeaseSpec| { &mut m.leaseDurationSeconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>(
            "acquireTime",
            |m: &LeaseSpec| { &m.acquireTime },
            |m: &mut LeaseSpec| { &mut m.acquireTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>(
            "renewTime",
            |m: &LeaseSpec| { &m.renewTime },
            |m: &mut LeaseSpec| { &mut m.renewTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "leaseTransitions",
            |m: &LeaseSpec| { &m.leaseTransitions },
            |m: &mut LeaseSpec| { &mut m.leaseTransitions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "strategy",
            |m: &LeaseSpec| { &m.strategy },
            |m: &mut LeaseSpec| { &mut m.strategy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "preferredHolder",
            |m: &LeaseSpec| { &m.preferredHolder },
            |m: &mut LeaseSpec| { &mut m.preferredHolder },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LeaseSpec>(
            "LeaseSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LeaseSpec {
    const NAME: &'static str = "LeaseSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.holderIdentity = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.leaseDurationSeconds = ::std::option::Option::Some(is.read_int32()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.acquireTime)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.renewTime)?;
                },
                40 => {
                    self.leaseTransitions = ::std::option::Option::Some(is.read_int32()?);
                },
                50 => {
                    self.strategy = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.preferredHolder = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.holderIdentity.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.leaseDurationSeconds {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.acquireTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.renewTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.leaseTransitions {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.strategy.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.preferredHolder.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.holderIdentity.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.leaseDurationSeconds {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.acquireTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.renewTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.leaseTransitions {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.strategy.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.preferredHolder.as_ref() {
            os.write_string(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LeaseSpec {
        LeaseSpec::new()
    }

    fn clear(&mut self) {
        self.holderIdentity = ::std::option::Option::None;
        self.leaseDurationSeconds = ::std::option::Option::None;
        self.acquireTime.clear();
        self.renewTime.clear();
        self.leaseTransitions = ::std::option::Option::None;
        self.strategy = ::std::option::Option::None;
        self.preferredHolder = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LeaseSpec {
        static instance: LeaseSpec = LeaseSpec {
            holderIdentity: ::std::option::Option::None,
            leaseDurationSeconds: ::std::option::Option::None,
            acquireTime: ::protobuf::MessageField::none(),
            renewTime: ::protobuf::MessageField::none(),
            leaseTransitions: ::std::option::Option::None,
            strategy: ::std::option::Option::None,
            preferredHolder: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LeaseSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LeaseSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LeaseSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaseSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#api/coordination/v1/generated.proto\x12\x13api.coordination.v1\x1a-ap\
    imachinery/pkg/apis/meta/v1/generated.proto\x1a(apimachinery/pkg/runtime\
    /generated.proto\x1a/apimachinery/pkg/runtime/schema/generated.proto\"\
    \x82\x01\n\x05Lease\x12E\n\x08metadata\x18\x01\x20\x01(\x0b2).apimachine\
    ry.pkg.apis.meta.v1.ObjectMetaR\x08metadata\x122\n\x04spec\x18\x02\x20\
    \x01(\x0b2\x1e.api.coordination.v1.LeaseSpecR\x04spec\"\x82\x01\n\tLease\
    List\x12C\n\x08metadata\x18\x01\x20\x01(\x0b2'.apimachinery.pkg.apis.met\
    a.v1.ListMetaR\x08metadata\x120\n\x05items\x18\x02\x20\x03(\x0b2\x1a.api\
    .coordination.v1.LeaseR\x05items\"\xed\x02\n\tLeaseSpec\x12&\n\x0eholder\
    Identity\x18\x01\x20\x01(\tR\x0eholderIdentity\x122\n\x14leaseDurationSe\
    conds\x18\x02\x20\x01(\x05R\x14leaseDurationSeconds\x12J\n\x0bacquireTim\
    e\x18\x03\x20\x01(\x0b2(.apimachinery.pkg.apis.meta.v1.MicroTimeR\x0bacq\
    uireTime\x12F\n\trenewTime\x18\x04\x20\x01(\x0b2(.apimachinery.pkg.apis.\
    meta.v1.MicroTimeR\trenewTime\x12*\n\x10leaseTransitions\x18\x05\x20\x01\
    (\x05R\x10leaseTransitions\x12\x1a\n\x08strategy\x18\x06\x20\x01(\tR\x08\
    strategy\x12(\n\x0fpreferredHolder\x18\x07\x20\x01(\tR\x0fpreferredHolde\
    rB\x1cZ\x1ak8s.io/api/coordination/v1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Lease::generated_message_descriptor_data());
            messages.push(LeaseList::generated_message_descriptor_data());
            messages.push(LeaseSpec::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
