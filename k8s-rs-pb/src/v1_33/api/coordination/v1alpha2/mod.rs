// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/coordination/v1alpha2/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.coordination.v1alpha2.LeaseCandidate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LeaseCandidate {
    // message fields
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.coordination.v1alpha2.LeaseCandidate.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.coordination.v1alpha2.LeaseCandidate.spec)
    pub spec: ::protobuf::MessageField<LeaseCandidateSpec>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.coordination.v1alpha2.LeaseCandidate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LeaseCandidate {
    fn default() -> &'a LeaseCandidate {
        <LeaseCandidate as ::protobuf::Message>::default_instance()
    }
}

impl LeaseCandidate {
    pub fn new() -> LeaseCandidate {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.coordination.v1alpha2.LeaseCandidateSpec spec = 2;

    pub fn spec(&self) -> &LeaseCandidateSpec {
        self.spec.as_ref().unwrap_or_else(|| <LeaseCandidateSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: LeaseCandidateSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut LeaseCandidateSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> LeaseCandidateSpec {
        self.spec.take().unwrap_or_else(|| LeaseCandidateSpec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &LeaseCandidate| { &m.metadata },
            |m: &mut LeaseCandidate| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LeaseCandidateSpec>(
            "spec",
            |m: &LeaseCandidate| { &m.spec },
            |m: &mut LeaseCandidate| { &mut m.spec },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LeaseCandidate>(
            "LeaseCandidate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LeaseCandidate {
    const NAME: &'static str = "LeaseCandidate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LeaseCandidate {
        LeaseCandidate::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LeaseCandidate {
        static instance: LeaseCandidate = LeaseCandidate {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LeaseCandidate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LeaseCandidate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LeaseCandidate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaseCandidate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.coordination.v1alpha2.LeaseCandidateList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LeaseCandidateList {
    // message fields
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.coordination.v1alpha2.LeaseCandidateList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.coordination.v1alpha2.LeaseCandidateList.items)
    pub items: ::std::vec::Vec<LeaseCandidate>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.coordination.v1alpha2.LeaseCandidateList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LeaseCandidateList {
    fn default() -> &'a LeaseCandidateList {
        <LeaseCandidateList as ::protobuf::Message>::default_instance()
    }
}

impl LeaseCandidateList {
    pub fn new() -> LeaseCandidateList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.coordination.v1alpha2.LeaseCandidate items = 2;

    pub fn items(&self) -> &[LeaseCandidate] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<LeaseCandidate>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<LeaseCandidate> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<LeaseCandidate> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &LeaseCandidateList| { &m.metadata },
            |m: &mut LeaseCandidateList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &LeaseCandidateList| { &m.items },
            |m: &mut LeaseCandidateList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LeaseCandidateList>(
            "LeaseCandidateList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LeaseCandidateList {
    const NAME: &'static str = "LeaseCandidateList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LeaseCandidateList {
        LeaseCandidateList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LeaseCandidateList {
        static instance: LeaseCandidateList = LeaseCandidateList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LeaseCandidateList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LeaseCandidateList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LeaseCandidateList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaseCandidateList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.coordination.v1alpha2.LeaseCandidateSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LeaseCandidateSpec {
    // message fields
    // @@protoc_insertion_point(field:api.coordination.v1alpha2.LeaseCandidateSpec.leaseName)
    pub leaseName: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.coordination.v1alpha2.LeaseCandidateSpec.pingTime)
    pub pingTime: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.coordination.v1alpha2.LeaseCandidateSpec.renewTime)
    pub renewTime: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:api.coordination.v1alpha2.LeaseCandidateSpec.binaryVersion)
    pub binaryVersion: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.coordination.v1alpha2.LeaseCandidateSpec.emulationVersion)
    pub emulationVersion: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.coordination.v1alpha2.LeaseCandidateSpec.strategy)
    pub strategy: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.coordination.v1alpha2.LeaseCandidateSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LeaseCandidateSpec {
    fn default() -> &'a LeaseCandidateSpec {
        <LeaseCandidateSpec as ::protobuf::Message>::default_instance()
    }
}

impl LeaseCandidateSpec {
    pub fn new() -> LeaseCandidateSpec {
        ::std::default::Default::default()
    }

    // optional string leaseName = 1;

    pub fn leaseName(&self) -> &str {
        match self.leaseName.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_leaseName(&mut self) {
        self.leaseName = ::std::option::Option::None;
    }

    pub fn has_leaseName(&self) -> bool {
        self.leaseName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leaseName(&mut self, v: ::std::string::String) {
        self.leaseName = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leaseName(&mut self) -> &mut ::std::string::String {
        if self.leaseName.is_none() {
            self.leaseName = ::std::option::Option::Some(::std::string::String::new());
        }
        self.leaseName.as_mut().unwrap()
    }

    // Take field
    pub fn take_leaseName(&mut self) -> ::std::string::String {
        self.leaseName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.MicroTime pingTime = 2;

    pub fn pingTime(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.pingTime.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_pingTime(&mut self) {
        self.pingTime.clear();
    }

    pub fn has_pingTime(&self) -> bool {
        self.pingTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pingTime(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::Time) {
        self.pingTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pingTime(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.pingTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_pingTime(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.pingTime.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.MicroTime renewTime = 3;

    pub fn renewTime(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.renewTime.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_renewTime(&mut self) {
        self.renewTime.clear();
    }

    pub fn has_renewTime(&self) -> bool {
        self.renewTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_renewTime(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::Time) {
        self.renewTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_renewTime(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.renewTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_renewTime(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.renewTime.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional string binaryVersion = 4;

    pub fn binaryVersion(&self) -> &str {
        match self.binaryVersion.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_binaryVersion(&mut self) {
        self.binaryVersion = ::std::option::Option::None;
    }

    pub fn has_binaryVersion(&self) -> bool {
        self.binaryVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_binaryVersion(&mut self, v: ::std::string::String) {
        self.binaryVersion = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_binaryVersion(&mut self) -> &mut ::std::string::String {
        if self.binaryVersion.is_none() {
            self.binaryVersion = ::std::option::Option::Some(::std::string::String::new());
        }
        self.binaryVersion.as_mut().unwrap()
    }

    // Take field
    pub fn take_binaryVersion(&mut self) -> ::std::string::String {
        self.binaryVersion.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string emulationVersion = 5;

    pub fn emulationVersion(&self) -> &str {
        match self.emulationVersion.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_emulationVersion(&mut self) {
        self.emulationVersion = ::std::option::Option::None;
    }

    pub fn has_emulationVersion(&self) -> bool {
        self.emulationVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_emulationVersion(&mut self, v: ::std::string::String) {
        self.emulationVersion = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_emulationVersion(&mut self) -> &mut ::std::string::String {
        if self.emulationVersion.is_none() {
            self.emulationVersion = ::std::option::Option::Some(::std::string::String::new());
        }
        self.emulationVersion.as_mut().unwrap()
    }

    // Take field
    pub fn take_emulationVersion(&mut self) -> ::std::string::String {
        self.emulationVersion.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string strategy = 6;

    pub fn strategy(&self) -> &str {
        match self.strategy.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_strategy(&mut self) {
        self.strategy = ::std::option::Option::None;
    }

    pub fn has_strategy(&self) -> bool {
        self.strategy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_strategy(&mut self, v: ::std::string::String) {
        self.strategy = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_strategy(&mut self) -> &mut ::std::string::String {
        if self.strategy.is_none() {
            self.strategy = ::std::option::Option::Some(::std::string::String::new());
        }
        self.strategy.as_mut().unwrap()
    }

    // Take field
    pub fn take_strategy(&mut self) -> ::std::string::String {
        self.strategy.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "leaseName",
            |m: &LeaseCandidateSpec| { &m.leaseName },
            |m: &mut LeaseCandidateSpec| { &mut m.leaseName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>(
            "pingTime",
            |m: &LeaseCandidateSpec| { &m.pingTime },
            |m: &mut LeaseCandidateSpec| { &mut m.pingTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>(
            "renewTime",
            |m: &LeaseCandidateSpec| { &m.renewTime },
            |m: &mut LeaseCandidateSpec| { &mut m.renewTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "binaryVersion",
            |m: &LeaseCandidateSpec| { &m.binaryVersion },
            |m: &mut LeaseCandidateSpec| { &mut m.binaryVersion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "emulationVersion",
            |m: &LeaseCandidateSpec| { &m.emulationVersion },
            |m: &mut LeaseCandidateSpec| { &mut m.emulationVersion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "strategy",
            |m: &LeaseCandidateSpec| { &m.strategy },
            |m: &mut LeaseCandidateSpec| { &mut m.strategy },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LeaseCandidateSpec>(
            "LeaseCandidateSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LeaseCandidateSpec {
    const NAME: &'static str = "LeaseCandidateSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.leaseName = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pingTime)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.renewTime)?;
                },
                34 => {
                    self.binaryVersion = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.emulationVersion = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.strategy = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.leaseName.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.pingTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.renewTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.binaryVersion.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.emulationVersion.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.strategy.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.leaseName.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.pingTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.renewTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.binaryVersion.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.emulationVersion.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.strategy.as_ref() {
            os.write_string(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LeaseCandidateSpec {
        LeaseCandidateSpec::new()
    }

    fn clear(&mut self) {
        self.leaseName = ::std::option::Option::None;
        self.pingTime.clear();
        self.renewTime.clear();
        self.binaryVersion = ::std::option::Option::None;
        self.emulationVersion = ::std::option::Option::None;
        self.strategy = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LeaseCandidateSpec {
        static instance: LeaseCandidateSpec = LeaseCandidateSpec {
            leaseName: ::std::option::Option::None,
            pingTime: ::protobuf::MessageField::none(),
            renewTime: ::protobuf::MessageField::none(),
            binaryVersion: ::std::option::Option::None,
            emulationVersion: ::std::option::Option::None,
            strategy: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LeaseCandidateSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LeaseCandidateSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LeaseCandidateSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaseCandidateSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)api/coordination/v1alpha2/generated.proto\x12\x19api.coordination.v1a\
    lpha2\x1a#api/coordination/v1/generated.proto\x1a-apimachinery/pkg/apis/\
    meta/v1/generated.proto\x1a(apimachinery/pkg/runtime/generated.proto\x1a\
    /apimachinery/pkg/runtime/schema/generated.proto\"\x9a\x01\n\x0eLeaseCan\
    didate\x12E\n\x08metadata\x18\x01\x20\x01(\x0b2).apimachinery.pkg.apis.m\
    eta.v1.ObjectMetaR\x08metadata\x12A\n\x04spec\x18\x02\x20\x01(\x0b2-.api\
    .coordination.v1alpha2.LeaseCandidateSpecR\x04spec\"\x9a\x01\n\x12LeaseC\
    andidateList\x12C\n\x08metadata\x18\x01\x20\x01(\x0b2'.apimachinery.pkg.\
    apis.meta.v1.ListMetaR\x08metadata\x12?\n\x05items\x18\x02\x20\x03(\x0b2\
    ).api.coordination.v1alpha2.LeaseCandidateR\x05items\"\xae\x02\n\x12Leas\
    eCandidateSpec\x12\x1c\n\tleaseName\x18\x01\x20\x01(\tR\tleaseName\x12D\
    \n\x08pingTime\x18\x02\x20\x01(\x0b2(.apimachinery.pkg.apis.meta.v1.Micr\
    oTimeR\x08pingTime\x12F\n\trenewTime\x18\x03\x20\x01(\x0b2(.apimachinery\
    .pkg.apis.meta.v1.MicroTimeR\trenewTime\x12$\n\rbinaryVersion\x18\x04\
    \x20\x01(\tR\rbinaryVersion\x12*\n\x10emulationVersion\x18\x05\x20\x01(\
    \tR\x10emulationVersion\x12\x1a\n\x08strategy\x18\x06\x20\x01(\tR\x08str\
    ategyB\"Z\x20k8s.io/api/coordination/v1alpha2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::v1alpha2::file_descriptor().clone());
            deps.push(super::v1alpha2::file_descriptor().clone());
            deps.push(super::v1alpha2::file_descriptor().clone());
            deps.push(super::v1alpha2::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(LeaseCandidate::generated_message_descriptor_data());
            messages.push(LeaseCandidateList::generated_message_descriptor_data());
            messages.push(LeaseCandidateSpec::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
