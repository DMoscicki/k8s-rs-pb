// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/authentication/v1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1.BoundObjectReference)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BoundObjectReference {
    // message fields
    // @@protoc_insertion_point(field:api.authentication.v1.BoundObjectReference.kind)
    pub kind: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.authentication.v1.BoundObjectReference.apiVersion)
    pub apiVersion: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.authentication.v1.BoundObjectReference.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.authentication.v1.BoundObjectReference.uID)
    pub uID: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1.BoundObjectReference.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BoundObjectReference {
    fn default() -> &'a BoundObjectReference {
        <BoundObjectReference as ::protobuf::Message>::default_instance()
    }
}

impl BoundObjectReference {
    pub fn new() -> BoundObjectReference {
        ::std::default::Default::default()
    }

    // optional string kind = 1;

    pub fn kind(&self) -> &str {
        match self.kind.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_kind(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_kind(&self) -> bool {
        self.kind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: ::std::string::String) {
        self.kind = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind(&mut self) -> &mut ::std::string::String {
        if self.kind.is_none() {
            self.kind = ::std::option::Option::Some(::std::string::String::new());
        }
        self.kind.as_mut().unwrap()
    }

    // Take field
    pub fn take_kind(&mut self) -> ::std::string::String {
        self.kind.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string apiVersion = 2;

    pub fn apiVersion(&self) -> &str {
        match self.apiVersion.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_apiVersion(&mut self) {
        self.apiVersion = ::std::option::Option::None;
    }

    pub fn has_apiVersion(&self) -> bool {
        self.apiVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apiVersion(&mut self, v: ::std::string::String) {
        self.apiVersion = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apiVersion(&mut self) -> &mut ::std::string::String {
        if self.apiVersion.is_none() {
            self.apiVersion = ::std::option::Option::Some(::std::string::String::new());
        }
        self.apiVersion.as_mut().unwrap()
    }

    // Take field
    pub fn take_apiVersion(&mut self) -> ::std::string::String {
        self.apiVersion.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string name = 3;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string uID = 4;

    pub fn uID(&self) -> &str {
        match self.uID.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_uID(&mut self) {
        self.uID = ::std::option::Option::None;
    }

    pub fn has_uID(&self) -> bool {
        self.uID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uID(&mut self, v: ::std::string::String) {
        self.uID = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uID(&mut self) -> &mut ::std::string::String {
        if self.uID.is_none() {
            self.uID = ::std::option::Option::Some(::std::string::String::new());
        }
        self.uID.as_mut().unwrap()
    }

    // Take field
    pub fn take_uID(&mut self) -> ::std::string::String {
        self.uID.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "kind",
            |m: &BoundObjectReference| { &m.kind },
            |m: &mut BoundObjectReference| { &mut m.kind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "apiVersion",
            |m: &BoundObjectReference| { &m.apiVersion },
            |m: &mut BoundObjectReference| { &mut m.apiVersion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &BoundObjectReference| { &m.name },
            |m: &mut BoundObjectReference| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "uID",
            |m: &BoundObjectReference| { &m.uID },
            |m: &mut BoundObjectReference| { &mut m.uID },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BoundObjectReference>(
            "BoundObjectReference",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BoundObjectReference {
    const NAME: &'static str = "BoundObjectReference";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.kind = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.apiVersion = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.uID = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.kind.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.apiVersion.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.uID.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.kind.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.apiVersion.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.uID.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BoundObjectReference {
        BoundObjectReference::new()
    }

    fn clear(&mut self) {
        self.kind = ::std::option::Option::None;
        self.apiVersion = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.uID = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BoundObjectReference {
        static instance: BoundObjectReference = BoundObjectReference {
            kind: ::std::option::Option::None,
            apiVersion: ::std::option::Option::None,
            name: ::std::option::Option::None,
            uID: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BoundObjectReference {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BoundObjectReference").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BoundObjectReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BoundObjectReference {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1.ExtraValue)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExtraValue {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.ExtraValue.items)
    pub items: ::std::vec::Vec<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1.ExtraValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExtraValue {
    fn default() -> &'a ExtraValue {
        <ExtraValue as ::protobuf::Message>::default_instance()
    }
}

impl ExtraValue {
    pub fn new() -> ExtraValue {
        ::std::default::Default::default()
    }

    // repeated string items = 1;

    pub fn items(&self) -> &[::std::string::String] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &ExtraValue| { &m.items },
            |m: &mut ExtraValue| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExtraValue>(
            "ExtraValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExtraValue {
    const NAME: &'static str = "ExtraValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.items.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.items {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.items {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExtraValue {
        ExtraValue::new()
    }

    fn clear(&mut self) {
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExtraValue {
        static instance: ExtraValue = ExtraValue {
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExtraValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExtraValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExtraValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtraValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1.SelfSubjectReview)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SelfSubjectReview {
    // message fields
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.SelfSubjectReview.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.SelfSubjectReview.status)
    pub status: ::protobuf::MessageField<SelfSubjectReviewStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1.SelfSubjectReview.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SelfSubjectReview {
    fn default() -> &'a SelfSubjectReview {
        <SelfSubjectReview as ::protobuf::Message>::default_instance()
    }
}

impl SelfSubjectReview {
    pub fn new() -> SelfSubjectReview {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.authentication.v1.SelfSubjectReviewStatus status = 2;

    pub fn status(&self) -> &SelfSubjectReviewStatus {
        self.status.as_ref().unwrap_or_else(|| <SelfSubjectReviewStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: SelfSubjectReviewStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut SelfSubjectReviewStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> SelfSubjectReviewStatus {
        self.status.take().unwrap_or_else(|| SelfSubjectReviewStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &SelfSubjectReview| { &m.metadata },
            |m: &mut SelfSubjectReview| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SelfSubjectReviewStatus>(
            "status",
            |m: &SelfSubjectReview| { &m.status },
            |m: &mut SelfSubjectReview| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SelfSubjectReview>(
            "SelfSubjectReview",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SelfSubjectReview {
    const NAME: &'static str = "SelfSubjectReview";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SelfSubjectReview {
        SelfSubjectReview::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SelfSubjectReview {
        static instance: SelfSubjectReview = SelfSubjectReview {
            metadata: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SelfSubjectReview {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SelfSubjectReview").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SelfSubjectReview {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelfSubjectReview {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1.SelfSubjectReviewStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SelfSubjectReviewStatus {
    // message fields
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.SelfSubjectReviewStatus.userInfo)
    pub userInfo: ::protobuf::MessageField<UserInfo>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1.SelfSubjectReviewStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SelfSubjectReviewStatus {
    fn default() -> &'a SelfSubjectReviewStatus {
        <SelfSubjectReviewStatus as ::protobuf::Message>::default_instance()
    }
}

impl SelfSubjectReviewStatus {
    pub fn new() -> SelfSubjectReviewStatus {
        ::std::default::Default::default()
    }

    // optional .api.authentication.v1.UserInfo userInfo = 1;

    pub fn userInfo(&self) -> &UserInfo {
        self.userInfo.as_ref().unwrap_or_else(|| <UserInfo as ::protobuf::Message>::default_instance())
    }

    pub fn clear_userInfo(&mut self) {
        self.userInfo.clear();
    }

    pub fn has_userInfo(&self) -> bool {
        self.userInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_userInfo(&mut self, v: UserInfo) {
        self.userInfo = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_userInfo(&mut self) -> &mut UserInfo {
        self.userInfo.mut_or_insert_default()
    }

    // Take field
    pub fn take_userInfo(&mut self) -> UserInfo {
        self.userInfo.take().unwrap_or_else(|| UserInfo::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UserInfo>(
            "userInfo",
            |m: &SelfSubjectReviewStatus| { &m.userInfo },
            |m: &mut SelfSubjectReviewStatus| { &mut m.userInfo },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SelfSubjectReviewStatus>(
            "SelfSubjectReviewStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SelfSubjectReviewStatus {
    const NAME: &'static str = "SelfSubjectReviewStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.userInfo)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.userInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.userInfo.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SelfSubjectReviewStatus {
        SelfSubjectReviewStatus::new()
    }

    fn clear(&mut self) {
        self.userInfo.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SelfSubjectReviewStatus {
        static instance: SelfSubjectReviewStatus = SelfSubjectReviewStatus {
            userInfo: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SelfSubjectReviewStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SelfSubjectReviewStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SelfSubjectReviewStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelfSubjectReviewStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1.TokenRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TokenRequest {
    // message fields
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.TokenRequest.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.TokenRequest.spec)
    pub spec: ::protobuf::MessageField<TokenRequestSpec>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.TokenRequest.status)
    pub status: ::protobuf::MessageField<TokenRequestStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1.TokenRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TokenRequest {
    fn default() -> &'a TokenRequest {
        <TokenRequest as ::protobuf::Message>::default_instance()
    }
}

impl TokenRequest {
    pub fn new() -> TokenRequest {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.authentication.v1.TokenRequestSpec spec = 2;

    pub fn spec(&self) -> &TokenRequestSpec {
        self.spec.as_ref().unwrap_or_else(|| <TokenRequestSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: TokenRequestSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut TokenRequestSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> TokenRequestSpec {
        self.spec.take().unwrap_or_else(|| TokenRequestSpec::new())
    }

    // optional .api.authentication.v1.TokenRequestStatus status = 3;

    pub fn status(&self) -> &TokenRequestStatus {
        self.status.as_ref().unwrap_or_else(|| <TokenRequestStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: TokenRequestStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut TokenRequestStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> TokenRequestStatus {
        self.status.take().unwrap_or_else(|| TokenRequestStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &TokenRequest| { &m.metadata },
            |m: &mut TokenRequest| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TokenRequestSpec>(
            "spec",
            |m: &TokenRequest| { &m.spec },
            |m: &mut TokenRequest| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TokenRequestStatus>(
            "status",
            |m: &TokenRequest| { &m.status },
            |m: &mut TokenRequest| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenRequest>(
            "TokenRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TokenRequest {
    const NAME: &'static str = "TokenRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TokenRequest {
        TokenRequest::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TokenRequest {
        static instance: TokenRequest = TokenRequest {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TokenRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TokenRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TokenRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1.TokenRequestSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TokenRequestSpec {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.TokenRequestSpec.audiences)
    pub audiences: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:api.authentication.v1.TokenRequestSpec.expirationSeconds)
    pub expirationSeconds: ::std::option::Option<i64>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.TokenRequestSpec.boundObjectRef)
    pub boundObjectRef: ::protobuf::MessageField<BoundObjectReference>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1.TokenRequestSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TokenRequestSpec {
    fn default() -> &'a TokenRequestSpec {
        <TokenRequestSpec as ::protobuf::Message>::default_instance()
    }
}

impl TokenRequestSpec {
    pub fn new() -> TokenRequestSpec {
        ::std::default::Default::default()
    }

    // repeated string audiences = 1;

    pub fn audiences(&self) -> &[::std::string::String] {
        &self.audiences
    }

    pub fn clear_audiences(&mut self) {
        self.audiences.clear();
    }

    // Param is passed by value, moved
    pub fn set_audiences(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.audiences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_audiences(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.audiences
    }

    // Take field
    pub fn take_audiences(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.audiences, ::std::vec::Vec::new())
    }

    // optional int64 expirationSeconds = 4;

    pub fn expirationSeconds(&self) -> i64 {
        self.expirationSeconds.unwrap_or(0)
    }

    pub fn clear_expirationSeconds(&mut self) {
        self.expirationSeconds = ::std::option::Option::None;
    }

    pub fn has_expirationSeconds(&self) -> bool {
        self.expirationSeconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expirationSeconds(&mut self, v: i64) {
        self.expirationSeconds = ::std::option::Option::Some(v);
    }

    // optional .api.authentication.v1.BoundObjectReference boundObjectRef = 3;

    pub fn boundObjectRef(&self) -> &BoundObjectReference {
        self.boundObjectRef.as_ref().unwrap_or_else(|| <BoundObjectReference as ::protobuf::Message>::default_instance())
    }

    pub fn clear_boundObjectRef(&mut self) {
        self.boundObjectRef.clear();
    }

    pub fn has_boundObjectRef(&self) -> bool {
        self.boundObjectRef.is_some()
    }

    // Param is passed by value, moved
    pub fn set_boundObjectRef(&mut self, v: BoundObjectReference) {
        self.boundObjectRef = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_boundObjectRef(&mut self) -> &mut BoundObjectReference {
        self.boundObjectRef.mut_or_insert_default()
    }

    // Take field
    pub fn take_boundObjectRef(&mut self) -> BoundObjectReference {
        self.boundObjectRef.take().unwrap_or_else(|| BoundObjectReference::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "audiences",
            |m: &TokenRequestSpec| { &m.audiences },
            |m: &mut TokenRequestSpec| { &mut m.audiences },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "expirationSeconds",
            |m: &TokenRequestSpec| { &m.expirationSeconds },
            |m: &mut TokenRequestSpec| { &mut m.expirationSeconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BoundObjectReference>(
            "boundObjectRef",
            |m: &TokenRequestSpec| { &m.boundObjectRef },
            |m: &mut TokenRequestSpec| { &mut m.boundObjectRef },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenRequestSpec>(
            "TokenRequestSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TokenRequestSpec {
    const NAME: &'static str = "TokenRequestSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.audiences.push(is.read_string()?);
                },
                32 => {
                    self.expirationSeconds = ::std::option::Option::Some(is.read_int64()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.boundObjectRef)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.audiences {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if let Some(v) = self.expirationSeconds {
            my_size += ::protobuf::rt::int64_size(4, v);
        }
        if let Some(v) = self.boundObjectRef.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.audiences {
            os.write_string(1, &v)?;
        };
        if let Some(v) = self.expirationSeconds {
            os.write_int64(4, v)?;
        }
        if let Some(v) = self.boundObjectRef.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TokenRequestSpec {
        TokenRequestSpec::new()
    }

    fn clear(&mut self) {
        self.audiences.clear();
        self.expirationSeconds = ::std::option::Option::None;
        self.boundObjectRef.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TokenRequestSpec {
        static instance: TokenRequestSpec = TokenRequestSpec {
            audiences: ::std::vec::Vec::new(),
            expirationSeconds: ::std::option::Option::None,
            boundObjectRef: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TokenRequestSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TokenRequestSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TokenRequestSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenRequestSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1.TokenRequestStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TokenRequestStatus {
    // message fields
    // @@protoc_insertion_point(field:api.authentication.v1.TokenRequestStatus.token)
    pub token: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.TokenRequestStatus.expirationTimestamp)
    pub expirationTimestamp: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1.TokenRequestStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TokenRequestStatus {
    fn default() -> &'a TokenRequestStatus {
        <TokenRequestStatus as ::protobuf::Message>::default_instance()
    }
}

impl TokenRequestStatus {
    pub fn new() -> TokenRequestStatus {
        ::std::default::Default::default()
    }

    // optional string token = 1;

    pub fn token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_token(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time expirationTimestamp = 2;

    pub fn expirationTimestamp(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.expirationTimestamp.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_expirationTimestamp(&mut self) {
        self.expirationTimestamp.clear();
    }

    pub fn has_expirationTimestamp(&self) -> bool {
        self.expirationTimestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expirationTimestamp(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::Time) {
        self.expirationTimestamp = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expirationTimestamp(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.expirationTimestamp.mut_or_insert_default()
    }

    // Take field
    pub fn take_expirationTimestamp(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::Time {
        self.expirationTimestamp.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "token",
            |m: &TokenRequestStatus| { &m.token },
            |m: &mut TokenRequestStatus| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::Time>(
            "expirationTimestamp",
            |m: &TokenRequestStatus| { &m.expirationTimestamp },
            |m: &mut TokenRequestStatus| { &mut m.expirationTimestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenRequestStatus>(
            "TokenRequestStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TokenRequestStatus {
    const NAME: &'static str = "TokenRequestStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.expirationTimestamp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.expirationTimestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.expirationTimestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TokenRequestStatus {
        TokenRequestStatus::new()
    }

    fn clear(&mut self) {
        self.token = ::std::option::Option::None;
        self.expirationTimestamp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TokenRequestStatus {
        static instance: TokenRequestStatus = TokenRequestStatus {
            token: ::std::option::Option::None,
            expirationTimestamp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TokenRequestStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TokenRequestStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TokenRequestStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenRequestStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1.TokenReview)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TokenReview {
    // message fields
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.TokenReview.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.TokenReview.spec)
    pub spec: ::protobuf::MessageField<TokenReviewSpec>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.TokenReview.status)
    pub status: ::protobuf::MessageField<TokenReviewStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1.TokenReview.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TokenReview {
    fn default() -> &'a TokenReview {
        <TokenReview as ::protobuf::Message>::default_instance()
    }
}

impl TokenReview {
    pub fn new() -> TokenReview {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.authentication.v1.TokenReviewSpec spec = 2;

    pub fn spec(&self) -> &TokenReviewSpec {
        self.spec.as_ref().unwrap_or_else(|| <TokenReviewSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: TokenReviewSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut TokenReviewSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> TokenReviewSpec {
        self.spec.take().unwrap_or_else(|| TokenReviewSpec::new())
    }

    // optional .api.authentication.v1.TokenReviewStatus status = 3;

    pub fn status(&self) -> &TokenReviewStatus {
        self.status.as_ref().unwrap_or_else(|| <TokenReviewStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: TokenReviewStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut TokenReviewStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> TokenReviewStatus {
        self.status.take().unwrap_or_else(|| TokenReviewStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_33::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &TokenReview| { &m.metadata },
            |m: &mut TokenReview| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TokenReviewSpec>(
            "spec",
            |m: &TokenReview| { &m.spec },
            |m: &mut TokenReview| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TokenReviewStatus>(
            "status",
            |m: &TokenReview| { &m.status },
            |m: &mut TokenReview| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenReview>(
            "TokenReview",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TokenReview {
    const NAME: &'static str = "TokenReview";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TokenReview {
        TokenReview::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TokenReview {
        static instance: TokenReview = TokenReview {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TokenReview {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TokenReview").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TokenReview {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenReview {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1.TokenReviewSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TokenReviewSpec {
    // message fields
    // @@protoc_insertion_point(field:api.authentication.v1.TokenReviewSpec.token)
    pub token: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.TokenReviewSpec.audiences)
    pub audiences: ::std::vec::Vec<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1.TokenReviewSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TokenReviewSpec {
    fn default() -> &'a TokenReviewSpec {
        <TokenReviewSpec as ::protobuf::Message>::default_instance()
    }
}

impl TokenReviewSpec {
    pub fn new() -> TokenReviewSpec {
        ::std::default::Default::default()
    }

    // optional string token = 1;

    pub fn token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_token(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string audiences = 2;

    pub fn audiences(&self) -> &[::std::string::String] {
        &self.audiences
    }

    pub fn clear_audiences(&mut self) {
        self.audiences.clear();
    }

    // Param is passed by value, moved
    pub fn set_audiences(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.audiences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_audiences(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.audiences
    }

    // Take field
    pub fn take_audiences(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.audiences, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "token",
            |m: &TokenReviewSpec| { &m.token },
            |m: &mut TokenReviewSpec| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "audiences",
            |m: &TokenReviewSpec| { &m.audiences },
            |m: &mut TokenReviewSpec| { &mut m.audiences },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenReviewSpec>(
            "TokenReviewSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TokenReviewSpec {
    const NAME: &'static str = "TokenReviewSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.audiences.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.audiences {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.token.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.audiences {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TokenReviewSpec {
        TokenReviewSpec::new()
    }

    fn clear(&mut self) {
        self.token = ::std::option::Option::None;
        self.audiences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TokenReviewSpec {
        static instance: TokenReviewSpec = TokenReviewSpec {
            token: ::std::option::Option::None,
            audiences: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TokenReviewSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TokenReviewSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TokenReviewSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenReviewSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1.TokenReviewStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TokenReviewStatus {
    // message fields
    // @@protoc_insertion_point(field:api.authentication.v1.TokenReviewStatus.authenticated)
    pub authenticated: ::std::option::Option<bool>,
    #[serde(with = "crate::v1_33::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.TokenReviewStatus.user)
    pub user: ::protobuf::MessageField<UserInfo>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.TokenReviewStatus.audiences)
    pub audiences: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:api.authentication.v1.TokenReviewStatus.error)
    pub error: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1.TokenReviewStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TokenReviewStatus {
    fn default() -> &'a TokenReviewStatus {
        <TokenReviewStatus as ::protobuf::Message>::default_instance()
    }
}

impl TokenReviewStatus {
    pub fn new() -> TokenReviewStatus {
        ::std::default::Default::default()
    }

    // optional bool authenticated = 1;

    pub fn authenticated(&self) -> bool {
        self.authenticated.unwrap_or(false)
    }

    pub fn clear_authenticated(&mut self) {
        self.authenticated = ::std::option::Option::None;
    }

    pub fn has_authenticated(&self) -> bool {
        self.authenticated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_authenticated(&mut self, v: bool) {
        self.authenticated = ::std::option::Option::Some(v);
    }

    // optional .api.authentication.v1.UserInfo user = 2;

    pub fn user(&self) -> &UserInfo {
        self.user.as_ref().unwrap_or_else(|| <UserInfo as ::protobuf::Message>::default_instance())
    }

    pub fn clear_user(&mut self) {
        self.user.clear();
    }

    pub fn has_user(&self) -> bool {
        self.user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user(&mut self, v: UserInfo) {
        self.user = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user(&mut self) -> &mut UserInfo {
        self.user.mut_or_insert_default()
    }

    // Take field
    pub fn take_user(&mut self) -> UserInfo {
        self.user.take().unwrap_or_else(|| UserInfo::new())
    }

    // repeated string audiences = 4;

    pub fn audiences(&self) -> &[::std::string::String] {
        &self.audiences
    }

    pub fn clear_audiences(&mut self) {
        self.audiences.clear();
    }

    // Param is passed by value, moved
    pub fn set_audiences(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.audiences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_audiences(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.audiences
    }

    // Take field
    pub fn take_audiences(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.audiences, ::std::vec::Vec::new())
    }

    // optional string error = 3;

    pub fn error(&self) -> &str {
        match self.error.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_error(&mut self) {
        self.error = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        if self.error.is_none() {
            self.error = ::std::option::Option::Some(::std::string::String::new());
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        self.error.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "authenticated",
            |m: &TokenReviewStatus| { &m.authenticated },
            |m: &mut TokenReviewStatus| { &mut m.authenticated },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UserInfo>(
            "user",
            |m: &TokenReviewStatus| { &m.user },
            |m: &mut TokenReviewStatus| { &mut m.user },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "audiences",
            |m: &TokenReviewStatus| { &m.audiences },
            |m: &mut TokenReviewStatus| { &mut m.audiences },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "error",
            |m: &TokenReviewStatus| { &m.error },
            |m: &mut TokenReviewStatus| { &mut m.error },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TokenReviewStatus>(
            "TokenReviewStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TokenReviewStatus {
    const NAME: &'static str = "TokenReviewStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.authenticated = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.user)?;
                },
                34 => {
                    self.audiences.push(is.read_string()?);
                },
                26 => {
                    self.error = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.authenticated {
            my_size += 1 + 1;
        }
        if let Some(v) = self.user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.audiences {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if let Some(v) = self.error.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.authenticated {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.user.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.audiences {
            os.write_string(4, &v)?;
        };
        if let Some(v) = self.error.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TokenReviewStatus {
        TokenReviewStatus::new()
    }

    fn clear(&mut self) {
        self.authenticated = ::std::option::Option::None;
        self.user.clear();
        self.audiences.clear();
        self.error = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TokenReviewStatus {
        static instance: TokenReviewStatus = TokenReviewStatus {
            authenticated: ::std::option::Option::None,
            user: ::protobuf::MessageField::none(),
            audiences: ::std::vec::Vec::new(),
            error: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TokenReviewStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TokenReviewStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TokenReviewStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenReviewStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.authentication.v1.UserInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UserInfo {
    // message fields
    // @@protoc_insertion_point(field:api.authentication.v1.UserInfo.username)
    pub username: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.authentication.v1.UserInfo.uid)
    pub uid: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.UserInfo.groups)
    pub groups: ::std::vec::Vec<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.authentication.v1.UserInfo.extra)
    pub extra: ::std::collections::BTreeMap<::std::string::String, ExtraValue>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.authentication.v1.UserInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UserInfo {
    fn default() -> &'a UserInfo {
        <UserInfo as ::protobuf::Message>::default_instance()
    }
}

impl UserInfo {
    pub fn new() -> UserInfo {
        ::std::default::Default::default()
    }

    // optional string username = 1;

    pub fn username(&self) -> &str {
        match self.username.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_username(&mut self) {
        self.username = ::std::option::Option::None;
    }

    pub fn has_username(&self) -> bool {
        self.username.is_some()
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        if self.username.is_none() {
            self.username = ::std::option::Option::Some(::std::string::String::new());
        }
        self.username.as_mut().unwrap()
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        self.username.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string uid = 2;

    pub fn uid(&self) -> &str {
        match self.uid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_uid(&mut self) {
        self.uid = ::std::option::Option::None;
    }

    pub fn has_uid(&self) -> bool {
        self.uid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uid(&mut self, v: ::std::string::String) {
        self.uid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uid(&mut self) -> &mut ::std::string::String {
        if self.uid.is_none() {
            self.uid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.uid.as_mut().unwrap()
    }

    // Take field
    pub fn take_uid(&mut self) -> ::std::string::String {
        self.uid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string groups = 3;

    pub fn groups(&self) -> &[::std::string::String] {
        &self.groups
    }

    pub fn clear_groups(&mut self) {
        self.groups.clear();
    }

    // Param is passed by value, moved
    pub fn set_groups(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.groups = v;
    }

    // Mutable pointer to the field.
    pub fn mut_groups(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.groups
    }

    // Take field
    pub fn take_groups(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.groups, ::std::vec::Vec::new())
    }

    // repeated .api.authentication.v1.UserInfo.ExtraEntry extra = 4;

    pub fn extra(&self) -> &::std::collections::BTreeMap<::std::string::String, ExtraValue> {
        &self.extra
    }

    pub fn clear_extra(&mut self) {
        self.extra.clear();
    }

    // Param is passed by value, moved
    pub fn set_extra(&mut self, v: ::std::collections::BTreeMap<::std::string::String, ExtraValue>) {
        self.extra = v;
    }

    // Mutable pointer to the field.
    pub fn mut_extra(&mut self) -> &mut ::std::collections::BTreeMap<::std::string::String, ExtraValue> {
        &mut self.extra
    }

    // Take field
    pub fn take_extra(&mut self) -> ::std::collections::BTreeMap<::std::string::String, ExtraValue> {
        ::std::mem::replace(&mut self.extra, ::std::collections::BTreeMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "username",
            |m: &UserInfo| { &m.username },
            |m: &mut UserInfo| { &mut m.username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "uid",
            |m: &UserInfo| { &m.uid },
            |m: &mut UserInfo| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "groups",
            |m: &UserInfo| { &m.groups },
            |m: &mut UserInfo| { &mut m.groups },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "extra",
            |m: &UserInfo| { &m.extra },
            |m: &mut UserInfo| { &mut m.extra },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserInfo>(
            "UserInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UserInfo {
    const NAME: &'static str = "UserInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.username = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.uid = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.groups.push(is.read_string()?);
                },
                34 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.extra.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.username.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.uid.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.groups {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for (k, v) in &self.extra {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.username.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.uid.as_ref() {
            os.write_string(2, v)?;
        }
        for v in &self.groups {
            os.write_string(3, &v)?;
        };
        for (k, v) in &self.extra {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(34)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UserInfo {
        UserInfo::new()
    }

    fn clear(&mut self) {
        self.username = ::std::option::Option::None;
        self.uid = ::std::option::Option::None;
        self.groups.clear();
        self.extra.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UserInfo {
        static instance: ::protobuf::rt::Lazy<UserInfo> = ::protobuf::rt::Lazy::new();
        instance.get(UserInfo::new)
    }
}

impl ::protobuf::MessageFull for UserInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UserInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UserInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%api/authentication/v1/generated.proto\x12\x15api.authentication.v1\
    \x1a-apimachinery/pkg/apis/meta/v1/generated.proto\x1a(apimachinery/pkg/\
    runtime/generated.proto\x1a/apimachinery/pkg/runtime/schema/generated.pr\
    oto\"p\n\x14BoundObjectReference\x12\x12\n\x04kind\x18\x01\x20\x01(\tR\
    \x04kind\x12\x1e\n\napiVersion\x18\x02\x20\x01(\tR\napiVersion\x12\x12\n\
    \x04name\x18\x03\x20\x01(\tR\x04name\x12\x10\n\x03uID\x18\x04\x20\x01(\t\
    R\x03uID\"\"\n\nExtraValue\x12\x14\n\x05items\x18\x01\x20\x03(\tR\x05ite\
    ms\"\xa2\x01\n\x11SelfSubjectReview\x12E\n\x08metadata\x18\x01\x20\x01(\
    \x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\x08metadata\x12F\n\x06s\
    tatus\x18\x02\x20\x01(\x0b2..api.authentication.v1.SelfSubjectReviewStat\
    usR\x06status\"V\n\x17SelfSubjectReviewStatus\x12;\n\x08userInfo\x18\x01\
    \x20\x01(\x0b2\x1f.api.authentication.v1.UserInfoR\x08userInfo\"\xd5\x01\
    \n\x0cTokenRequest\x12E\n\x08metadata\x18\x01\x20\x01(\x0b2).apimachiner\
    y.pkg.apis.meta.v1.ObjectMetaR\x08metadata\x12;\n\x04spec\x18\x02\x20\
    \x01(\x0b2'.api.authentication.v1.TokenRequestSpecR\x04spec\x12A\n\x06st\
    atus\x18\x03\x20\x01(\x0b2).api.authentication.v1.TokenRequestStatusR\
    \x06status\"\xb3\x01\n\x10TokenRequestSpec\x12\x1c\n\taudiences\x18\x01\
    \x20\x03(\tR\taudiences\x12,\n\x11expirationSeconds\x18\x04\x20\x01(\x03\
    R\x11expirationSeconds\x12S\n\x0eboundObjectRef\x18\x03\x20\x01(\x0b2+.a\
    pi.authentication.v1.BoundObjectReferenceR\x0eboundObjectRef\"\x81\x01\n\
    \x12TokenRequestStatus\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\
    \x12U\n\x13expirationTimestamp\x18\x02\x20\x01(\x0b2#.apimachinery.pkg.a\
    pis.meta.v1.TimeR\x13expirationTimestamp\"\xd2\x01\n\x0bTokenReview\x12E\
    \n\x08metadata\x18\x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.Obje\
    ctMetaR\x08metadata\x12:\n\x04spec\x18\x02\x20\x01(\x0b2&.api.authentica\
    tion.v1.TokenReviewSpecR\x04spec\x12@\n\x06status\x18\x03\x20\x01(\x0b2(\
    .api.authentication.v1.TokenReviewStatusR\x06status\"E\n\x0fTokenReviewS\
    pec\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\x12\x1c\n\taudiences\
    \x18\x02\x20\x03(\tR\taudiences\"\xa2\x01\n\x11TokenReviewStatus\x12$\n\
    \rauthenticated\x18\x01\x20\x01(\x08R\rauthenticated\x123\n\x04user\x18\
    \x02\x20\x01(\x0b2\x1f.api.authentication.v1.UserInfoR\x04user\x12\x1c\n\
    \taudiences\x18\x04\x20\x03(\tR\taudiences\x12\x14\n\x05error\x18\x03\
    \x20\x01(\tR\x05error\"\xef\x01\n\x08UserInfo\x12\x1a\n\x08username\x18\
    \x01\x20\x01(\tR\x08username\x12\x10\n\x03uid\x18\x02\x20\x01(\tR\x03uid\
    \x12\x16\n\x06groups\x18\x03\x20\x03(\tR\x06groups\x12@\n\x05extra\x18\
    \x04\x20\x03(\x0b2*.api.authentication.v1.UserInfo.ExtraEntryR\x05extra\
    \x1a[\n\nExtraEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x127\n\
    \x05value\x18\x02\x20\x01(\x0b2!.api.authentication.v1.ExtraValueR\x05va\
    lue:\x028\x01B\x1eZ\x1ck8s.io/api/authentication/v1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(BoundObjectReference::generated_message_descriptor_data());
            messages.push(ExtraValue::generated_message_descriptor_data());
            messages.push(SelfSubjectReview::generated_message_descriptor_data());
            messages.push(SelfSubjectReviewStatus::generated_message_descriptor_data());
            messages.push(TokenRequest::generated_message_descriptor_data());
            messages.push(TokenRequestSpec::generated_message_descriptor_data());
            messages.push(TokenRequestStatus::generated_message_descriptor_data());
            messages.push(TokenReview::generated_message_descriptor_data());
            messages.push(TokenReviewSpec::generated_message_descriptor_data());
            messages.push(TokenReviewStatus::generated_message_descriptor_data());
            messages.push(UserInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
