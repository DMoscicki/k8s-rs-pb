// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/admission/v1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.admission.v1.AdmissionRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AdmissionRequest {
    // message fields
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.uid)
    pub uid: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.kind)
    pub kind: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.resource)
    pub resource: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource>,
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.subResource)
    pub subResource: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.requestKind)
    pub requestKind: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.requestResource)
    pub requestResource: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource>,
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.requestSubResource)
    pub requestSubResource: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.namespace)
    pub namespace: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.operation)
    pub operation: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.userInfo)
    pub userInfo: ::protobuf::MessageField<crate::api::authentication::v1::UserInfo>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.object)
    pub object: ::protobuf::MessageField<crate::apimachinery::pkg::runtime::RawExtension>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.oldObject)
    pub oldObject: ::protobuf::MessageField<crate::apimachinery::pkg::runtime::RawExtension>,
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.dryRun)
    pub dryRun: ::std::option::Option<bool>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionRequest.options)
    pub options: ::protobuf::MessageField<crate::apimachinery::pkg::runtime::RawExtension>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.admission.v1.AdmissionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AdmissionRequest {
    fn default() -> &'a AdmissionRequest {
        <AdmissionRequest as ::protobuf::Message>::default_instance()
    }
}

impl AdmissionRequest {
    pub fn new() -> AdmissionRequest {
        ::std::default::Default::default()
    }

    // optional string uid = 1;

    pub fn uid(&self) -> &str {
        match self.uid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_uid(&mut self) {
        self.uid = ::std::option::Option::None;
    }

    pub fn has_uid(&self) -> bool {
        self.uid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uid(&mut self, v: ::std::string::String) {
        self.uid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uid(&mut self) -> &mut ::std::string::String {
        if self.uid.is_none() {
            self.uid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.uid.as_mut().unwrap()
    }

    // Take field
    pub fn take_uid(&mut self) -> ::std::string::String {
        self.uid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.GroupVersionKind kind = 2;

    pub fn kind(&self) -> &crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind {
        self.kind.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind as ::protobuf::Message>::default_instance())
    }

    pub fn clear_kind(&mut self) {
        self.kind.clear();
    }

    pub fn has_kind(&self) -> bool {
        self.kind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind) {
        self.kind = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind {
        self.kind.mut_or_insert_default()
    }

    // Take field
    pub fn take_kind(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind {
        self.kind.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.GroupVersionResource resource = 3;

    pub fn resource(&self) -> &crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource {
        self.resource.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource as ::protobuf::Message>::default_instance())
    }

    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource) {
        self.resource = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource {
        self.resource.mut_or_insert_default()
    }

    // Take field
    pub fn take_resource(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource {
        self.resource.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource::new())
    }

    // optional string subResource = 4;

    pub fn subResource(&self) -> &str {
        match self.subResource.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_subResource(&mut self) {
        self.subResource = ::std::option::Option::None;
    }

    pub fn has_subResource(&self) -> bool {
        self.subResource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_subResource(&mut self, v: ::std::string::String) {
        self.subResource = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subResource(&mut self) -> &mut ::std::string::String {
        if self.subResource.is_none() {
            self.subResource = ::std::option::Option::Some(::std::string::String::new());
        }
        self.subResource.as_mut().unwrap()
    }

    // Take field
    pub fn take_subResource(&mut self) -> ::std::string::String {
        self.subResource.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.GroupVersionKind requestKind = 13;

    pub fn requestKind(&self) -> &crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind {
        self.requestKind.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind as ::protobuf::Message>::default_instance())
    }

    pub fn clear_requestKind(&mut self) {
        self.requestKind.clear();
    }

    pub fn has_requestKind(&self) -> bool {
        self.requestKind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestKind(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind) {
        self.requestKind = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requestKind(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind {
        self.requestKind.mut_or_insert_default()
    }

    // Take field
    pub fn take_requestKind(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind {
        self.requestKind.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.GroupVersionResource requestResource = 14;

    pub fn requestResource(&self) -> &crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource {
        self.requestResource.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource as ::protobuf::Message>::default_instance())
    }

    pub fn clear_requestResource(&mut self) {
        self.requestResource.clear();
    }

    pub fn has_requestResource(&self) -> bool {
        self.requestResource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestResource(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource) {
        self.requestResource = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requestResource(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource {
        self.requestResource.mut_or_insert_default()
    }

    // Take field
    pub fn take_requestResource(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource {
        self.requestResource.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource::new())
    }

    // optional string requestSubResource = 15;

    pub fn requestSubResource(&self) -> &str {
        match self.requestSubResource.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_requestSubResource(&mut self) {
        self.requestSubResource = ::std::option::Option::None;
    }

    pub fn has_requestSubResource(&self) -> bool {
        self.requestSubResource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestSubResource(&mut self, v: ::std::string::String) {
        self.requestSubResource = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requestSubResource(&mut self) -> &mut ::std::string::String {
        if self.requestSubResource.is_none() {
            self.requestSubResource = ::std::option::Option::Some(::std::string::String::new());
        }
        self.requestSubResource.as_mut().unwrap()
    }

    // Take field
    pub fn take_requestSubResource(&mut self) -> ::std::string::String {
        self.requestSubResource.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string name = 5;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string namespace = 6;

    pub fn namespace(&self) -> &str {
        match self.namespace.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_namespace(&mut self) {
        self.namespace = ::std::option::Option::None;
    }

    pub fn has_namespace(&self) -> bool {
        self.namespace.is_some()
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        if self.namespace.is_none() {
            self.namespace = ::std::option::Option::Some(::std::string::String::new());
        }
        self.namespace.as_mut().unwrap()
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        self.namespace.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string operation = 7;

    pub fn operation(&self) -> &str {
        match self.operation.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_operation(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_operation(&self) -> bool {
        self.operation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operation(&mut self, v: ::std::string::String) {
        self.operation = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operation(&mut self) -> &mut ::std::string::String {
        if self.operation.is_none() {
            self.operation = ::std::option::Option::Some(::std::string::String::new());
        }
        self.operation.as_mut().unwrap()
    }

    // Take field
    pub fn take_operation(&mut self) -> ::std::string::String {
        self.operation.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.authentication.v1.UserInfo userInfo = 8;

    pub fn userInfo(&self) -> &crate::api::authentication::v1::UserInfo {
        self.userInfo.as_ref().unwrap_or_else(|| <crate::api::authentication::v1::UserInfo as ::protobuf::Message>::default_instance())
    }

    pub fn clear_userInfo(&mut self) {
        self.userInfo.clear();
    }

    pub fn has_userInfo(&self) -> bool {
        self.userInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_userInfo(&mut self, v: crate::api::authentication::v1::UserInfo) {
        self.userInfo = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_userInfo(&mut self) -> &mut crate::api::authentication::v1::UserInfo {
        self.userInfo.mut_or_insert_default()
    }

    // Take field
    pub fn take_userInfo(&mut self) -> crate::api::authentication::v1::UserInfo {
        self.userInfo.take().unwrap_or_else(|| crate::api::authentication::v1::UserInfo::new())
    }

    // optional .apimachinery.pkg.runtime.RawExtension object = 9;

    pub fn object(&self) -> &crate::apimachinery::pkg::runtime::RawExtension {
        self.object.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::runtime::RawExtension as ::protobuf::Message>::default_instance())
    }

    pub fn clear_object(&mut self) {
        self.object.clear();
    }

    pub fn has_object(&self) -> bool {
        self.object.is_some()
    }

    // Param is passed by value, moved
    pub fn set_object(&mut self, v: crate::apimachinery::pkg::runtime::RawExtension) {
        self.object = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_object(&mut self) -> &mut crate::apimachinery::pkg::runtime::RawExtension {
        self.object.mut_or_insert_default()
    }

    // Take field
    pub fn take_object(&mut self) -> crate::apimachinery::pkg::runtime::RawExtension {
        self.object.take().unwrap_or_else(|| crate::apimachinery::pkg::runtime::RawExtension::new())
    }

    // optional .apimachinery.pkg.runtime.RawExtension oldObject = 10;

    pub fn oldObject(&self) -> &crate::apimachinery::pkg::runtime::RawExtension {
        self.oldObject.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::runtime::RawExtension as ::protobuf::Message>::default_instance())
    }

    pub fn clear_oldObject(&mut self) {
        self.oldObject.clear();
    }

    pub fn has_oldObject(&self) -> bool {
        self.oldObject.is_some()
    }

    // Param is passed by value, moved
    pub fn set_oldObject(&mut self, v: crate::apimachinery::pkg::runtime::RawExtension) {
        self.oldObject = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oldObject(&mut self) -> &mut crate::apimachinery::pkg::runtime::RawExtension {
        self.oldObject.mut_or_insert_default()
    }

    // Take field
    pub fn take_oldObject(&mut self) -> crate::apimachinery::pkg::runtime::RawExtension {
        self.oldObject.take().unwrap_or_else(|| crate::apimachinery::pkg::runtime::RawExtension::new())
    }

    // optional bool dryRun = 11;

    pub fn dryRun(&self) -> bool {
        self.dryRun.unwrap_or(false)
    }

    pub fn clear_dryRun(&mut self) {
        self.dryRun = ::std::option::Option::None;
    }

    pub fn has_dryRun(&self) -> bool {
        self.dryRun.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dryRun(&mut self, v: bool) {
        self.dryRun = ::std::option::Option::Some(v);
    }

    // optional .apimachinery.pkg.runtime.RawExtension options = 12;

    pub fn options(&self) -> &crate::apimachinery::pkg::runtime::RawExtension {
        self.options.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::runtime::RawExtension as ::protobuf::Message>::default_instance())
    }

    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: crate::apimachinery::pkg::runtime::RawExtension) {
        self.options = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut crate::apimachinery::pkg::runtime::RawExtension {
        self.options.mut_or_insert_default()
    }

    // Take field
    pub fn take_options(&mut self) -> crate::apimachinery::pkg::runtime::RawExtension {
        self.options.take().unwrap_or_else(|| crate::apimachinery::pkg::runtime::RawExtension::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "uid",
            |m: &AdmissionRequest| { &m.uid },
            |m: &mut AdmissionRequest| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind>(
            "kind",
            |m: &AdmissionRequest| { &m.kind },
            |m: &mut AdmissionRequest| { &mut m.kind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource>(
            "resource",
            |m: &AdmissionRequest| { &m.resource },
            |m: &mut AdmissionRequest| { &mut m.resource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "subResource",
            |m: &AdmissionRequest| { &m.subResource },
            |m: &mut AdmissionRequest| { &mut m.subResource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::GroupVersionKind>(
            "requestKind",
            |m: &AdmissionRequest| { &m.requestKind },
            |m: &mut AdmissionRequest| { &mut m.requestKind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::GroupVersionResource>(
            "requestResource",
            |m: &AdmissionRequest| { &m.requestResource },
            |m: &mut AdmissionRequest| { &mut m.requestResource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "requestSubResource",
            |m: &AdmissionRequest| { &m.requestSubResource },
            |m: &mut AdmissionRequest| { &mut m.requestSubResource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &AdmissionRequest| { &m.name },
            |m: &mut AdmissionRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "namespace",
            |m: &AdmissionRequest| { &m.namespace },
            |m: &mut AdmissionRequest| { &mut m.namespace },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "operation",
            |m: &AdmissionRequest| { &m.operation },
            |m: &mut AdmissionRequest| { &mut m.operation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::api::authentication::v1::UserInfo>(
            "userInfo",
            |m: &AdmissionRequest| { &m.userInfo },
            |m: &mut AdmissionRequest| { &mut m.userInfo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::runtime::RawExtension>(
            "object",
            |m: &AdmissionRequest| { &m.object },
            |m: &mut AdmissionRequest| { &mut m.object },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::runtime::RawExtension>(
            "oldObject",
            |m: &AdmissionRequest| { &m.oldObject },
            |m: &mut AdmissionRequest| { &mut m.oldObject },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "dryRun",
            |m: &AdmissionRequest| { &m.dryRun },
            |m: &mut AdmissionRequest| { &mut m.dryRun },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::runtime::RawExtension>(
            "options",
            |m: &AdmissionRequest| { &m.options },
            |m: &mut AdmissionRequest| { &mut m.options },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AdmissionRequest>(
            "AdmissionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AdmissionRequest {
    const NAME: &'static str = "AdmissionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uid = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.kind)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resource)?;
                },
                34 => {
                    self.subResource = ::std::option::Option::Some(is.read_string()?);
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.requestKind)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.requestResource)?;
                },
                122 => {
                    self.requestSubResource = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.namespace = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.operation = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.userInfo)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.object)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.oldObject)?;
                },
                88 => {
                    self.dryRun = ::std::option::Option::Some(is.read_bool()?);
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.options)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.uid.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.kind.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.subResource.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.requestKind.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.requestResource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.requestSubResource.as_ref() {
            my_size += ::protobuf::rt::string_size(15, &v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.namespace.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.operation.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.userInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.object.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.oldObject.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.dryRun {
            my_size += 1 + 1;
        }
        if let Some(v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.uid.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.kind.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.resource.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.subResource.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.requestKind.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.requestResource.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.requestSubResource.as_ref() {
            os.write_string(15, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.namespace.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.operation.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.userInfo.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.object.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.oldObject.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.dryRun {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.options.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AdmissionRequest {
        AdmissionRequest::new()
    }

    fn clear(&mut self) {
        self.uid = ::std::option::Option::None;
        self.kind.clear();
        self.resource.clear();
        self.subResource = ::std::option::Option::None;
        self.requestKind.clear();
        self.requestResource.clear();
        self.requestSubResource = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.namespace = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.userInfo.clear();
        self.object.clear();
        self.oldObject.clear();
        self.dryRun = ::std::option::Option::None;
        self.options.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AdmissionRequest {
        static instance: AdmissionRequest = AdmissionRequest {
            uid: ::std::option::Option::None,
            kind: ::protobuf::MessageField::none(),
            resource: ::protobuf::MessageField::none(),
            subResource: ::std::option::Option::None,
            requestKind: ::protobuf::MessageField::none(),
            requestResource: ::protobuf::MessageField::none(),
            requestSubResource: ::std::option::Option::None,
            name: ::std::option::Option::None,
            namespace: ::std::option::Option::None,
            operation: ::std::option::Option::None,
            userInfo: ::protobuf::MessageField::none(),
            object: ::protobuf::MessageField::none(),
            oldObject: ::protobuf::MessageField::none(),
            dryRun: ::std::option::Option::None,
            options: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AdmissionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AdmissionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AdmissionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdmissionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.admission.v1.AdmissionResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AdmissionResponse {
    // message fields
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionResponse.uid)
    pub uid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionResponse.allowed)
    pub allowed: ::std::option::Option<bool>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionResponse.status)
    pub status: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::Status>,
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionResponse.patch)
    pub patch: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionResponse.patchType)
    pub patchType: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionResponse.auditAnnotations)
    pub auditAnnotations: ::std::collections::BTreeMap<::std::string::String, ::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionResponse.warnings)
    pub warnings: ::std::vec::Vec<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.admission.v1.AdmissionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AdmissionResponse {
    fn default() -> &'a AdmissionResponse {
        <AdmissionResponse as ::protobuf::Message>::default_instance()
    }
}

impl AdmissionResponse {
    pub fn new() -> AdmissionResponse {
        ::std::default::Default::default()
    }

    // optional string uid = 1;

    pub fn uid(&self) -> &str {
        match self.uid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_uid(&mut self) {
        self.uid = ::std::option::Option::None;
    }

    pub fn has_uid(&self) -> bool {
        self.uid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uid(&mut self, v: ::std::string::String) {
        self.uid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uid(&mut self) -> &mut ::std::string::String {
        if self.uid.is_none() {
            self.uid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.uid.as_mut().unwrap()
    }

    // Take field
    pub fn take_uid(&mut self) -> ::std::string::String {
        self.uid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool allowed = 2;

    pub fn allowed(&self) -> bool {
        self.allowed.unwrap_or(false)
    }

    pub fn clear_allowed(&mut self) {
        self.allowed = ::std::option::Option::None;
    }

    pub fn has_allowed(&self) -> bool {
        self.allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allowed(&mut self, v: bool) {
        self.allowed = ::std::option::Option::Some(v);
    }

    // optional .apimachinery.pkg.apis.meta.v1.Status status = 3;

    pub fn status(&self) -> &crate::apimachinery::pkg::apis::meta::v1::Status {
        self.status.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::Status as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::Status) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::Status {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::Status {
        self.status.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::Status::new())
    }

    // optional bytes patch = 4;

    pub fn patch(&self) -> &[u8] {
        match self.patch.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_patch(&mut self) {
        self.patch = ::std::option::Option::None;
    }

    pub fn has_patch(&self) -> bool {
        self.patch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_patch(&mut self, v: ::std::vec::Vec<u8>) {
        self.patch = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_patch(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.patch.is_none() {
            self.patch = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.patch.as_mut().unwrap()
    }

    // Take field
    pub fn take_patch(&mut self) -> ::std::vec::Vec<u8> {
        self.patch.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string patchType = 5;

    pub fn patchType(&self) -> &str {
        match self.patchType.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_patchType(&mut self) {
        self.patchType = ::std::option::Option::None;
    }

    pub fn has_patchType(&self) -> bool {
        self.patchType.is_some()
    }

    // Param is passed by value, moved
    pub fn set_patchType(&mut self, v: ::std::string::String) {
        self.patchType = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_patchType(&mut self) -> &mut ::std::string::String {
        if self.patchType.is_none() {
            self.patchType = ::std::option::Option::Some(::std::string::String::new());
        }
        self.patchType.as_mut().unwrap()
    }

    // Take field
    pub fn take_patchType(&mut self) -> ::std::string::String {
        self.patchType.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .api.admission.v1.AdmissionResponse.AuditAnnotationsEntry auditAnnotations = 6;

    pub fn auditAnnotations(&self) -> &::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        &self.auditAnnotations
    }

    pub fn clear_auditAnnotations(&mut self) {
        self.auditAnnotations.clear();
    }

    // Param is passed by value, moved
    pub fn set_auditAnnotations(&mut self, v: ::std::collections::BTreeMap<::std::string::String, ::std::string::String>) {
        self.auditAnnotations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_auditAnnotations(&mut self) -> &mut ::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        &mut self.auditAnnotations
    }

    // Take field
    pub fn take_auditAnnotations(&mut self) -> ::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.auditAnnotations, ::std::collections::BTreeMap::new())
    }

    // repeated string warnings = 7;

    pub fn warnings(&self) -> &[::std::string::String] {
        &self.warnings
    }

    pub fn clear_warnings(&mut self) {
        self.warnings.clear();
    }

    // Param is passed by value, moved
    pub fn set_warnings(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.warnings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_warnings(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.warnings
    }

    // Take field
    pub fn take_warnings(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.warnings, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "uid",
            |m: &AdmissionResponse| { &m.uid },
            |m: &mut AdmissionResponse| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "allowed",
            |m: &AdmissionResponse| { &m.allowed },
            |m: &mut AdmissionResponse| { &mut m.allowed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::Status>(
            "status",
            |m: &AdmissionResponse| { &m.status },
            |m: &mut AdmissionResponse| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "patch",
            |m: &AdmissionResponse| { &m.patch },
            |m: &mut AdmissionResponse| { &mut m.patch },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "patchType",
            |m: &AdmissionResponse| { &m.patchType },
            |m: &mut AdmissionResponse| { &mut m.patchType },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "auditAnnotations",
            |m: &AdmissionResponse| { &m.auditAnnotations },
            |m: &mut AdmissionResponse| { &mut m.auditAnnotations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "warnings",
            |m: &AdmissionResponse| { &m.warnings },
            |m: &mut AdmissionResponse| { &mut m.warnings },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AdmissionResponse>(
            "AdmissionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AdmissionResponse {
    const NAME: &'static str = "AdmissionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uid = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.allowed = ::std::option::Option::Some(is.read_bool()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                34 => {
                    self.patch = ::std::option::Option::Some(is.read_bytes()?);
                },
                42 => {
                    self.patchType = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.auditAnnotations.insert(key, value);
                },
                58 => {
                    self.warnings.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.uid.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.allowed {
            my_size += 1 + 1;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.patch.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.patchType.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        for (k, v) in &self.auditAnnotations {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.warnings {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.uid.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.allowed {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.patch.as_ref() {
            os.write_bytes(4, v)?;
        }
        if let Some(v) = self.patchType.as_ref() {
            os.write_string(5, v)?;
        }
        for (k, v) in &self.auditAnnotations {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(50)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        for v in &self.warnings {
            os.write_string(7, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AdmissionResponse {
        AdmissionResponse::new()
    }

    fn clear(&mut self) {
        self.uid = ::std::option::Option::None;
        self.allowed = ::std::option::Option::None;
        self.status.clear();
        self.patch = ::std::option::Option::None;
        self.patchType = ::std::option::Option::None;
        self.auditAnnotations.clear();
        self.warnings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AdmissionResponse {
        static instance: ::protobuf::rt::Lazy<AdmissionResponse> = ::protobuf::rt::Lazy::new();
        instance.get(AdmissionResponse::new)
    }
}

impl ::protobuf::MessageFull for AdmissionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AdmissionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AdmissionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdmissionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.admission.v1.AdmissionReview)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AdmissionReview {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionReview.request)
    pub request: ::protobuf::MessageField<AdmissionRequest>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.admission.v1.AdmissionReview.response)
    pub response: ::protobuf::MessageField<AdmissionResponse>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.admission.v1.AdmissionReview.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AdmissionReview {
    fn default() -> &'a AdmissionReview {
        <AdmissionReview as ::protobuf::Message>::default_instance()
    }
}

impl AdmissionReview {
    pub fn new() -> AdmissionReview {
        ::std::default::Default::default()
    }

    // optional .api.admission.v1.AdmissionRequest request = 1;

    pub fn request(&self) -> &AdmissionRequest {
        self.request.as_ref().unwrap_or_else(|| <AdmissionRequest as ::protobuf::Message>::default_instance())
    }

    pub fn clear_request(&mut self) {
        self.request.clear();
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: AdmissionRequest) {
        self.request = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut AdmissionRequest {
        self.request.mut_or_insert_default()
    }

    // Take field
    pub fn take_request(&mut self) -> AdmissionRequest {
        self.request.take().unwrap_or_else(|| AdmissionRequest::new())
    }

    // optional .api.admission.v1.AdmissionResponse response = 2;

    pub fn response(&self) -> &AdmissionResponse {
        self.response.as_ref().unwrap_or_else(|| <AdmissionResponse as ::protobuf::Message>::default_instance())
    }

    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: AdmissionResponse) {
        self.response = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut AdmissionResponse {
        self.response.mut_or_insert_default()
    }

    // Take field
    pub fn take_response(&mut self) -> AdmissionResponse {
        self.response.take().unwrap_or_else(|| AdmissionResponse::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AdmissionRequest>(
            "request",
            |m: &AdmissionReview| { &m.request },
            |m: &mut AdmissionReview| { &mut m.request },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AdmissionResponse>(
            "response",
            |m: &AdmissionReview| { &m.response },
            |m: &mut AdmissionReview| { &mut m.response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AdmissionReview>(
            "AdmissionReview",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AdmissionReview {
    const NAME: &'static str = "AdmissionReview";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.request)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.response)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.request.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AdmissionReview {
        AdmissionReview::new()
    }

    fn clear(&mut self) {
        self.request.clear();
        self.response.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AdmissionReview {
        static instance: AdmissionReview = AdmissionReview {
            request: ::protobuf::MessageField::none(),
            response: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AdmissionReview {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AdmissionReview").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AdmissionReview {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdmissionReview {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20api/admission/v1/generated.proto\x12\x10api.admission.v1\x1a%api/a\
    uthentication/v1/generated.proto\x1a-apimachinery/pkg/apis/meta/v1/gener\
    ated.proto\x1a(apimachinery/pkg/runtime/generated.proto\x1a/apimachinery\
    /pkg/runtime/schema/generated.proto\"\xab\x06\n\x10AdmissionRequest\x12\
    \x10\n\x03uid\x18\x01\x20\x01(\tR\x03uid\x12C\n\x04kind\x18\x02\x20\x01(\
    \x0b2/.apimachinery.pkg.apis.meta.v1.GroupVersionKindR\x04kind\x12O\n\
    \x08resource\x18\x03\x20\x01(\x0b23.apimachinery.pkg.apis.meta.v1.GroupV\
    ersionResourceR\x08resource\x12\x20\n\x0bsubResource\x18\x04\x20\x01(\tR\
    \x0bsubResource\x12Q\n\x0brequestKind\x18\r\x20\x01(\x0b2/.apimachinery.\
    pkg.apis.meta.v1.GroupVersionKindR\x0brequestKind\x12]\n\x0frequestResou\
    rce\x18\x0e\x20\x01(\x0b23.apimachinery.pkg.apis.meta.v1.GroupVersionRes\
    ourceR\x0frequestResource\x12.\n\x12requestSubResource\x18\x0f\x20\x01(\
    \tR\x12requestSubResource\x12\x12\n\x04name\x18\x05\x20\x01(\tR\x04name\
    \x12\x1c\n\tnamespace\x18\x06\x20\x01(\tR\tnamespace\x12\x1c\n\toperatio\
    n\x18\x07\x20\x01(\tR\toperation\x12;\n\x08userInfo\x18\x08\x20\x01(\x0b\
    2\x1f.api.authentication.v1.UserInfoR\x08userInfo\x12>\n\x06object\x18\t\
    \x20\x01(\x0b2&.apimachinery.pkg.runtime.RawExtensionR\x06object\x12D\n\
    \toldObject\x18\n\x20\x01(\x0b2&.apimachinery.pkg.runtime.RawExtensionR\
    \toldObject\x12\x16\n\x06dryRun\x18\x0b\x20\x01(\x08R\x06dryRun\x12@\n\
    \x07options\x18\x0c\x20\x01(\x0b2&.apimachinery.pkg.runtime.RawExtension\
    R\x07options\"\xfa\x02\n\x11AdmissionResponse\x12\x10\n\x03uid\x18\x01\
    \x20\x01(\tR\x03uid\x12\x18\n\x07allowed\x18\x02\x20\x01(\x08R\x07allowe\
    d\x12=\n\x06status\x18\x03\x20\x01(\x0b2%.apimachinery.pkg.apis.meta.v1.\
    StatusR\x06status\x12\x14\n\x05patch\x18\x04\x20\x01(\x0cR\x05patch\x12\
    \x1c\n\tpatchType\x18\x05\x20\x01(\tR\tpatchType\x12e\n\x10auditAnnotati\
    ons\x18\x06\x20\x03(\x0b29.api.admission.v1.AdmissionResponse.AuditAnnot\
    ationsEntryR\x10auditAnnotations\x12\x1a\n\x08warnings\x18\x07\x20\x03(\
    \tR\x08warnings\x1aC\n\x15AuditAnnotationsEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x02\
    8\x01\"\x90\x01\n\x0fAdmissionReview\x12<\n\x07request\x18\x01\x20\x01(\
    \x0b2\".api.admission.v1.AdmissionRequestR\x07request\x12?\n\x08response\
    \x18\x02\x20\x01(\x0b2#.api.admission.v1.AdmissionResponseR\x08responseB\
    \x19Z\x17k8s.io/api/admission/v1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(AdmissionRequest::generated_message_descriptor_data());
            messages.push(AdmissionResponse::generated_message_descriptor_data());
            messages.push(AdmissionReview::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
