// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 28.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/certificates/v1alpha1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.certificates.v1alpha1.ClusterTrustBundle)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClusterTrustBundle {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1alpha1.ClusterTrustBundle.metadata)
    pub metadata: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1alpha1.ClusterTrustBundle.spec)
    pub spec: ::protobuf::MessageField<ClusterTrustBundleSpec>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.certificates.v1alpha1.ClusterTrustBundle.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClusterTrustBundle {
    fn default() -> &'a ClusterTrustBundle {
        <ClusterTrustBundle as ::protobuf::Message>::default_instance()
    }
}

impl ClusterTrustBundle {
    pub fn new() -> ClusterTrustBundle {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.certificates.v1alpha1.ClusterTrustBundleSpec spec = 2;

    pub fn spec(&self) -> &ClusterTrustBundleSpec {
        self.spec.as_ref().unwrap_or_else(|| <ClusterTrustBundleSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: ClusterTrustBundleSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut ClusterTrustBundleSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> ClusterTrustBundleSpec {
        self.spec.take().unwrap_or_else(|| ClusterTrustBundleSpec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &ClusterTrustBundle| { &m.metadata },
            |m: &mut ClusterTrustBundle| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ClusterTrustBundleSpec>(
            "spec",
            |m: &ClusterTrustBundle| { &m.spec },
            |m: &mut ClusterTrustBundle| { &mut m.spec },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClusterTrustBundle>(
            "ClusterTrustBundle",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClusterTrustBundle {
    const NAME: &'static str = "ClusterTrustBundle";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClusterTrustBundle {
        ClusterTrustBundle::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClusterTrustBundle {
        static instance: ClusterTrustBundle = ClusterTrustBundle {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClusterTrustBundle {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClusterTrustBundle").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClusterTrustBundle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterTrustBundle {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.certificates.v1alpha1.ClusterTrustBundleList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClusterTrustBundleList {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1alpha1.ClusterTrustBundleList.metadata)
    pub metadata: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1alpha1.ClusterTrustBundleList.items)
    pub items: ::std::vec::Vec<ClusterTrustBundle>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.certificates.v1alpha1.ClusterTrustBundleList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClusterTrustBundleList {
    fn default() -> &'a ClusterTrustBundleList {
        <ClusterTrustBundleList as ::protobuf::Message>::default_instance()
    }
}

impl ClusterTrustBundleList {
    pub fn new() -> ClusterTrustBundleList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.certificates.v1alpha1.ClusterTrustBundle items = 2;

    pub fn items(&self) -> &[ClusterTrustBundle] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<ClusterTrustBundle>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<ClusterTrustBundle> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<ClusterTrustBundle> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &ClusterTrustBundleList| { &m.metadata },
            |m: &mut ClusterTrustBundleList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &ClusterTrustBundleList| { &m.items },
            |m: &mut ClusterTrustBundleList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClusterTrustBundleList>(
            "ClusterTrustBundleList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClusterTrustBundleList {
    const NAME: &'static str = "ClusterTrustBundleList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClusterTrustBundleList {
        ClusterTrustBundleList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClusterTrustBundleList {
        static instance: ClusterTrustBundleList = ClusterTrustBundleList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClusterTrustBundleList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClusterTrustBundleList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClusterTrustBundleList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterTrustBundleList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.certificates.v1alpha1.ClusterTrustBundleSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClusterTrustBundleSpec {
    // message fields
    // @@protoc_insertion_point(field:api.certificates.v1alpha1.ClusterTrustBundleSpec.signerName)
    pub signerName: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.certificates.v1alpha1.ClusterTrustBundleSpec.trustBundle)
    pub trustBundle: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.certificates.v1alpha1.ClusterTrustBundleSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClusterTrustBundleSpec {
    fn default() -> &'a ClusterTrustBundleSpec {
        <ClusterTrustBundleSpec as ::protobuf::Message>::default_instance()
    }
}

impl ClusterTrustBundleSpec {
    pub fn new() -> ClusterTrustBundleSpec {
        ::std::default::Default::default()
    }

    // optional string signerName = 1;

    pub fn signerName(&self) -> &str {
        match self.signerName.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_signerName(&mut self) {
        self.signerName = ::std::option::Option::None;
    }

    pub fn has_signerName(&self) -> bool {
        self.signerName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signerName(&mut self, v: ::std::string::String) {
        self.signerName = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signerName(&mut self) -> &mut ::std::string::String {
        if self.signerName.is_none() {
            self.signerName = ::std::option::Option::Some(::std::string::String::new());
        }
        self.signerName.as_mut().unwrap()
    }

    // Take field
    pub fn take_signerName(&mut self) -> ::std::string::String {
        self.signerName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string trustBundle = 2;

    pub fn trustBundle(&self) -> &str {
        match self.trustBundle.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_trustBundle(&mut self) {
        self.trustBundle = ::std::option::Option::None;
    }

    pub fn has_trustBundle(&self) -> bool {
        self.trustBundle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trustBundle(&mut self, v: ::std::string::String) {
        self.trustBundle = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trustBundle(&mut self) -> &mut ::std::string::String {
        if self.trustBundle.is_none() {
            self.trustBundle = ::std::option::Option::Some(::std::string::String::new());
        }
        self.trustBundle.as_mut().unwrap()
    }

    // Take field
    pub fn take_trustBundle(&mut self) -> ::std::string::String {
        self.trustBundle.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signerName",
            |m: &ClusterTrustBundleSpec| { &m.signerName },
            |m: &mut ClusterTrustBundleSpec| { &mut m.signerName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "trustBundle",
            |m: &ClusterTrustBundleSpec| { &m.trustBundle },
            |m: &mut ClusterTrustBundleSpec| { &mut m.trustBundle },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClusterTrustBundleSpec>(
            "ClusterTrustBundleSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClusterTrustBundleSpec {
    const NAME: &'static str = "ClusterTrustBundleSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signerName = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.trustBundle = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signerName.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.trustBundle.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signerName.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.trustBundle.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClusterTrustBundleSpec {
        ClusterTrustBundleSpec::new()
    }

    fn clear(&mut self) {
        self.signerName = ::std::option::Option::None;
        self.trustBundle = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClusterTrustBundleSpec {
        static instance: ClusterTrustBundleSpec = ClusterTrustBundleSpec {
            signerName: ::std::option::Option::None,
            trustBundle: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClusterTrustBundleSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClusterTrustBundleSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClusterTrustBundleSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterTrustBundleSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)api/certificates/v1alpha1/generated.proto\x12\x19api.certificates.v1a\
    lpha1\x1a-apimachinery/pkg/apis/meta/v1/generated.proto\x1a(apimachinery\
    /pkg/runtime/generated.proto\x1a/apimachinery/pkg/runtime/schema/generat\
    ed.proto\"\xa2\x01\n\x12ClusterTrustBundle\x12E\n\x08metadata\x18\x01\
    \x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\x08metadata\
    \x12E\n\x04spec\x18\x02\x20\x01(\x0b21.api.certificates.v1alpha1.Cluster\
    TrustBundleSpecR\x04spec\"\xa2\x01\n\x16ClusterTrustBundleList\x12C\n\
    \x08metadata\x18\x01\x20\x01(\x0b2'.apimachinery.pkg.apis.meta.v1.ListMe\
    taR\x08metadata\x12C\n\x05items\x18\x02\x20\x03(\x0b2-.api.certificates.\
    v1alpha1.ClusterTrustBundleR\x05items\"Z\n\x16ClusterTrustBundleSpec\x12\
    \x1e\n\nsignerName\x18\x01\x20\x01(\tR\nsignerName\x12\x20\n\x0btrustBun\
    dle\x18\x02\x20\x01(\tR\x0btrustBundleB\"Z\x20k8s.io/api/certificates/v1\
    alpha1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::v1alpha1::file_descriptor().clone());
            deps.push(super::v1alpha1::file_descriptor().clone());
            deps.push(super::v1alpha1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(ClusterTrustBundle::generated_message_descriptor_data());
            messages.push(ClusterTrustBundleList::generated_message_descriptor_data());
            messages.push(ClusterTrustBundleSpec::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
