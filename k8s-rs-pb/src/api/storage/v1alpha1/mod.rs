// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/storage/v1alpha1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.storage.v1alpha1.CSIStorageCapacity)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSIStorageCapacity {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.CSIStorageCapacity.metadata)
    pub metadata: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.CSIStorageCapacity.nodeTopology)
    pub nodeTopology: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::LabelSelector>,
    // @@protoc_insertion_point(field:api.storage.v1alpha1.CSIStorageCapacity.storageClassName)
    pub storageClassName: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.CSIStorageCapacity.capacity)
    pub capacity: ::protobuf::MessageField<crate::apimachinery::pkg::api::resource::Quantity>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.CSIStorageCapacity.maximumVolumeSize)
    pub maximumVolumeSize: ::protobuf::MessageField<crate::apimachinery::pkg::api::resource::Quantity>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.storage.v1alpha1.CSIStorageCapacity.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSIStorageCapacity {
    fn default() -> &'a CSIStorageCapacity {
        <CSIStorageCapacity as ::protobuf::Message>::default_instance()
    }
}

impl CSIStorageCapacity {
    pub fn new() -> CSIStorageCapacity {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.LabelSelector nodeTopology = 2;

    pub fn nodeTopology(&self) -> &crate::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.nodeTopology.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::LabelSelector as ::protobuf::Message>::default_instance())
    }

    pub fn clear_nodeTopology(&mut self) {
        self.nodeTopology.clear();
    }

    pub fn has_nodeTopology(&self) -> bool {
        self.nodeTopology.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nodeTopology(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::LabelSelector) {
        self.nodeTopology = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nodeTopology(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.nodeTopology.mut_or_insert_default()
    }

    // Take field
    pub fn take_nodeTopology(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.nodeTopology.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::LabelSelector::new())
    }

    // optional string storageClassName = 3;

    pub fn storageClassName(&self) -> &str {
        match self.storageClassName.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_storageClassName(&mut self) {
        self.storageClassName = ::std::option::Option::None;
    }

    pub fn has_storageClassName(&self) -> bool {
        self.storageClassName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_storageClassName(&mut self, v: ::std::string::String) {
        self.storageClassName = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storageClassName(&mut self) -> &mut ::std::string::String {
        if self.storageClassName.is_none() {
            self.storageClassName = ::std::option::Option::Some(::std::string::String::new());
        }
        self.storageClassName.as_mut().unwrap()
    }

    // Take field
    pub fn take_storageClassName(&mut self) -> ::std::string::String {
        self.storageClassName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.api.resource.Quantity capacity = 4;

    pub fn capacity(&self) -> &crate::apimachinery::pkg::api::resource::Quantity {
        self.capacity.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::api::resource::Quantity as ::protobuf::Message>::default_instance())
    }

    pub fn clear_capacity(&mut self) {
        self.capacity.clear();
    }

    pub fn has_capacity(&self) -> bool {
        self.capacity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_capacity(&mut self, v: crate::apimachinery::pkg::api::resource::Quantity) {
        self.capacity = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_capacity(&mut self) -> &mut crate::apimachinery::pkg::api::resource::Quantity {
        self.capacity.mut_or_insert_default()
    }

    // Take field
    pub fn take_capacity(&mut self) -> crate::apimachinery::pkg::api::resource::Quantity {
        self.capacity.take().unwrap_or_else(|| crate::apimachinery::pkg::api::resource::Quantity::new())
    }

    // optional .apimachinery.pkg.api.resource.Quantity maximumVolumeSize = 5;

    pub fn maximumVolumeSize(&self) -> &crate::apimachinery::pkg::api::resource::Quantity {
        self.maximumVolumeSize.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::api::resource::Quantity as ::protobuf::Message>::default_instance())
    }

    pub fn clear_maximumVolumeSize(&mut self) {
        self.maximumVolumeSize.clear();
    }

    pub fn has_maximumVolumeSize(&self) -> bool {
        self.maximumVolumeSize.is_some()
    }

    // Param is passed by value, moved
    pub fn set_maximumVolumeSize(&mut self, v: crate::apimachinery::pkg::api::resource::Quantity) {
        self.maximumVolumeSize = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_maximumVolumeSize(&mut self) -> &mut crate::apimachinery::pkg::api::resource::Quantity {
        self.maximumVolumeSize.mut_or_insert_default()
    }

    // Take field
    pub fn take_maximumVolumeSize(&mut self) -> crate::apimachinery::pkg::api::resource::Quantity {
        self.maximumVolumeSize.take().unwrap_or_else(|| crate::apimachinery::pkg::api::resource::Quantity::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &CSIStorageCapacity| { &m.metadata },
            |m: &mut CSIStorageCapacity| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::LabelSelector>(
            "nodeTopology",
            |m: &CSIStorageCapacity| { &m.nodeTopology },
            |m: &mut CSIStorageCapacity| { &mut m.nodeTopology },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "storageClassName",
            |m: &CSIStorageCapacity| { &m.storageClassName },
            |m: &mut CSIStorageCapacity| { &mut m.storageClassName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::api::resource::Quantity>(
            "capacity",
            |m: &CSIStorageCapacity| { &m.capacity },
            |m: &mut CSIStorageCapacity| { &mut m.capacity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::api::resource::Quantity>(
            "maximumVolumeSize",
            |m: &CSIStorageCapacity| { &m.maximumVolumeSize },
            |m: &mut CSIStorageCapacity| { &mut m.maximumVolumeSize },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSIStorageCapacity>(
            "CSIStorageCapacity",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSIStorageCapacity {
    const NAME: &'static str = "CSIStorageCapacity";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.nodeTopology)?;
                },
                26 => {
                    self.storageClassName = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.capacity)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.maximumVolumeSize)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.nodeTopology.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.storageClassName.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.capacity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.maximumVolumeSize.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.nodeTopology.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.storageClassName.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.capacity.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.maximumVolumeSize.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSIStorageCapacity {
        CSIStorageCapacity::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.nodeTopology.clear();
        self.storageClassName = ::std::option::Option::None;
        self.capacity.clear();
        self.maximumVolumeSize.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSIStorageCapacity {
        static instance: CSIStorageCapacity = CSIStorageCapacity {
            metadata: ::protobuf::MessageField::none(),
            nodeTopology: ::protobuf::MessageField::none(),
            storageClassName: ::std::option::Option::None,
            capacity: ::protobuf::MessageField::none(),
            maximumVolumeSize: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSIStorageCapacity {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSIStorageCapacity").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSIStorageCapacity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSIStorageCapacity {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.storage.v1alpha1.CSIStorageCapacityList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSIStorageCapacityList {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.CSIStorageCapacityList.metadata)
    pub metadata: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.CSIStorageCapacityList.items)
    pub items: ::std::vec::Vec<CSIStorageCapacity>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.storage.v1alpha1.CSIStorageCapacityList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSIStorageCapacityList {
    fn default() -> &'a CSIStorageCapacityList {
        <CSIStorageCapacityList as ::protobuf::Message>::default_instance()
    }
}

impl CSIStorageCapacityList {
    pub fn new() -> CSIStorageCapacityList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.storage.v1alpha1.CSIStorageCapacity items = 2;

    pub fn items(&self) -> &[CSIStorageCapacity] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<CSIStorageCapacity>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<CSIStorageCapacity> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<CSIStorageCapacity> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &CSIStorageCapacityList| { &m.metadata },
            |m: &mut CSIStorageCapacityList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &CSIStorageCapacityList| { &m.items },
            |m: &mut CSIStorageCapacityList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSIStorageCapacityList>(
            "CSIStorageCapacityList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSIStorageCapacityList {
    const NAME: &'static str = "CSIStorageCapacityList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSIStorageCapacityList {
        CSIStorageCapacityList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSIStorageCapacityList {
        static instance: CSIStorageCapacityList = CSIStorageCapacityList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSIStorageCapacityList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSIStorageCapacityList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSIStorageCapacityList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSIStorageCapacityList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.storage.v1alpha1.VolumeAttachment)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VolumeAttachment {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachment.metadata)
    pub metadata: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachment.spec)
    pub spec: ::protobuf::MessageField<VolumeAttachmentSpec>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachment.status)
    pub status: ::protobuf::MessageField<VolumeAttachmentStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.storage.v1alpha1.VolumeAttachment.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VolumeAttachment {
    fn default() -> &'a VolumeAttachment {
        <VolumeAttachment as ::protobuf::Message>::default_instance()
    }
}

impl VolumeAttachment {
    pub fn new() -> VolumeAttachment {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.storage.v1alpha1.VolumeAttachmentSpec spec = 2;

    pub fn spec(&self) -> &VolumeAttachmentSpec {
        self.spec.as_ref().unwrap_or_else(|| <VolumeAttachmentSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: VolumeAttachmentSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut VolumeAttachmentSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> VolumeAttachmentSpec {
        self.spec.take().unwrap_or_else(|| VolumeAttachmentSpec::new())
    }

    // optional .api.storage.v1alpha1.VolumeAttachmentStatus status = 3;

    pub fn status(&self) -> &VolumeAttachmentStatus {
        self.status.as_ref().unwrap_or_else(|| <VolumeAttachmentStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: VolumeAttachmentStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut VolumeAttachmentStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> VolumeAttachmentStatus {
        self.status.take().unwrap_or_else(|| VolumeAttachmentStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &VolumeAttachment| { &m.metadata },
            |m: &mut VolumeAttachment| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, VolumeAttachmentSpec>(
            "spec",
            |m: &VolumeAttachment| { &m.spec },
            |m: &mut VolumeAttachment| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, VolumeAttachmentStatus>(
            "status",
            |m: &VolumeAttachment| { &m.status },
            |m: &mut VolumeAttachment| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VolumeAttachment>(
            "VolumeAttachment",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VolumeAttachment {
    const NAME: &'static str = "VolumeAttachment";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VolumeAttachment {
        VolumeAttachment::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VolumeAttachment {
        static instance: VolumeAttachment = VolumeAttachment {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VolumeAttachment {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VolumeAttachment").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VolumeAttachment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeAttachment {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.storage.v1alpha1.VolumeAttachmentList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VolumeAttachmentList {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachmentList.metadata)
    pub metadata: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachmentList.items)
    pub items: ::std::vec::Vec<VolumeAttachment>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.storage.v1alpha1.VolumeAttachmentList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VolumeAttachmentList {
    fn default() -> &'a VolumeAttachmentList {
        <VolumeAttachmentList as ::protobuf::Message>::default_instance()
    }
}

impl VolumeAttachmentList {
    pub fn new() -> VolumeAttachmentList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.storage.v1alpha1.VolumeAttachment items = 2;

    pub fn items(&self) -> &[VolumeAttachment] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<VolumeAttachment>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<VolumeAttachment> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<VolumeAttachment> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &VolumeAttachmentList| { &m.metadata },
            |m: &mut VolumeAttachmentList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &VolumeAttachmentList| { &m.items },
            |m: &mut VolumeAttachmentList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VolumeAttachmentList>(
            "VolumeAttachmentList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VolumeAttachmentList {
    const NAME: &'static str = "VolumeAttachmentList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VolumeAttachmentList {
        VolumeAttachmentList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VolumeAttachmentList {
        static instance: VolumeAttachmentList = VolumeAttachmentList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VolumeAttachmentList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VolumeAttachmentList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VolumeAttachmentList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeAttachmentList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.storage.v1alpha1.VolumeAttachmentSource)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VolumeAttachmentSource {
    // message fields
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachmentSource.persistentVolumeName)
    pub persistentVolumeName: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachmentSource.inlineVolumeSpec)
    pub inlineVolumeSpec: ::protobuf::MessageField<crate::api::core::v1::PersistentVolumeSpec>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.storage.v1alpha1.VolumeAttachmentSource.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VolumeAttachmentSource {
    fn default() -> &'a VolumeAttachmentSource {
        <VolumeAttachmentSource as ::protobuf::Message>::default_instance()
    }
}

impl VolumeAttachmentSource {
    pub fn new() -> VolumeAttachmentSource {
        ::std::default::Default::default()
    }

    // optional string persistentVolumeName = 1;

    pub fn persistentVolumeName(&self) -> &str {
        match self.persistentVolumeName.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_persistentVolumeName(&mut self) {
        self.persistentVolumeName = ::std::option::Option::None;
    }

    pub fn has_persistentVolumeName(&self) -> bool {
        self.persistentVolumeName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persistentVolumeName(&mut self, v: ::std::string::String) {
        self.persistentVolumeName = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_persistentVolumeName(&mut self) -> &mut ::std::string::String {
        if self.persistentVolumeName.is_none() {
            self.persistentVolumeName = ::std::option::Option::Some(::std::string::String::new());
        }
        self.persistentVolumeName.as_mut().unwrap()
    }

    // Take field
    pub fn take_persistentVolumeName(&mut self) -> ::std::string::String {
        self.persistentVolumeName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.core.v1.PersistentVolumeSpec inlineVolumeSpec = 2;

    pub fn inlineVolumeSpec(&self) -> &crate::api::core::v1::PersistentVolumeSpec {
        self.inlineVolumeSpec.as_ref().unwrap_or_else(|| <crate::api::core::v1::PersistentVolumeSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_inlineVolumeSpec(&mut self) {
        self.inlineVolumeSpec.clear();
    }

    pub fn has_inlineVolumeSpec(&self) -> bool {
        self.inlineVolumeSpec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inlineVolumeSpec(&mut self, v: crate::api::core::v1::PersistentVolumeSpec) {
        self.inlineVolumeSpec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inlineVolumeSpec(&mut self) -> &mut crate::api::core::v1::PersistentVolumeSpec {
        self.inlineVolumeSpec.mut_or_insert_default()
    }

    // Take field
    pub fn take_inlineVolumeSpec(&mut self) -> crate::api::core::v1::PersistentVolumeSpec {
        self.inlineVolumeSpec.take().unwrap_or_else(|| crate::api::core::v1::PersistentVolumeSpec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "persistentVolumeName",
            |m: &VolumeAttachmentSource| { &m.persistentVolumeName },
            |m: &mut VolumeAttachmentSource| { &mut m.persistentVolumeName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::api::core::v1::PersistentVolumeSpec>(
            "inlineVolumeSpec",
            |m: &VolumeAttachmentSource| { &m.inlineVolumeSpec },
            |m: &mut VolumeAttachmentSource| { &mut m.inlineVolumeSpec },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VolumeAttachmentSource>(
            "VolumeAttachmentSource",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VolumeAttachmentSource {
    const NAME: &'static str = "VolumeAttachmentSource";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.persistentVolumeName = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.inlineVolumeSpec)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.persistentVolumeName.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.inlineVolumeSpec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.persistentVolumeName.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.inlineVolumeSpec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VolumeAttachmentSource {
        VolumeAttachmentSource::new()
    }

    fn clear(&mut self) {
        self.persistentVolumeName = ::std::option::Option::None;
        self.inlineVolumeSpec.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VolumeAttachmentSource {
        static instance: VolumeAttachmentSource = VolumeAttachmentSource {
            persistentVolumeName: ::std::option::Option::None,
            inlineVolumeSpec: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VolumeAttachmentSource {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VolumeAttachmentSource").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VolumeAttachmentSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeAttachmentSource {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.storage.v1alpha1.VolumeAttachmentSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VolumeAttachmentSpec {
    // message fields
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachmentSpec.attacher)
    pub attacher: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachmentSpec.source)
    pub source: ::protobuf::MessageField<VolumeAttachmentSource>,
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachmentSpec.nodeName)
    pub nodeName: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.storage.v1alpha1.VolumeAttachmentSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VolumeAttachmentSpec {
    fn default() -> &'a VolumeAttachmentSpec {
        <VolumeAttachmentSpec as ::protobuf::Message>::default_instance()
    }
}

impl VolumeAttachmentSpec {
    pub fn new() -> VolumeAttachmentSpec {
        ::std::default::Default::default()
    }

    // optional string attacher = 1;

    pub fn attacher(&self) -> &str {
        match self.attacher.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_attacher(&mut self) {
        self.attacher = ::std::option::Option::None;
    }

    pub fn has_attacher(&self) -> bool {
        self.attacher.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attacher(&mut self, v: ::std::string::String) {
        self.attacher = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attacher(&mut self) -> &mut ::std::string::String {
        if self.attacher.is_none() {
            self.attacher = ::std::option::Option::Some(::std::string::String::new());
        }
        self.attacher.as_mut().unwrap()
    }

    // Take field
    pub fn take_attacher(&mut self) -> ::std::string::String {
        self.attacher.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.storage.v1alpha1.VolumeAttachmentSource source = 2;

    pub fn source(&self) -> &VolumeAttachmentSource {
        self.source.as_ref().unwrap_or_else(|| <VolumeAttachmentSource as ::protobuf::Message>::default_instance())
    }

    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: VolumeAttachmentSource) {
        self.source = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut VolumeAttachmentSource {
        self.source.mut_or_insert_default()
    }

    // Take field
    pub fn take_source(&mut self) -> VolumeAttachmentSource {
        self.source.take().unwrap_or_else(|| VolumeAttachmentSource::new())
    }

    // optional string nodeName = 3;

    pub fn nodeName(&self) -> &str {
        match self.nodeName.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_nodeName(&mut self) {
        self.nodeName = ::std::option::Option::None;
    }

    pub fn has_nodeName(&self) -> bool {
        self.nodeName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nodeName(&mut self, v: ::std::string::String) {
        self.nodeName = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nodeName(&mut self) -> &mut ::std::string::String {
        if self.nodeName.is_none() {
            self.nodeName = ::std::option::Option::Some(::std::string::String::new());
        }
        self.nodeName.as_mut().unwrap()
    }

    // Take field
    pub fn take_nodeName(&mut self) -> ::std::string::String {
        self.nodeName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "attacher",
            |m: &VolumeAttachmentSpec| { &m.attacher },
            |m: &mut VolumeAttachmentSpec| { &mut m.attacher },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, VolumeAttachmentSource>(
            "source",
            |m: &VolumeAttachmentSpec| { &m.source },
            |m: &mut VolumeAttachmentSpec| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "nodeName",
            |m: &VolumeAttachmentSpec| { &m.nodeName },
            |m: &mut VolumeAttachmentSpec| { &mut m.nodeName },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VolumeAttachmentSpec>(
            "VolumeAttachmentSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VolumeAttachmentSpec {
    const NAME: &'static str = "VolumeAttachmentSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.attacher = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.source)?;
                },
                26 => {
                    self.nodeName = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.attacher.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.nodeName.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.attacher.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.source.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.nodeName.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VolumeAttachmentSpec {
        VolumeAttachmentSpec::new()
    }

    fn clear(&mut self) {
        self.attacher = ::std::option::Option::None;
        self.source.clear();
        self.nodeName = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VolumeAttachmentSpec {
        static instance: VolumeAttachmentSpec = VolumeAttachmentSpec {
            attacher: ::std::option::Option::None,
            source: ::protobuf::MessageField::none(),
            nodeName: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VolumeAttachmentSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VolumeAttachmentSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VolumeAttachmentSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeAttachmentSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.storage.v1alpha1.VolumeAttachmentStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VolumeAttachmentStatus {
    // message fields
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachmentStatus.attached)
    pub attached: ::std::option::Option<bool>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachmentStatus.attachmentMetadata)
    pub attachmentMetadata: ::std::collections::BTreeMap<::std::string::String, ::std::string::String>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachmentStatus.attachError)
    pub attachError: ::protobuf::MessageField<VolumeError>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttachmentStatus.detachError)
    pub detachError: ::protobuf::MessageField<VolumeError>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.storage.v1alpha1.VolumeAttachmentStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VolumeAttachmentStatus {
    fn default() -> &'a VolumeAttachmentStatus {
        <VolumeAttachmentStatus as ::protobuf::Message>::default_instance()
    }
}

impl VolumeAttachmentStatus {
    pub fn new() -> VolumeAttachmentStatus {
        ::std::default::Default::default()
    }

    // optional bool attached = 1;

    pub fn attached(&self) -> bool {
        self.attached.unwrap_or(false)
    }

    pub fn clear_attached(&mut self) {
        self.attached = ::std::option::Option::None;
    }

    pub fn has_attached(&self) -> bool {
        self.attached.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attached(&mut self, v: bool) {
        self.attached = ::std::option::Option::Some(v);
    }

    // repeated .api.storage.v1alpha1.VolumeAttachmentStatus.AttachmentMetadataEntry attachmentMetadata = 2;

    pub fn attachmentMetadata(&self) -> &::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        &self.attachmentMetadata
    }

    pub fn clear_attachmentMetadata(&mut self) {
        self.attachmentMetadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_attachmentMetadata(&mut self, v: ::std::collections::BTreeMap<::std::string::String, ::std::string::String>) {
        self.attachmentMetadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attachmentMetadata(&mut self) -> &mut ::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        &mut self.attachmentMetadata
    }

    // Take field
    pub fn take_attachmentMetadata(&mut self) -> ::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.attachmentMetadata, ::std::collections::BTreeMap::new())
    }

    // optional .api.storage.v1alpha1.VolumeError attachError = 3;

    pub fn attachError(&self) -> &VolumeError {
        self.attachError.as_ref().unwrap_or_else(|| <VolumeError as ::protobuf::Message>::default_instance())
    }

    pub fn clear_attachError(&mut self) {
        self.attachError.clear();
    }

    pub fn has_attachError(&self) -> bool {
        self.attachError.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attachError(&mut self, v: VolumeError) {
        self.attachError = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attachError(&mut self) -> &mut VolumeError {
        self.attachError.mut_or_insert_default()
    }

    // Take field
    pub fn take_attachError(&mut self) -> VolumeError {
        self.attachError.take().unwrap_or_else(|| VolumeError::new())
    }

    // optional .api.storage.v1alpha1.VolumeError detachError = 4;

    pub fn detachError(&self) -> &VolumeError {
        self.detachError.as_ref().unwrap_or_else(|| <VolumeError as ::protobuf::Message>::default_instance())
    }

    pub fn clear_detachError(&mut self) {
        self.detachError.clear();
    }

    pub fn has_detachError(&self) -> bool {
        self.detachError.is_some()
    }

    // Param is passed by value, moved
    pub fn set_detachError(&mut self, v: VolumeError) {
        self.detachError = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_detachError(&mut self) -> &mut VolumeError {
        self.detachError.mut_or_insert_default()
    }

    // Take field
    pub fn take_detachError(&mut self) -> VolumeError {
        self.detachError.take().unwrap_or_else(|| VolumeError::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "attached",
            |m: &VolumeAttachmentStatus| { &m.attached },
            |m: &mut VolumeAttachmentStatus| { &mut m.attached },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "attachmentMetadata",
            |m: &VolumeAttachmentStatus| { &m.attachmentMetadata },
            |m: &mut VolumeAttachmentStatus| { &mut m.attachmentMetadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, VolumeError>(
            "attachError",
            |m: &VolumeAttachmentStatus| { &m.attachError },
            |m: &mut VolumeAttachmentStatus| { &mut m.attachError },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, VolumeError>(
            "detachError",
            |m: &VolumeAttachmentStatus| { &m.detachError },
            |m: &mut VolumeAttachmentStatus| { &mut m.detachError },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VolumeAttachmentStatus>(
            "VolumeAttachmentStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VolumeAttachmentStatus {
    const NAME: &'static str = "VolumeAttachmentStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.attached = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.attachmentMetadata.insert(key, value);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.attachError)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.detachError)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.attached {
            my_size += 1 + 1;
        }
        for (k, v) in &self.attachmentMetadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.attachError.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.detachError.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.attached {
            os.write_bool(1, v)?;
        }
        for (k, v) in &self.attachmentMetadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.attachError.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.detachError.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VolumeAttachmentStatus {
        VolumeAttachmentStatus::new()
    }

    fn clear(&mut self) {
        self.attached = ::std::option::Option::None;
        self.attachmentMetadata.clear();
        self.attachError.clear();
        self.detachError.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VolumeAttachmentStatus {
        static instance: ::protobuf::rt::Lazy<VolumeAttachmentStatus> = ::protobuf::rt::Lazy::new();
        instance.get(VolumeAttachmentStatus::new)
    }
}

impl ::protobuf::MessageFull for VolumeAttachmentStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VolumeAttachmentStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VolumeAttachmentStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeAttachmentStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.storage.v1alpha1.VolumeAttributesClass)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VolumeAttributesClass {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttributesClass.metadata)
    pub metadata: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttributesClass.driverName)
    pub driverName: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttributesClass.parameters)
    pub parameters: ::std::collections::BTreeMap<::std::string::String, ::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.storage.v1alpha1.VolumeAttributesClass.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VolumeAttributesClass {
    fn default() -> &'a VolumeAttributesClass {
        <VolumeAttributesClass as ::protobuf::Message>::default_instance()
    }
}

impl VolumeAttributesClass {
    pub fn new() -> VolumeAttributesClass {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional string driverName = 2;

    pub fn driverName(&self) -> &str {
        match self.driverName.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_driverName(&mut self) {
        self.driverName = ::std::option::Option::None;
    }

    pub fn has_driverName(&self) -> bool {
        self.driverName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_driverName(&mut self, v: ::std::string::String) {
        self.driverName = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driverName(&mut self) -> &mut ::std::string::String {
        if self.driverName.is_none() {
            self.driverName = ::std::option::Option::Some(::std::string::String::new());
        }
        self.driverName.as_mut().unwrap()
    }

    // Take field
    pub fn take_driverName(&mut self) -> ::std::string::String {
        self.driverName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .api.storage.v1alpha1.VolumeAttributesClass.ParametersEntry parameters = 3;

    pub fn parameters(&self) -> &::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        &self.parameters
    }

    pub fn clear_parameters(&mut self) {
        self.parameters.clear();
    }

    // Param is passed by value, moved
    pub fn set_parameters(&mut self, v: ::std::collections::BTreeMap<::std::string::String, ::std::string::String>) {
        self.parameters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_parameters(&mut self) -> &mut ::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        &mut self.parameters
    }

    // Take field
    pub fn take_parameters(&mut self) -> ::std::collections::BTreeMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.parameters, ::std::collections::BTreeMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &VolumeAttributesClass| { &m.metadata },
            |m: &mut VolumeAttributesClass| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "driverName",
            |m: &VolumeAttributesClass| { &m.driverName },
            |m: &mut VolumeAttributesClass| { &mut m.driverName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "parameters",
            |m: &VolumeAttributesClass| { &m.parameters },
            |m: &mut VolumeAttributesClass| { &mut m.parameters },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VolumeAttributesClass>(
            "VolumeAttributesClass",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VolumeAttributesClass {
    const NAME: &'static str = "VolumeAttributesClass";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.driverName = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.parameters.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.driverName.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for (k, v) in &self.parameters {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.driverName.as_ref() {
            os.write_string(2, v)?;
        }
        for (k, v) in &self.parameters {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VolumeAttributesClass {
        VolumeAttributesClass::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.driverName = ::std::option::Option::None;
        self.parameters.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VolumeAttributesClass {
        static instance: ::protobuf::rt::Lazy<VolumeAttributesClass> = ::protobuf::rt::Lazy::new();
        instance.get(VolumeAttributesClass::new)
    }
}

impl ::protobuf::MessageFull for VolumeAttributesClass {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VolumeAttributesClass").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VolumeAttributesClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeAttributesClass {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.storage.v1alpha1.VolumeAttributesClassList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VolumeAttributesClassList {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttributesClassList.metadata)
    pub metadata: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeAttributesClassList.items)
    pub items: ::std::vec::Vec<VolumeAttributesClass>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.storage.v1alpha1.VolumeAttributesClassList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VolumeAttributesClassList {
    fn default() -> &'a VolumeAttributesClassList {
        <VolumeAttributesClassList as ::protobuf::Message>::default_instance()
    }
}

impl VolumeAttributesClassList {
    pub fn new() -> VolumeAttributesClassList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.storage.v1alpha1.VolumeAttributesClass items = 2;

    pub fn items(&self) -> &[VolumeAttributesClass] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<VolumeAttributesClass>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<VolumeAttributesClass> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<VolumeAttributesClass> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &VolumeAttributesClassList| { &m.metadata },
            |m: &mut VolumeAttributesClassList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &VolumeAttributesClassList| { &m.items },
            |m: &mut VolumeAttributesClassList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VolumeAttributesClassList>(
            "VolumeAttributesClassList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VolumeAttributesClassList {
    const NAME: &'static str = "VolumeAttributesClassList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VolumeAttributesClassList {
        VolumeAttributesClassList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VolumeAttributesClassList {
        static instance: VolumeAttributesClassList = VolumeAttributesClassList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VolumeAttributesClassList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VolumeAttributesClassList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VolumeAttributesClassList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeAttributesClassList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.storage.v1alpha1.VolumeError)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VolumeError {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeError.time)
    pub time: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:api.storage.v1alpha1.VolumeError.message)
    pub message: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.storage.v1alpha1.VolumeError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VolumeError {
    fn default() -> &'a VolumeError {
        <VolumeError as ::protobuf::Message>::default_instance()
    }
}

impl VolumeError {
    pub fn new() -> VolumeError {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time time = 1;

    pub fn time(&self) -> &crate::apimachinery::pkg::apis::meta::v1::Time {
        self.time.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::Time) {
        self.time = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::Time {
        self.time.mut_or_insert_default()
    }

    // Take field
    pub fn take_time(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::Time {
        self.time.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional string message = 2;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::Time>(
            "time",
            |m: &VolumeError| { &m.time },
            |m: &mut VolumeError| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &VolumeError| { &m.message },
            |m: &mut VolumeError| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VolumeError>(
            "VolumeError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VolumeError {
    const NAME: &'static str = "VolumeError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.time)?;
                },
                18 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VolumeError {
        VolumeError::new()
    }

    fn clear(&mut self) {
        self.time.clear();
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VolumeError {
        static instance: VolumeError = VolumeError {
            time: ::protobuf::MessageField::none(),
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VolumeError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VolumeError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VolumeError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$api/storage/v1alpha1/generated.proto\x12\x14api.storage.v1alpha1\x1a\
    \x1bapi/core/v1/generated.proto\x1a-apimachinery/pkg/api/resource/genera\
    ted.proto\x1a-apimachinery/pkg/apis/meta/v1/generated.proto\x1a(apimachi\
    nery/pkg/runtime/generated.proto\x1a/apimachinery/pkg/runtime/schema/gen\
    erated.proto\"\xf5\x02\n\x12CSIStorageCapacity\x12E\n\x08metadata\x18\
    \x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\x08metadat\
    a\x12P\n\x0cnodeTopology\x18\x02\x20\x01(\x0b2,.apimachinery.pkg.apis.me\
    ta.v1.LabelSelectorR\x0cnodeTopology\x12*\n\x10storageClassName\x18\x03\
    \x20\x01(\tR\x10storageClassName\x12C\n\x08capacity\x18\x04\x20\x01(\x0b\
    2'.apimachinery.pkg.api.resource.QuantityR\x08capacity\x12U\n\x11maximum\
    VolumeSize\x18\x05\x20\x01(\x0b2'.apimachinery.pkg.api.resource.Quantity\
    R\x11maximumVolumeSize\"\x9d\x01\n\x16CSIStorageCapacityList\x12C\n\x08m\
    etadata\x18\x01\x20\x01(\x0b2'.apimachinery.pkg.apis.meta.v1.ListMetaR\
    \x08metadata\x12>\n\x05items\x18\x02\x20\x03(\x0b2(.api.storage.v1alpha1\
    .CSIStorageCapacityR\x05items\"\xdf\x01\n\x10VolumeAttachment\x12E\n\x08\
    metadata\x18\x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMeta\
    R\x08metadata\x12>\n\x04spec\x18\x02\x20\x01(\x0b2*.api.storage.v1alpha1\
    .VolumeAttachmentSpecR\x04spec\x12D\n\x06status\x18\x03\x20\x01(\x0b2,.a\
    pi.storage.v1alpha1.VolumeAttachmentStatusR\x06status\"\x99\x01\n\x14Vol\
    umeAttachmentList\x12C\n\x08metadata\x18\x01\x20\x01(\x0b2'.apimachinery\
    .pkg.apis.meta.v1.ListMetaR\x08metadata\x12<\n\x05items\x18\x02\x20\x03(\
    \x0b2&.api.storage.v1alpha1.VolumeAttachmentR\x05items\"\x9b\x01\n\x16Vo\
    lumeAttachmentSource\x122\n\x14persistentVolumeName\x18\x01\x20\x01(\tR\
    \x14persistentVolumeName\x12M\n\x10inlineVolumeSpec\x18\x02\x20\x01(\x0b\
    2!.api.core.v1.PersistentVolumeSpecR\x10inlineVolumeSpec\"\x94\x01\n\x14\
    VolumeAttachmentSpec\x12\x1a\n\x08attacher\x18\x01\x20\x01(\tR\x08attach\
    er\x12D\n\x06source\x18\x02\x20\x01(\x0b2,.api.storage.v1alpha1.VolumeAt\
    tachmentSourceR\x06source\x12\x1a\n\x08nodeName\x18\x03\x20\x01(\tR\x08n\
    odeName\"\xfb\x02\n\x16VolumeAttachmentStatus\x12\x1a\n\x08attached\x18\
    \x01\x20\x01(\x08R\x08attached\x12t\n\x12attachmentMetadata\x18\x02\x20\
    \x03(\x0b2D.api.storage.v1alpha1.VolumeAttachmentStatus.AttachmentMetada\
    taEntryR\x12attachmentMetadata\x12C\n\x0battachError\x18\x03\x20\x01(\
    \x0b2!.api.storage.v1alpha1.VolumeErrorR\x0battachError\x12C\n\x0bdetach\
    Error\x18\x04\x20\x01(\x0b2!.api.storage.v1alpha1.VolumeErrorR\x0bdetach\
    Error\x1aE\n\x17AttachmentMetadataEntry\x12\x10\n\x03key\x18\x01\x20\x01\
    (\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\
    \x9a\x02\n\x15VolumeAttributesClass\x12E\n\x08metadata\x18\x01\x20\x01(\
    \x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\x08metadata\x12\x1e\n\n\
    driverName\x18\x02\x20\x01(\tR\ndriverName\x12[\n\nparameters\x18\x03\
    \x20\x03(\x0b2;.api.storage.v1alpha1.VolumeAttributesClass.ParametersEnt\
    ryR\nparameters\x1a=\n\x0fParametersEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\
    \x01\"\xa3\x01\n\x19VolumeAttributesClassList\x12C\n\x08metadata\x18\x01\
    \x20\x01(\x0b2'.apimachinery.pkg.apis.meta.v1.ListMetaR\x08metadata\x12A\
    \n\x05items\x18\x02\x20\x03(\x0b2+.api.storage.v1alpha1.VolumeAttributes\
    ClassR\x05items\"`\n\x0bVolumeError\x127\n\x04time\x18\x01\x20\x01(\x0b2\
    #.apimachinery.pkg.apis.meta.v1.TimeR\x04time\x12\x18\n\x07message\x18\
    \x02\x20\x01(\tR\x07messageB\x1dZ\x1bk8s.io/api/storage/v1alpha1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::v1alpha1::file_descriptor().clone());
            deps.push(super::v1alpha1::file_descriptor().clone());
            deps.push(super::v1alpha1::file_descriptor().clone());
            deps.push(super::v1alpha1::file_descriptor().clone());
            deps.push(super::v1alpha1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(CSIStorageCapacity::generated_message_descriptor_data());
            messages.push(CSIStorageCapacityList::generated_message_descriptor_data());
            messages.push(VolumeAttachment::generated_message_descriptor_data());
            messages.push(VolumeAttachmentList::generated_message_descriptor_data());
            messages.push(VolumeAttachmentSource::generated_message_descriptor_data());
            messages.push(VolumeAttachmentSpec::generated_message_descriptor_data());
            messages.push(VolumeAttachmentStatus::generated_message_descriptor_data());
            messages.push(VolumeAttributesClass::generated_message_descriptor_data());
            messages.push(VolumeAttributesClassList::generated_message_descriptor_data());
            messages.push(VolumeError::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
