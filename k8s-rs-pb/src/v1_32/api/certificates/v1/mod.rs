// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/certificates/v1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.certificates.v1.CertificateSigningRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CertificateSigningRequest {
    // message fields
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequest.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequest.spec)
    pub spec: ::protobuf::MessageField<CertificateSigningRequestSpec>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequest.status)
    pub status: ::protobuf::MessageField<CertificateSigningRequestStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.certificates.v1.CertificateSigningRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CertificateSigningRequest {
    fn default() -> &'a CertificateSigningRequest {
        <CertificateSigningRequest as ::protobuf::Message>::default_instance()
    }
}

impl CertificateSigningRequest {
    pub fn new() -> CertificateSigningRequest {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.certificates.v1.CertificateSigningRequestSpec spec = 2;

    pub fn spec(&self) -> &CertificateSigningRequestSpec {
        self.spec.as_ref().unwrap_or_else(|| <CertificateSigningRequestSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: CertificateSigningRequestSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut CertificateSigningRequestSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> CertificateSigningRequestSpec {
        self.spec.take().unwrap_or_else(|| CertificateSigningRequestSpec::new())
    }

    // optional .api.certificates.v1.CertificateSigningRequestStatus status = 3;

    pub fn status(&self) -> &CertificateSigningRequestStatus {
        self.status.as_ref().unwrap_or_else(|| <CertificateSigningRequestStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: CertificateSigningRequestStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut CertificateSigningRequestStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> CertificateSigningRequestStatus {
        self.status.take().unwrap_or_else(|| CertificateSigningRequestStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &CertificateSigningRequest| { &m.metadata },
            |m: &mut CertificateSigningRequest| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CertificateSigningRequestSpec>(
            "spec",
            |m: &CertificateSigningRequest| { &m.spec },
            |m: &mut CertificateSigningRequest| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CertificateSigningRequestStatus>(
            "status",
            |m: &CertificateSigningRequest| { &m.status },
            |m: &mut CertificateSigningRequest| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CertificateSigningRequest>(
            "CertificateSigningRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CertificateSigningRequest {
    const NAME: &'static str = "CertificateSigningRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CertificateSigningRequest {
        CertificateSigningRequest::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CertificateSigningRequest {
        static instance: CertificateSigningRequest = CertificateSigningRequest {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CertificateSigningRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CertificateSigningRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CertificateSigningRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CertificateSigningRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.certificates.v1.CertificateSigningRequestCondition)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CertificateSigningRequestCondition {
    // message fields
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestCondition.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestCondition.status)
    pub status: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestCondition.reason)
    pub reason: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestCondition.message)
    pub message: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestCondition.lastUpdateTime)
    pub lastUpdateTime: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestCondition.lastTransitionTime)
    pub lastTransitionTime: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.certificates.v1.CertificateSigningRequestCondition.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CertificateSigningRequestCondition {
    fn default() -> &'a CertificateSigningRequestCondition {
        <CertificateSigningRequestCondition as ::protobuf::Message>::default_instance()
    }
}

impl CertificateSigningRequestCondition {
    pub fn new() -> CertificateSigningRequestCondition {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string status = 6;

    pub fn status(&self) -> &str {
        match self.status.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        if self.status.is_none() {
            self.status = ::std::option::Option::Some(::std::string::String::new());
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        self.status.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string reason = 2;

    pub fn reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string message = 3;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 4;

    pub fn lastUpdateTime(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastUpdateTime.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastUpdateTime(&mut self) {
        self.lastUpdateTime.clear();
    }

    pub fn has_lastUpdateTime(&self) -> bool {
        self.lastUpdateTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastUpdateTime(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastUpdateTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastUpdateTime(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastUpdateTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastUpdateTime(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastUpdateTime.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 5;

    pub fn lastTransitionTime(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastTransitionTime(&mut self) {
        self.lastTransitionTime.clear();
    }

    pub fn has_lastTransitionTime(&self) -> bool {
        self.lastTransitionTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastTransitionTime(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastTransitionTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastTransitionTime(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastTransitionTime(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CertificateSigningRequestCondition| { &m.type_ },
            |m: &mut CertificateSigningRequestCondition| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &CertificateSigningRequestCondition| { &m.status },
            |m: &mut CertificateSigningRequestCondition| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &CertificateSigningRequestCondition| { &m.reason },
            |m: &mut CertificateSigningRequestCondition| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &CertificateSigningRequestCondition| { &m.message },
            |m: &mut CertificateSigningRequestCondition| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>(
            "lastUpdateTime",
            |m: &CertificateSigningRequestCondition| { &m.lastUpdateTime },
            |m: &mut CertificateSigningRequestCondition| { &mut m.lastUpdateTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>(
            "lastTransitionTime",
            |m: &CertificateSigningRequestCondition| { &m.lastTransitionTime },
            |m: &mut CertificateSigningRequestCondition| { &mut m.lastTransitionTime },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CertificateSigningRequestCondition>(
            "CertificateSigningRequestCondition",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CertificateSigningRequestCondition {
    const NAME: &'static str = "CertificateSigningRequestCondition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.status = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.reason = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastUpdateTime)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastTransitionTime)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.status.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.reason.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.lastUpdateTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lastTransitionTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.status.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.reason.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.lastUpdateTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.lastTransitionTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CertificateSigningRequestCondition {
        CertificateSigningRequestCondition::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.reason = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.lastUpdateTime.clear();
        self.lastTransitionTime.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CertificateSigningRequestCondition {
        static instance: CertificateSigningRequestCondition = CertificateSigningRequestCondition {
            type_: ::std::option::Option::None,
            status: ::std::option::Option::None,
            reason: ::std::option::Option::None,
            message: ::std::option::Option::None,
            lastUpdateTime: ::protobuf::MessageField::none(),
            lastTransitionTime: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CertificateSigningRequestCondition {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CertificateSigningRequestCondition").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CertificateSigningRequestCondition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CertificateSigningRequestCondition {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.certificates.v1.CertificateSigningRequestList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CertificateSigningRequestList {
    // message fields
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestList.items)
    pub items: ::std::vec::Vec<CertificateSigningRequest>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.certificates.v1.CertificateSigningRequestList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CertificateSigningRequestList {
    fn default() -> &'a CertificateSigningRequestList {
        <CertificateSigningRequestList as ::protobuf::Message>::default_instance()
    }
}

impl CertificateSigningRequestList {
    pub fn new() -> CertificateSigningRequestList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.certificates.v1.CertificateSigningRequest items = 2;

    pub fn items(&self) -> &[CertificateSigningRequest] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<CertificateSigningRequest>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<CertificateSigningRequest> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<CertificateSigningRequest> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &CertificateSigningRequestList| { &m.metadata },
            |m: &mut CertificateSigningRequestList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &CertificateSigningRequestList| { &m.items },
            |m: &mut CertificateSigningRequestList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CertificateSigningRequestList>(
            "CertificateSigningRequestList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CertificateSigningRequestList {
    const NAME: &'static str = "CertificateSigningRequestList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CertificateSigningRequestList {
        CertificateSigningRequestList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CertificateSigningRequestList {
        static instance: CertificateSigningRequestList = CertificateSigningRequestList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CertificateSigningRequestList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CertificateSigningRequestList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CertificateSigningRequestList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CertificateSigningRequestList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.certificates.v1.CertificateSigningRequestSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CertificateSigningRequestSpec {
    // message fields
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestSpec.request)
    pub request: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestSpec.signerName)
    pub signerName: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestSpec.expirationSeconds)
    pub expirationSeconds: ::std::option::Option<i32>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestSpec.usages)
    pub usages: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestSpec.username)
    pub username: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestSpec.uid)
    pub uid: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestSpec.groups)
    pub groups: ::std::vec::Vec<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestSpec.extra)
    pub extra: ::std::collections::BTreeMap<::std::string::String, ExtraValue>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.certificates.v1.CertificateSigningRequestSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CertificateSigningRequestSpec {
    fn default() -> &'a CertificateSigningRequestSpec {
        <CertificateSigningRequestSpec as ::protobuf::Message>::default_instance()
    }
}

impl CertificateSigningRequestSpec {
    pub fn new() -> CertificateSigningRequestSpec {
        ::std::default::Default::default()
    }

    // optional bytes request = 1;

    pub fn request(&self) -> &[u8] {
        match self.request.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_request(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: ::std::vec::Vec<u8>) {
        self.request = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.request.is_none() {
            self.request = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.request.as_mut().unwrap()
    }

    // Take field
    pub fn take_request(&mut self) -> ::std::vec::Vec<u8> {
        self.request.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string signerName = 7;

    pub fn signerName(&self) -> &str {
        match self.signerName.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_signerName(&mut self) {
        self.signerName = ::std::option::Option::None;
    }

    pub fn has_signerName(&self) -> bool {
        self.signerName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signerName(&mut self, v: ::std::string::String) {
        self.signerName = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signerName(&mut self) -> &mut ::std::string::String {
        if self.signerName.is_none() {
            self.signerName = ::std::option::Option::Some(::std::string::String::new());
        }
        self.signerName.as_mut().unwrap()
    }

    // Take field
    pub fn take_signerName(&mut self) -> ::std::string::String {
        self.signerName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 expirationSeconds = 8;

    pub fn expirationSeconds(&self) -> i32 {
        self.expirationSeconds.unwrap_or(0)
    }

    pub fn clear_expirationSeconds(&mut self) {
        self.expirationSeconds = ::std::option::Option::None;
    }

    pub fn has_expirationSeconds(&self) -> bool {
        self.expirationSeconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expirationSeconds(&mut self, v: i32) {
        self.expirationSeconds = ::std::option::Option::Some(v);
    }

    // repeated string usages = 5;

    pub fn usages(&self) -> &[::std::string::String] {
        &self.usages
    }

    pub fn clear_usages(&mut self) {
        self.usages.clear();
    }

    // Param is passed by value, moved
    pub fn set_usages(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.usages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_usages(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.usages
    }

    // Take field
    pub fn take_usages(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.usages, ::std::vec::Vec::new())
    }

    // optional string username = 2;

    pub fn username(&self) -> &str {
        match self.username.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_username(&mut self) {
        self.username = ::std::option::Option::None;
    }

    pub fn has_username(&self) -> bool {
        self.username.is_some()
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        if self.username.is_none() {
            self.username = ::std::option::Option::Some(::std::string::String::new());
        }
        self.username.as_mut().unwrap()
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        self.username.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string uid = 3;

    pub fn uid(&self) -> &str {
        match self.uid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_uid(&mut self) {
        self.uid = ::std::option::Option::None;
    }

    pub fn has_uid(&self) -> bool {
        self.uid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uid(&mut self, v: ::std::string::String) {
        self.uid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uid(&mut self) -> &mut ::std::string::String {
        if self.uid.is_none() {
            self.uid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.uid.as_mut().unwrap()
    }

    // Take field
    pub fn take_uid(&mut self) -> ::std::string::String {
        self.uid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string groups = 4;

    pub fn groups(&self) -> &[::std::string::String] {
        &self.groups
    }

    pub fn clear_groups(&mut self) {
        self.groups.clear();
    }

    // Param is passed by value, moved
    pub fn set_groups(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.groups = v;
    }

    // Mutable pointer to the field.
    pub fn mut_groups(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.groups
    }

    // Take field
    pub fn take_groups(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.groups, ::std::vec::Vec::new())
    }

    // repeated .api.certificates.v1.CertificateSigningRequestSpec.ExtraEntry extra = 6;

    pub fn extra(&self) -> &::std::collections::BTreeMap<::std::string::String, ExtraValue> {
        &self.extra
    }

    pub fn clear_extra(&mut self) {
        self.extra.clear();
    }

    // Param is passed by value, moved
    pub fn set_extra(&mut self, v: ::std::collections::BTreeMap<::std::string::String, ExtraValue>) {
        self.extra = v;
    }

    // Mutable pointer to the field.
    pub fn mut_extra(&mut self) -> &mut ::std::collections::BTreeMap<::std::string::String, ExtraValue> {
        &mut self.extra
    }

    // Take field
    pub fn take_extra(&mut self) -> ::std::collections::BTreeMap<::std::string::String, ExtraValue> {
        ::std::mem::replace(&mut self.extra, ::std::collections::BTreeMap::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "request",
            |m: &CertificateSigningRequestSpec| { &m.request },
            |m: &mut CertificateSigningRequestSpec| { &mut m.request },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signerName",
            |m: &CertificateSigningRequestSpec| { &m.signerName },
            |m: &mut CertificateSigningRequestSpec| { &mut m.signerName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "expirationSeconds",
            |m: &CertificateSigningRequestSpec| { &m.expirationSeconds },
            |m: &mut CertificateSigningRequestSpec| { &mut m.expirationSeconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "usages",
            |m: &CertificateSigningRequestSpec| { &m.usages },
            |m: &mut CertificateSigningRequestSpec| { &mut m.usages },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "username",
            |m: &CertificateSigningRequestSpec| { &m.username },
            |m: &mut CertificateSigningRequestSpec| { &mut m.username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "uid",
            |m: &CertificateSigningRequestSpec| { &m.uid },
            |m: &mut CertificateSigningRequestSpec| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "groups",
            |m: &CertificateSigningRequestSpec| { &m.groups },
            |m: &mut CertificateSigningRequestSpec| { &mut m.groups },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "extra",
            |m: &CertificateSigningRequestSpec| { &m.extra },
            |m: &mut CertificateSigningRequestSpec| { &mut m.extra },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CertificateSigningRequestSpec>(
            "CertificateSigningRequestSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CertificateSigningRequestSpec {
    const NAME: &'static str = "CertificateSigningRequestSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.request = ::std::option::Option::Some(is.read_bytes()?);
                },
                58 => {
                    self.signerName = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.expirationSeconds = ::std::option::Option::Some(is.read_int32()?);
                },
                42 => {
                    self.usages.push(is.read_string()?);
                },
                18 => {
                    self.username = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.uid = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.groups.push(is.read_string()?);
                },
                50 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.extra.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.request.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signerName.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.expirationSeconds {
            my_size += ::protobuf::rt::int32_size(8, v);
        }
        for value in &self.usages {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if let Some(v) = self.username.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.uid.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        for value in &self.groups {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for (k, v) in &self.extra {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.request.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signerName.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.expirationSeconds {
            os.write_int32(8, v)?;
        }
        for v in &self.usages {
            os.write_string(5, &v)?;
        };
        if let Some(v) = self.username.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.uid.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.groups {
            os.write_string(4, &v)?;
        };
        for (k, v) in &self.extra {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(50)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CertificateSigningRequestSpec {
        CertificateSigningRequestSpec::new()
    }

    fn clear(&mut self) {
        self.request = ::std::option::Option::None;
        self.signerName = ::std::option::Option::None;
        self.expirationSeconds = ::std::option::Option::None;
        self.usages.clear();
        self.username = ::std::option::Option::None;
        self.uid = ::std::option::Option::None;
        self.groups.clear();
        self.extra.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CertificateSigningRequestSpec {
        static instance: ::protobuf::rt::Lazy<CertificateSigningRequestSpec> = ::protobuf::rt::Lazy::new();
        instance.get(CertificateSigningRequestSpec::new)
    }
}

impl ::protobuf::MessageFull for CertificateSigningRequestSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CertificateSigningRequestSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CertificateSigningRequestSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CertificateSigningRequestSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.certificates.v1.CertificateSigningRequestStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CertificateSigningRequestStatus {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestStatus.conditions)
    pub conditions: ::std::vec::Vec<CertificateSigningRequestCondition>,
    // @@protoc_insertion_point(field:api.certificates.v1.CertificateSigningRequestStatus.certificate)
    pub certificate: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.certificates.v1.CertificateSigningRequestStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CertificateSigningRequestStatus {
    fn default() -> &'a CertificateSigningRequestStatus {
        <CertificateSigningRequestStatus as ::protobuf::Message>::default_instance()
    }
}

impl CertificateSigningRequestStatus {
    pub fn new() -> CertificateSigningRequestStatus {
        ::std::default::Default::default()
    }

    // repeated .api.certificates.v1.CertificateSigningRequestCondition conditions = 1;

    pub fn conditions(&self) -> &[CertificateSigningRequestCondition] {
        &self.conditions
    }

    pub fn clear_conditions(&mut self) {
        self.conditions.clear();
    }

    // Param is passed by value, moved
    pub fn set_conditions(&mut self, v: ::std::vec::Vec<CertificateSigningRequestCondition>) {
        self.conditions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_conditions(&mut self) -> &mut ::std::vec::Vec<CertificateSigningRequestCondition> {
        &mut self.conditions
    }

    // Take field
    pub fn take_conditions(&mut self) -> ::std::vec::Vec<CertificateSigningRequestCondition> {
        ::std::mem::replace(&mut self.conditions, ::std::vec::Vec::new())
    }

    // optional bytes certificate = 2;

    pub fn certificate(&self) -> &[u8] {
        match self.certificate.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_certificate(&mut self) {
        self.certificate = ::std::option::Option::None;
    }

    pub fn has_certificate(&self) -> bool {
        self.certificate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_certificate(&mut self, v: ::std::vec::Vec<u8>) {
        self.certificate = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_certificate(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.certificate.is_none() {
            self.certificate = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.certificate.as_mut().unwrap()
    }

    // Take field
    pub fn take_certificate(&mut self) -> ::std::vec::Vec<u8> {
        self.certificate.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "conditions",
            |m: &CertificateSigningRequestStatus| { &m.conditions },
            |m: &mut CertificateSigningRequestStatus| { &mut m.conditions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "certificate",
            |m: &CertificateSigningRequestStatus| { &m.certificate },
            |m: &mut CertificateSigningRequestStatus| { &mut m.certificate },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CertificateSigningRequestStatus>(
            "CertificateSigningRequestStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CertificateSigningRequestStatus {
    const NAME: &'static str = "CertificateSigningRequestStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.conditions.push(is.read_message()?);
                },
                18 => {
                    self.certificate = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.conditions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.certificate.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.conditions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.certificate.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CertificateSigningRequestStatus {
        CertificateSigningRequestStatus::new()
    }

    fn clear(&mut self) {
        self.conditions.clear();
        self.certificate = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CertificateSigningRequestStatus {
        static instance: CertificateSigningRequestStatus = CertificateSigningRequestStatus {
            conditions: ::std::vec::Vec::new(),
            certificate: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CertificateSigningRequestStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CertificateSigningRequestStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CertificateSigningRequestStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CertificateSigningRequestStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.certificates.v1.ExtraValue)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExtraValue {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.certificates.v1.ExtraValue.items)
    pub items: ::std::vec::Vec<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.certificates.v1.ExtraValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExtraValue {
    fn default() -> &'a ExtraValue {
        <ExtraValue as ::protobuf::Message>::default_instance()
    }
}

impl ExtraValue {
    pub fn new() -> ExtraValue {
        ::std::default::Default::default()
    }

    // repeated string items = 1;

    pub fn items(&self) -> &[::std::string::String] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &ExtraValue| { &m.items },
            |m: &mut ExtraValue| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExtraValue>(
            "ExtraValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExtraValue {
    const NAME: &'static str = "ExtraValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.items.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.items {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.items {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExtraValue {
        ExtraValue::new()
    }

    fn clear(&mut self) {
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExtraValue {
        static instance: ExtraValue = ExtraValue {
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExtraValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExtraValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExtraValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtraValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#api/certificates/v1/generated.proto\x12\x13api.certificates.v1\x1a\
    \x1bapi/core/v1/generated.proto\x1a-apimachinery/pkg/apis/meta/v1/genera\
    ted.proto\x1a(apimachinery/pkg/runtime/generated.proto\x1a/apimachinery/\
    pkg/runtime/schema/generated.proto\"\xf8\x01\n\x19CertificateSigningRequ\
    est\x12E\n\x08metadata\x18\x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta\
    .v1.ObjectMetaR\x08metadata\x12F\n\x04spec\x18\x02\x20\x01(\x0b22.api.ce\
    rtificates.v1.CertificateSigningRequestSpecR\x04spec\x12L\n\x06status\
    \x18\x03\x20\x01(\x0b24.api.certificates.v1.CertificateSigningRequestSta\
    tusR\x06status\"\xa4\x02\n\"CertificateSigningRequestCondition\x12\x12\n\
    \x04type\x18\x01\x20\x01(\tR\x04type\x12\x16\n\x06status\x18\x06\x20\x01\
    (\tR\x06status\x12\x16\n\x06reason\x18\x02\x20\x01(\tR\x06reason\x12\x18\
    \n\x07message\x18\x03\x20\x01(\tR\x07message\x12K\n\x0elastUpdateTime\
    \x18\x04\x20\x01(\x0b2#.apimachinery.pkg.apis.meta.v1.TimeR\x0elastUpdat\
    eTime\x12S\n\x12lastTransitionTime\x18\x05\x20\x01(\x0b2#.apimachinery.p\
    kg.apis.meta.v1.TimeR\x12lastTransitionTime\"\xaa\x01\n\x1dCertificateSi\
    gningRequestList\x12C\n\x08metadata\x18\x01\x20\x01(\x0b2'.apimachinery.\
    pkg.apis.meta.v1.ListMetaR\x08metadata\x12D\n\x05items\x18\x02\x20\x03(\
    \x0b2..api.certificates.v1.CertificateSigningRequestR\x05items\"\x95\x03\
    \n\x1dCertificateSigningRequestSpec\x12\x18\n\x07request\x18\x01\x20\x01\
    (\x0cR\x07request\x12\x1e\n\nsignerName\x18\x07\x20\x01(\tR\nsignerName\
    \x12,\n\x11expirationSeconds\x18\x08\x20\x01(\x05R\x11expirationSeconds\
    \x12\x16\n\x06usages\x18\x05\x20\x03(\tR\x06usages\x12\x1a\n\x08username\
    \x18\x02\x20\x01(\tR\x08username\x12\x10\n\x03uid\x18\x03\x20\x01(\tR\
    \x03uid\x12\x16\n\x06groups\x18\x04\x20\x03(\tR\x06groups\x12S\n\x05extr\
    a\x18\x06\x20\x03(\x0b2=.api.certificates.v1.CertificateSigningRequestSp\
    ec.ExtraEntryR\x05extra\x1aY\n\nExtraEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x125\n\x05value\x18\x02\x20\x01(\x0b2\x1f.api.certificat\
    es.v1.ExtraValueR\x05value:\x028\x01\"\x9c\x01\n\x1fCertificateSigningRe\
    questStatus\x12W\n\nconditions\x18\x01\x20\x03(\x0b27.api.certificates.v\
    1.CertificateSigningRequestConditionR\nconditions\x12\x20\n\x0bcertifica\
    te\x18\x02\x20\x01(\x0cR\x0bcertificate\"\"\n\nExtraValue\x12\x14\n\x05i\
    tems\x18\x01\x20\x03(\tR\x05itemsB\x1cZ\x1ak8s.io/api/certificates/v1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(CertificateSigningRequest::generated_message_descriptor_data());
            messages.push(CertificateSigningRequestCondition::generated_message_descriptor_data());
            messages.push(CertificateSigningRequestList::generated_message_descriptor_data());
            messages.push(CertificateSigningRequestSpec::generated_message_descriptor_data());
            messages.push(CertificateSigningRequestStatus::generated_message_descriptor_data());
            messages.push(ExtraValue::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
