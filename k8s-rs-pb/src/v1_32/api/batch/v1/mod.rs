// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/batch/v1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.CronJob)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CronJob {
    // message fields
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.CronJob.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.CronJob.spec)
    pub spec: ::protobuf::MessageField<CronJobSpec>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.CronJob.status)
    pub status: ::protobuf::MessageField<CronJobStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.CronJob.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CronJob {
    fn default() -> &'a CronJob {
        <CronJob as ::protobuf::Message>::default_instance()
    }
}

impl CronJob {
    pub fn new() -> CronJob {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.batch.v1.CronJobSpec spec = 2;

    pub fn spec(&self) -> &CronJobSpec {
        self.spec.as_ref().unwrap_or_else(|| <CronJobSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: CronJobSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut CronJobSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> CronJobSpec {
        self.spec.take().unwrap_or_else(|| CronJobSpec::new())
    }

    // optional .api.batch.v1.CronJobStatus status = 3;

    pub fn status(&self) -> &CronJobStatus {
        self.status.as_ref().unwrap_or_else(|| <CronJobStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: CronJobStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut CronJobStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> CronJobStatus {
        self.status.take().unwrap_or_else(|| CronJobStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &CronJob| { &m.metadata },
            |m: &mut CronJob| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CronJobSpec>(
            "spec",
            |m: &CronJob| { &m.spec },
            |m: &mut CronJob| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CronJobStatus>(
            "status",
            |m: &CronJob| { &m.status },
            |m: &mut CronJob| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CronJob>(
            "CronJob",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CronJob {
    const NAME: &'static str = "CronJob";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CronJob {
        CronJob::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CronJob {
        static instance: CronJob = CronJob {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CronJob {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CronJob").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CronJob {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CronJob {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.CronJobList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CronJobList {
    // message fields
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.CronJobList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.CronJobList.items)
    pub items: ::std::vec::Vec<CronJob>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.CronJobList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CronJobList {
    fn default() -> &'a CronJobList {
        <CronJobList as ::protobuf::Message>::default_instance()
    }
}

impl CronJobList {
    pub fn new() -> CronJobList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.batch.v1.CronJob items = 2;

    pub fn items(&self) -> &[CronJob] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<CronJob>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<CronJob> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<CronJob> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &CronJobList| { &m.metadata },
            |m: &mut CronJobList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &CronJobList| { &m.items },
            |m: &mut CronJobList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CronJobList>(
            "CronJobList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CronJobList {
    const NAME: &'static str = "CronJobList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CronJobList {
        CronJobList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CronJobList {
        static instance: CronJobList = CronJobList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CronJobList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CronJobList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CronJobList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CronJobList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.CronJobSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CronJobSpec {
    // message fields
    // @@protoc_insertion_point(field:api.batch.v1.CronJobSpec.schedule)
    pub schedule: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1.CronJobSpec.timeZone)
    pub timeZone: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1.CronJobSpec.startingDeadlineSeconds)
    pub startingDeadlineSeconds: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:api.batch.v1.CronJobSpec.concurrencyPolicy)
    pub concurrencyPolicy: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1.CronJobSpec.suspend)
    pub suspend: ::std::option::Option<bool>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.CronJobSpec.jobTemplate)
    pub jobTemplate: ::protobuf::MessageField<JobTemplateSpec>,
    // @@protoc_insertion_point(field:api.batch.v1.CronJobSpec.successfulJobsHistoryLimit)
    pub successfulJobsHistoryLimit: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.batch.v1.CronJobSpec.failedJobsHistoryLimit)
    pub failedJobsHistoryLimit: ::std::option::Option<i32>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.CronJobSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CronJobSpec {
    fn default() -> &'a CronJobSpec {
        <CronJobSpec as ::protobuf::Message>::default_instance()
    }
}

impl CronJobSpec {
    pub fn new() -> CronJobSpec {
        ::std::default::Default::default()
    }

    // optional string schedule = 1;

    pub fn schedule(&self) -> &str {
        match self.schedule.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_schedule(&mut self) {
        self.schedule = ::std::option::Option::None;
    }

    pub fn has_schedule(&self) -> bool {
        self.schedule.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedule(&mut self, v: ::std::string::String) {
        self.schedule = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schedule(&mut self) -> &mut ::std::string::String {
        if self.schedule.is_none() {
            self.schedule = ::std::option::Option::Some(::std::string::String::new());
        }
        self.schedule.as_mut().unwrap()
    }

    // Take field
    pub fn take_schedule(&mut self) -> ::std::string::String {
        self.schedule.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string timeZone = 8;

    pub fn timeZone(&self) -> &str {
        match self.timeZone.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_timeZone(&mut self) {
        self.timeZone = ::std::option::Option::None;
    }

    pub fn has_timeZone(&self) -> bool {
        self.timeZone.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeZone(&mut self, v: ::std::string::String) {
        self.timeZone = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timeZone(&mut self) -> &mut ::std::string::String {
        if self.timeZone.is_none() {
            self.timeZone = ::std::option::Option::Some(::std::string::String::new());
        }
        self.timeZone.as_mut().unwrap()
    }

    // Take field
    pub fn take_timeZone(&mut self) -> ::std::string::String {
        self.timeZone.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int64 startingDeadlineSeconds = 2;

    pub fn startingDeadlineSeconds(&self) -> i64 {
        self.startingDeadlineSeconds.unwrap_or(0)
    }

    pub fn clear_startingDeadlineSeconds(&mut self) {
        self.startingDeadlineSeconds = ::std::option::Option::None;
    }

    pub fn has_startingDeadlineSeconds(&self) -> bool {
        self.startingDeadlineSeconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_startingDeadlineSeconds(&mut self, v: i64) {
        self.startingDeadlineSeconds = ::std::option::Option::Some(v);
    }

    // optional string concurrencyPolicy = 3;

    pub fn concurrencyPolicy(&self) -> &str {
        match self.concurrencyPolicy.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_concurrencyPolicy(&mut self) {
        self.concurrencyPolicy = ::std::option::Option::None;
    }

    pub fn has_concurrencyPolicy(&self) -> bool {
        self.concurrencyPolicy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_concurrencyPolicy(&mut self, v: ::std::string::String) {
        self.concurrencyPolicy = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_concurrencyPolicy(&mut self) -> &mut ::std::string::String {
        if self.concurrencyPolicy.is_none() {
            self.concurrencyPolicy = ::std::option::Option::Some(::std::string::String::new());
        }
        self.concurrencyPolicy.as_mut().unwrap()
    }

    // Take field
    pub fn take_concurrencyPolicy(&mut self) -> ::std::string::String {
        self.concurrencyPolicy.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool suspend = 4;

    pub fn suspend(&self) -> bool {
        self.suspend.unwrap_or(false)
    }

    pub fn clear_suspend(&mut self) {
        self.suspend = ::std::option::Option::None;
    }

    pub fn has_suspend(&self) -> bool {
        self.suspend.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suspend(&mut self, v: bool) {
        self.suspend = ::std::option::Option::Some(v);
    }

    // optional .api.batch.v1.JobTemplateSpec jobTemplate = 5;

    pub fn jobTemplate(&self) -> &JobTemplateSpec {
        self.jobTemplate.as_ref().unwrap_or_else(|| <JobTemplateSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_jobTemplate(&mut self) {
        self.jobTemplate.clear();
    }

    pub fn has_jobTemplate(&self) -> bool {
        self.jobTemplate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_jobTemplate(&mut self, v: JobTemplateSpec) {
        self.jobTemplate = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_jobTemplate(&mut self) -> &mut JobTemplateSpec {
        self.jobTemplate.mut_or_insert_default()
    }

    // Take field
    pub fn take_jobTemplate(&mut self) -> JobTemplateSpec {
        self.jobTemplate.take().unwrap_or_else(|| JobTemplateSpec::new())
    }

    // optional int32 successfulJobsHistoryLimit = 6;

    pub fn successfulJobsHistoryLimit(&self) -> i32 {
        self.successfulJobsHistoryLimit.unwrap_or(0)
    }

    pub fn clear_successfulJobsHistoryLimit(&mut self) {
        self.successfulJobsHistoryLimit = ::std::option::Option::None;
    }

    pub fn has_successfulJobsHistoryLimit(&self) -> bool {
        self.successfulJobsHistoryLimit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_successfulJobsHistoryLimit(&mut self, v: i32) {
        self.successfulJobsHistoryLimit = ::std::option::Option::Some(v);
    }

    // optional int32 failedJobsHistoryLimit = 7;

    pub fn failedJobsHistoryLimit(&self) -> i32 {
        self.failedJobsHistoryLimit.unwrap_or(0)
    }

    pub fn clear_failedJobsHistoryLimit(&mut self) {
        self.failedJobsHistoryLimit = ::std::option::Option::None;
    }

    pub fn has_failedJobsHistoryLimit(&self) -> bool {
        self.failedJobsHistoryLimit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_failedJobsHistoryLimit(&mut self, v: i32) {
        self.failedJobsHistoryLimit = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "schedule",
            |m: &CronJobSpec| { &m.schedule },
            |m: &mut CronJobSpec| { &mut m.schedule },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timeZone",
            |m: &CronJobSpec| { &m.timeZone },
            |m: &mut CronJobSpec| { &mut m.timeZone },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "startingDeadlineSeconds",
            |m: &CronJobSpec| { &m.startingDeadlineSeconds },
            |m: &mut CronJobSpec| { &mut m.startingDeadlineSeconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "concurrencyPolicy",
            |m: &CronJobSpec| { &m.concurrencyPolicy },
            |m: &mut CronJobSpec| { &mut m.concurrencyPolicy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suspend",
            |m: &CronJobSpec| { &m.suspend },
            |m: &mut CronJobSpec| { &mut m.suspend },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, JobTemplateSpec>(
            "jobTemplate",
            |m: &CronJobSpec| { &m.jobTemplate },
            |m: &mut CronJobSpec| { &mut m.jobTemplate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "successfulJobsHistoryLimit",
            |m: &CronJobSpec| { &m.successfulJobsHistoryLimit },
            |m: &mut CronJobSpec| { &mut m.successfulJobsHistoryLimit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "failedJobsHistoryLimit",
            |m: &CronJobSpec| { &m.failedJobsHistoryLimit },
            |m: &mut CronJobSpec| { &mut m.failedJobsHistoryLimit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CronJobSpec>(
            "CronJobSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CronJobSpec {
    const NAME: &'static str = "CronJobSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.schedule = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.timeZone = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.startingDeadlineSeconds = ::std::option::Option::Some(is.read_int64()?);
                },
                26 => {
                    self.concurrencyPolicy = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.suspend = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.jobTemplate)?;
                },
                48 => {
                    self.successfulJobsHistoryLimit = ::std::option::Option::Some(is.read_int32()?);
                },
                56 => {
                    self.failedJobsHistoryLimit = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schedule.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.timeZone.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.startingDeadlineSeconds {
            my_size += ::protobuf::rt::int64_size(2, v);
        }
        if let Some(v) = self.concurrencyPolicy.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.suspend {
            my_size += 1 + 1;
        }
        if let Some(v) = self.jobTemplate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.successfulJobsHistoryLimit {
            my_size += ::protobuf::rt::int32_size(6, v);
        }
        if let Some(v) = self.failedJobsHistoryLimit {
            my_size += ::protobuf::rt::int32_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.schedule.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.timeZone.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.startingDeadlineSeconds {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.concurrencyPolicy.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.suspend {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.jobTemplate.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.successfulJobsHistoryLimit {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.failedJobsHistoryLimit {
            os.write_int32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CronJobSpec {
        CronJobSpec::new()
    }

    fn clear(&mut self) {
        self.schedule = ::std::option::Option::None;
        self.timeZone = ::std::option::Option::None;
        self.startingDeadlineSeconds = ::std::option::Option::None;
        self.concurrencyPolicy = ::std::option::Option::None;
        self.suspend = ::std::option::Option::None;
        self.jobTemplate.clear();
        self.successfulJobsHistoryLimit = ::std::option::Option::None;
        self.failedJobsHistoryLimit = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CronJobSpec {
        static instance: CronJobSpec = CronJobSpec {
            schedule: ::std::option::Option::None,
            timeZone: ::std::option::Option::None,
            startingDeadlineSeconds: ::std::option::Option::None,
            concurrencyPolicy: ::std::option::Option::None,
            suspend: ::std::option::Option::None,
            jobTemplate: ::protobuf::MessageField::none(),
            successfulJobsHistoryLimit: ::std::option::Option::None,
            failedJobsHistoryLimit: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CronJobSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CronJobSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CronJobSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CronJobSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.CronJobStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CronJobStatus {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.CronJobStatus.active)
    pub active: ::std::vec::Vec<crate::v1_32::api::core::v1::ObjectReference>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.CronJobStatus.lastScheduleTime)
    pub lastScheduleTime: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.CronJobStatus.lastSuccessfulTime)
    pub lastSuccessfulTime: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.CronJobStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CronJobStatus {
    fn default() -> &'a CronJobStatus {
        <CronJobStatus as ::protobuf::Message>::default_instance()
    }
}

impl CronJobStatus {
    pub fn new() -> CronJobStatus {
        ::std::default::Default::default()
    }

    // repeated .api.core.v1.ObjectReference active = 1;

    pub fn active(&self) -> &[crate::v1_32::api::core::v1::ObjectReference] {
        &self.active
    }

    pub fn clear_active(&mut self) {
        self.active.clear();
    }

    // Param is passed by value, moved
    pub fn set_active(&mut self, v: ::std::vec::Vec<crate::v1_32::api::core::v1::ObjectReference>) {
        self.active = v;
    }

    // Mutable pointer to the field.
    pub fn mut_active(&mut self) -> &mut ::std::vec::Vec<crate::v1_32::api::core::v1::ObjectReference> {
        &mut self.active
    }

    // Take field
    pub fn take_active(&mut self) -> ::std::vec::Vec<crate::v1_32::api::core::v1::ObjectReference> {
        ::std::mem::replace(&mut self.active, ::std::vec::Vec::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastScheduleTime = 4;

    pub fn lastScheduleTime(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastScheduleTime.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastScheduleTime(&mut self) {
        self.lastScheduleTime.clear();
    }

    pub fn has_lastScheduleTime(&self) -> bool {
        self.lastScheduleTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastScheduleTime(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastScheduleTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastScheduleTime(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastScheduleTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastScheduleTime(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastScheduleTime.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastSuccessfulTime = 5;

    pub fn lastSuccessfulTime(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastSuccessfulTime.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastSuccessfulTime(&mut self) {
        self.lastSuccessfulTime.clear();
    }

    pub fn has_lastSuccessfulTime(&self) -> bool {
        self.lastSuccessfulTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastSuccessfulTime(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastSuccessfulTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastSuccessfulTime(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastSuccessfulTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastSuccessfulTime(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastSuccessfulTime.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "active",
            |m: &CronJobStatus| { &m.active },
            |m: &mut CronJobStatus| { &mut m.active },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>(
            "lastScheduleTime",
            |m: &CronJobStatus| { &m.lastScheduleTime },
            |m: &mut CronJobStatus| { &mut m.lastScheduleTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>(
            "lastSuccessfulTime",
            |m: &CronJobStatus| { &m.lastSuccessfulTime },
            |m: &mut CronJobStatus| { &mut m.lastSuccessfulTime },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CronJobStatus>(
            "CronJobStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CronJobStatus {
    const NAME: &'static str = "CronJobStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.active.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastScheduleTime)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastSuccessfulTime)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.active {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.lastScheduleTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lastSuccessfulTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.active {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.lastScheduleTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.lastSuccessfulTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CronJobStatus {
        CronJobStatus::new()
    }

    fn clear(&mut self) {
        self.active.clear();
        self.lastScheduleTime.clear();
        self.lastSuccessfulTime.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CronJobStatus {
        static instance: CronJobStatus = CronJobStatus {
            active: ::std::vec::Vec::new(),
            lastScheduleTime: ::protobuf::MessageField::none(),
            lastSuccessfulTime: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CronJobStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CronJobStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CronJobStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CronJobStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.Job)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Job {
    // message fields
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.Job.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.Job.spec)
    pub spec: ::protobuf::MessageField<JobSpec>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.Job.status)
    pub status: ::protobuf::MessageField<JobStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.Job.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Job {
    fn default() -> &'a Job {
        <Job as ::protobuf::Message>::default_instance()
    }
}

impl Job {
    pub fn new() -> Job {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.batch.v1.JobSpec spec = 2;

    pub fn spec(&self) -> &JobSpec {
        self.spec.as_ref().unwrap_or_else(|| <JobSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: JobSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut JobSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> JobSpec {
        self.spec.take().unwrap_or_else(|| JobSpec::new())
    }

    // optional .api.batch.v1.JobStatus status = 3;

    pub fn status(&self) -> &JobStatus {
        self.status.as_ref().unwrap_or_else(|| <JobStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: JobStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut JobStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> JobStatus {
        self.status.take().unwrap_or_else(|| JobStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &Job| { &m.metadata },
            |m: &mut Job| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, JobSpec>(
            "spec",
            |m: &Job| { &m.spec },
            |m: &mut Job| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, JobStatus>(
            "status",
            |m: &Job| { &m.status },
            |m: &mut Job| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Job>(
            "Job",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Job {
    const NAME: &'static str = "Job";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Job {
        Job::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Job {
        static instance: Job = Job {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Job {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Job").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Job {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Job {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.JobCondition)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JobCondition {
    // message fields
    // @@protoc_insertion_point(field:api.batch.v1.JobCondition.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1.JobCondition.status)
    pub status: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobCondition.lastProbeTime)
    pub lastProbeTime: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobCondition.lastTransitionTime)
    pub lastTransitionTime: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:api.batch.v1.JobCondition.reason)
    pub reason: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1.JobCondition.message)
    pub message: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.JobCondition.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobCondition {
    fn default() -> &'a JobCondition {
        <JobCondition as ::protobuf::Message>::default_instance()
    }
}

impl JobCondition {
    pub fn new() -> JobCondition {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string status = 2;

    pub fn status(&self) -> &str {
        match self.status.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        if self.status.is_none() {
            self.status = ::std::option::Option::Some(::std::string::String::new());
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        self.status.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastProbeTime = 3;

    pub fn lastProbeTime(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastProbeTime.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastProbeTime(&mut self) {
        self.lastProbeTime.clear();
    }

    pub fn has_lastProbeTime(&self) -> bool {
        self.lastProbeTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastProbeTime(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastProbeTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastProbeTime(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastProbeTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastProbeTime(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastProbeTime.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

    pub fn lastTransitionTime(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastTransitionTime(&mut self) {
        self.lastTransitionTime.clear();
    }

    pub fn has_lastTransitionTime(&self) -> bool {
        self.lastTransitionTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastTransitionTime(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastTransitionTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastTransitionTime(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastTransitionTime(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional string reason = 5;

    pub fn reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string message = 6;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &JobCondition| { &m.type_ },
            |m: &mut JobCondition| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &JobCondition| { &m.status },
            |m: &mut JobCondition| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>(
            "lastProbeTime",
            |m: &JobCondition| { &m.lastProbeTime },
            |m: &mut JobCondition| { &mut m.lastProbeTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>(
            "lastTransitionTime",
            |m: &JobCondition| { &m.lastTransitionTime },
            |m: &mut JobCondition| { &mut m.lastTransitionTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &JobCondition| { &m.reason },
            |m: &mut JobCondition| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &JobCondition| { &m.message },
            |m: &mut JobCondition| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobCondition>(
            "JobCondition",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobCondition {
    const NAME: &'static str = "JobCondition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.status = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastProbeTime)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastTransitionTime)?;
                },
                42 => {
                    self.reason = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.status.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.lastProbeTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lastTransitionTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.reason.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.status.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.lastProbeTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.lastTransitionTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.reason.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobCondition {
        JobCondition::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.lastProbeTime.clear();
        self.lastTransitionTime.clear();
        self.reason = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobCondition {
        static instance: JobCondition = JobCondition {
            type_: ::std::option::Option::None,
            status: ::std::option::Option::None,
            lastProbeTime: ::protobuf::MessageField::none(),
            lastTransitionTime: ::protobuf::MessageField::none(),
            reason: ::std::option::Option::None,
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobCondition {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobCondition").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobCondition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobCondition {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.JobList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JobList {
    // message fields
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobList.items)
    pub items: ::std::vec::Vec<Job>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.JobList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobList {
    fn default() -> &'a JobList {
        <JobList as ::protobuf::Message>::default_instance()
    }
}

impl JobList {
    pub fn new() -> JobList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.batch.v1.Job items = 2;

    pub fn items(&self) -> &[Job] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<Job>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<Job> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<Job> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &JobList| { &m.metadata },
            |m: &mut JobList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &JobList| { &m.items },
            |m: &mut JobList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobList>(
            "JobList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobList {
    const NAME: &'static str = "JobList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobList {
        JobList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobList {
        static instance: JobList = JobList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.JobSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JobSpec {
    // message fields
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.parallelism)
    pub parallelism: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.completions)
    pub completions: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.activeDeadlineSeconds)
    pub activeDeadlineSeconds: ::std::option::Option<i64>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.podFailurePolicy)
    pub podFailurePolicy: ::protobuf::MessageField<PodFailurePolicy>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.successPolicy)
    pub successPolicy: ::protobuf::MessageField<SuccessPolicy>,
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.backoffLimit)
    pub backoffLimit: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.backoffLimitPerIndex)
    pub backoffLimitPerIndex: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.maxFailedIndexes)
    pub maxFailedIndexes: ::std::option::Option<i32>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.selector)
    pub selector: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector>,
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.manualSelector)
    pub manualSelector: ::std::option::Option<bool>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.template)
    pub template: ::protobuf::MessageField<crate::v1_32::api::core::v1::PodTemplateSpec>,
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.ttlSecondsAfterFinished)
    pub ttlSecondsAfterFinished: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.completionMode)
    pub completionMode: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.suspend)
    pub suspend: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.podReplacementPolicy)
    pub podReplacementPolicy: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1.JobSpec.managedBy)
    pub managedBy: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.JobSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobSpec {
    fn default() -> &'a JobSpec {
        <JobSpec as ::protobuf::Message>::default_instance()
    }
}

impl JobSpec {
    pub fn new() -> JobSpec {
        ::std::default::Default::default()
    }

    // optional int32 parallelism = 1;

    pub fn parallelism(&self) -> i32 {
        self.parallelism.unwrap_or(0)
    }

    pub fn clear_parallelism(&mut self) {
        self.parallelism = ::std::option::Option::None;
    }

    pub fn has_parallelism(&self) -> bool {
        self.parallelism.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parallelism(&mut self, v: i32) {
        self.parallelism = ::std::option::Option::Some(v);
    }

    // optional int32 completions = 2;

    pub fn completions(&self) -> i32 {
        self.completions.unwrap_or(0)
    }

    pub fn clear_completions(&mut self) {
        self.completions = ::std::option::Option::None;
    }

    pub fn has_completions(&self) -> bool {
        self.completions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_completions(&mut self, v: i32) {
        self.completions = ::std::option::Option::Some(v);
    }

    // optional int64 activeDeadlineSeconds = 3;

    pub fn activeDeadlineSeconds(&self) -> i64 {
        self.activeDeadlineSeconds.unwrap_or(0)
    }

    pub fn clear_activeDeadlineSeconds(&mut self) {
        self.activeDeadlineSeconds = ::std::option::Option::None;
    }

    pub fn has_activeDeadlineSeconds(&self) -> bool {
        self.activeDeadlineSeconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_activeDeadlineSeconds(&mut self, v: i64) {
        self.activeDeadlineSeconds = ::std::option::Option::Some(v);
    }

    // optional .api.batch.v1.PodFailurePolicy podFailurePolicy = 11;

    pub fn podFailurePolicy(&self) -> &PodFailurePolicy {
        self.podFailurePolicy.as_ref().unwrap_or_else(|| <PodFailurePolicy as ::protobuf::Message>::default_instance())
    }

    pub fn clear_podFailurePolicy(&mut self) {
        self.podFailurePolicy.clear();
    }

    pub fn has_podFailurePolicy(&self) -> bool {
        self.podFailurePolicy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_podFailurePolicy(&mut self, v: PodFailurePolicy) {
        self.podFailurePolicy = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_podFailurePolicy(&mut self) -> &mut PodFailurePolicy {
        self.podFailurePolicy.mut_or_insert_default()
    }

    // Take field
    pub fn take_podFailurePolicy(&mut self) -> PodFailurePolicy {
        self.podFailurePolicy.take().unwrap_or_else(|| PodFailurePolicy::new())
    }

    // optional .api.batch.v1.SuccessPolicy successPolicy = 16;

    pub fn successPolicy(&self) -> &SuccessPolicy {
        self.successPolicy.as_ref().unwrap_or_else(|| <SuccessPolicy as ::protobuf::Message>::default_instance())
    }

    pub fn clear_successPolicy(&mut self) {
        self.successPolicy.clear();
    }

    pub fn has_successPolicy(&self) -> bool {
        self.successPolicy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_successPolicy(&mut self, v: SuccessPolicy) {
        self.successPolicy = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_successPolicy(&mut self) -> &mut SuccessPolicy {
        self.successPolicy.mut_or_insert_default()
    }

    // Take field
    pub fn take_successPolicy(&mut self) -> SuccessPolicy {
        self.successPolicy.take().unwrap_or_else(|| SuccessPolicy::new())
    }

    // optional int32 backoffLimit = 7;

    pub fn backoffLimit(&self) -> i32 {
        self.backoffLimit.unwrap_or(0)
    }

    pub fn clear_backoffLimit(&mut self) {
        self.backoffLimit = ::std::option::Option::None;
    }

    pub fn has_backoffLimit(&self) -> bool {
        self.backoffLimit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_backoffLimit(&mut self, v: i32) {
        self.backoffLimit = ::std::option::Option::Some(v);
    }

    // optional int32 backoffLimitPerIndex = 12;

    pub fn backoffLimitPerIndex(&self) -> i32 {
        self.backoffLimitPerIndex.unwrap_or(0)
    }

    pub fn clear_backoffLimitPerIndex(&mut self) {
        self.backoffLimitPerIndex = ::std::option::Option::None;
    }

    pub fn has_backoffLimitPerIndex(&self) -> bool {
        self.backoffLimitPerIndex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_backoffLimitPerIndex(&mut self, v: i32) {
        self.backoffLimitPerIndex = ::std::option::Option::Some(v);
    }

    // optional int32 maxFailedIndexes = 13;

    pub fn maxFailedIndexes(&self) -> i32 {
        self.maxFailedIndexes.unwrap_or(0)
    }

    pub fn clear_maxFailedIndexes(&mut self) {
        self.maxFailedIndexes = ::std::option::Option::None;
    }

    pub fn has_maxFailedIndexes(&self) -> bool {
        self.maxFailedIndexes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_maxFailedIndexes(&mut self, v: i32) {
        self.maxFailedIndexes = ::std::option::Option::Some(v);
    }

    // optional .apimachinery.pkg.apis.meta.v1.LabelSelector selector = 4;

    pub fn selector(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.selector.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector as ::protobuf::Message>::default_instance())
    }

    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    pub fn has_selector(&self) -> bool {
        self.selector.is_some()
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector) {
        self.selector = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.selector.mut_or_insert_default()
    }

    // Take field
    pub fn take_selector(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.selector.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector::new())
    }

    // optional bool manualSelector = 5;

    pub fn manualSelector(&self) -> bool {
        self.manualSelector.unwrap_or(false)
    }

    pub fn clear_manualSelector(&mut self) {
        self.manualSelector = ::std::option::Option::None;
    }

    pub fn has_manualSelector(&self) -> bool {
        self.manualSelector.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manualSelector(&mut self, v: bool) {
        self.manualSelector = ::std::option::Option::Some(v);
    }

    // optional .api.core.v1.PodTemplateSpec template = 6;

    pub fn template(&self) -> &crate::v1_32::api::core::v1::PodTemplateSpec {
        self.template.as_ref().unwrap_or_else(|| <crate::v1_32::api::core::v1::PodTemplateSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_template(&mut self) {
        self.template.clear();
    }

    pub fn has_template(&self) -> bool {
        self.template.is_some()
    }

    // Param is passed by value, moved
    pub fn set_template(&mut self, v: crate::v1_32::api::core::v1::PodTemplateSpec) {
        self.template = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_template(&mut self) -> &mut crate::v1_32::api::core::v1::PodTemplateSpec {
        self.template.mut_or_insert_default()
    }

    // Take field
    pub fn take_template(&mut self) -> crate::v1_32::api::core::v1::PodTemplateSpec {
        self.template.take().unwrap_or_else(|| crate::v1_32::api::core::v1::PodTemplateSpec::new())
    }

    // optional int32 ttlSecondsAfterFinished = 8;

    pub fn ttlSecondsAfterFinished(&self) -> i32 {
        self.ttlSecondsAfterFinished.unwrap_or(0)
    }

    pub fn clear_ttlSecondsAfterFinished(&mut self) {
        self.ttlSecondsAfterFinished = ::std::option::Option::None;
    }

    pub fn has_ttlSecondsAfterFinished(&self) -> bool {
        self.ttlSecondsAfterFinished.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ttlSecondsAfterFinished(&mut self, v: i32) {
        self.ttlSecondsAfterFinished = ::std::option::Option::Some(v);
    }

    // optional string completionMode = 9;

    pub fn completionMode(&self) -> &str {
        match self.completionMode.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_completionMode(&mut self) {
        self.completionMode = ::std::option::Option::None;
    }

    pub fn has_completionMode(&self) -> bool {
        self.completionMode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_completionMode(&mut self, v: ::std::string::String) {
        self.completionMode = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_completionMode(&mut self) -> &mut ::std::string::String {
        if self.completionMode.is_none() {
            self.completionMode = ::std::option::Option::Some(::std::string::String::new());
        }
        self.completionMode.as_mut().unwrap()
    }

    // Take field
    pub fn take_completionMode(&mut self) -> ::std::string::String {
        self.completionMode.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool suspend = 10;

    pub fn suspend(&self) -> bool {
        self.suspend.unwrap_or(false)
    }

    pub fn clear_suspend(&mut self) {
        self.suspend = ::std::option::Option::None;
    }

    pub fn has_suspend(&self) -> bool {
        self.suspend.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suspend(&mut self, v: bool) {
        self.suspend = ::std::option::Option::Some(v);
    }

    // optional string podReplacementPolicy = 14;

    pub fn podReplacementPolicy(&self) -> &str {
        match self.podReplacementPolicy.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_podReplacementPolicy(&mut self) {
        self.podReplacementPolicy = ::std::option::Option::None;
    }

    pub fn has_podReplacementPolicy(&self) -> bool {
        self.podReplacementPolicy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_podReplacementPolicy(&mut self, v: ::std::string::String) {
        self.podReplacementPolicy = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_podReplacementPolicy(&mut self) -> &mut ::std::string::String {
        if self.podReplacementPolicy.is_none() {
            self.podReplacementPolicy = ::std::option::Option::Some(::std::string::String::new());
        }
        self.podReplacementPolicy.as_mut().unwrap()
    }

    // Take field
    pub fn take_podReplacementPolicy(&mut self) -> ::std::string::String {
        self.podReplacementPolicy.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string managedBy = 15;

    pub fn managedBy(&self) -> &str {
        match self.managedBy.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_managedBy(&mut self) {
        self.managedBy = ::std::option::Option::None;
    }

    pub fn has_managedBy(&self) -> bool {
        self.managedBy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_managedBy(&mut self, v: ::std::string::String) {
        self.managedBy = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_managedBy(&mut self) -> &mut ::std::string::String {
        if self.managedBy.is_none() {
            self.managedBy = ::std::option::Option::Some(::std::string::String::new());
        }
        self.managedBy.as_mut().unwrap()
    }

    // Take field
    pub fn take_managedBy(&mut self) -> ::std::string::String {
        self.managedBy.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(16);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "parallelism",
            |m: &JobSpec| { &m.parallelism },
            |m: &mut JobSpec| { &mut m.parallelism },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "completions",
            |m: &JobSpec| { &m.completions },
            |m: &mut JobSpec| { &mut m.completions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "activeDeadlineSeconds",
            |m: &JobSpec| { &m.activeDeadlineSeconds },
            |m: &mut JobSpec| { &mut m.activeDeadlineSeconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PodFailurePolicy>(
            "podFailurePolicy",
            |m: &JobSpec| { &m.podFailurePolicy },
            |m: &mut JobSpec| { &mut m.podFailurePolicy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SuccessPolicy>(
            "successPolicy",
            |m: &JobSpec| { &m.successPolicy },
            |m: &mut JobSpec| { &mut m.successPolicy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "backoffLimit",
            |m: &JobSpec| { &m.backoffLimit },
            |m: &mut JobSpec| { &mut m.backoffLimit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "backoffLimitPerIndex",
            |m: &JobSpec| { &m.backoffLimitPerIndex },
            |m: &mut JobSpec| { &mut m.backoffLimitPerIndex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "maxFailedIndexes",
            |m: &JobSpec| { &m.maxFailedIndexes },
            |m: &mut JobSpec| { &mut m.maxFailedIndexes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector>(
            "selector",
            |m: &JobSpec| { &m.selector },
            |m: &mut JobSpec| { &mut m.selector },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "manualSelector",
            |m: &JobSpec| { &m.manualSelector },
            |m: &mut JobSpec| { &mut m.manualSelector },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::api::core::v1::PodTemplateSpec>(
            "template",
            |m: &JobSpec| { &m.template },
            |m: &mut JobSpec| { &mut m.template },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ttlSecondsAfterFinished",
            |m: &JobSpec| { &m.ttlSecondsAfterFinished },
            |m: &mut JobSpec| { &mut m.ttlSecondsAfterFinished },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "completionMode",
            |m: &JobSpec| { &m.completionMode },
            |m: &mut JobSpec| { &mut m.completionMode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "suspend",
            |m: &JobSpec| { &m.suspend },
            |m: &mut JobSpec| { &mut m.suspend },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "podReplacementPolicy",
            |m: &JobSpec| { &m.podReplacementPolicy },
            |m: &mut JobSpec| { &mut m.podReplacementPolicy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "managedBy",
            |m: &JobSpec| { &m.managedBy },
            |m: &mut JobSpec| { &mut m.managedBy },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobSpec>(
            "JobSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobSpec {
    const NAME: &'static str = "JobSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.parallelism = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.completions = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.activeDeadlineSeconds = ::std::option::Option::Some(is.read_int64()?);
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.podFailurePolicy)?;
                },
                130 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.successPolicy)?;
                },
                56 => {
                    self.backoffLimit = ::std::option::Option::Some(is.read_int32()?);
                },
                96 => {
                    self.backoffLimitPerIndex = ::std::option::Option::Some(is.read_int32()?);
                },
                104 => {
                    self.maxFailedIndexes = ::std::option::Option::Some(is.read_int32()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.selector)?;
                },
                40 => {
                    self.manualSelector = ::std::option::Option::Some(is.read_bool()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.template)?;
                },
                64 => {
                    self.ttlSecondsAfterFinished = ::std::option::Option::Some(is.read_int32()?);
                },
                74 => {
                    self.completionMode = ::std::option::Option::Some(is.read_string()?);
                },
                80 => {
                    self.suspend = ::std::option::Option::Some(is.read_bool()?);
                },
                114 => {
                    self.podReplacementPolicy = ::std::option::Option::Some(is.read_string()?);
                },
                122 => {
                    self.managedBy = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.parallelism {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.completions {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.activeDeadlineSeconds {
            my_size += ::protobuf::rt::int64_size(3, v);
        }
        if let Some(v) = self.podFailurePolicy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.successPolicy.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.backoffLimit {
            my_size += ::protobuf::rt::int32_size(7, v);
        }
        if let Some(v) = self.backoffLimitPerIndex {
            my_size += ::protobuf::rt::int32_size(12, v);
        }
        if let Some(v) = self.maxFailedIndexes {
            my_size += ::protobuf::rt::int32_size(13, v);
        }
        if let Some(v) = self.selector.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.manualSelector {
            my_size += 1 + 1;
        }
        if let Some(v) = self.template.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ttlSecondsAfterFinished {
            my_size += ::protobuf::rt::int32_size(8, v);
        }
        if let Some(v) = self.completionMode.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.suspend {
            my_size += 1 + 1;
        }
        if let Some(v) = self.podReplacementPolicy.as_ref() {
            my_size += ::protobuf::rt::string_size(14, &v);
        }
        if let Some(v) = self.managedBy.as_ref() {
            my_size += ::protobuf::rt::string_size(15, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.parallelism {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.completions {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.activeDeadlineSeconds {
            os.write_int64(3, v)?;
        }
        if let Some(v) = self.podFailurePolicy.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.successPolicy.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        }
        if let Some(v) = self.backoffLimit {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.backoffLimitPerIndex {
            os.write_int32(12, v)?;
        }
        if let Some(v) = self.maxFailedIndexes {
            os.write_int32(13, v)?;
        }
        if let Some(v) = self.selector.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.manualSelector {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.template.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.ttlSecondsAfterFinished {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.completionMode.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.suspend {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.podReplacementPolicy.as_ref() {
            os.write_string(14, v)?;
        }
        if let Some(v) = self.managedBy.as_ref() {
            os.write_string(15, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobSpec {
        JobSpec::new()
    }

    fn clear(&mut self) {
        self.parallelism = ::std::option::Option::None;
        self.completions = ::std::option::Option::None;
        self.activeDeadlineSeconds = ::std::option::Option::None;
        self.podFailurePolicy.clear();
        self.successPolicy.clear();
        self.backoffLimit = ::std::option::Option::None;
        self.backoffLimitPerIndex = ::std::option::Option::None;
        self.maxFailedIndexes = ::std::option::Option::None;
        self.selector.clear();
        self.manualSelector = ::std::option::Option::None;
        self.template.clear();
        self.ttlSecondsAfterFinished = ::std::option::Option::None;
        self.completionMode = ::std::option::Option::None;
        self.suspend = ::std::option::Option::None;
        self.podReplacementPolicy = ::std::option::Option::None;
        self.managedBy = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobSpec {
        static instance: JobSpec = JobSpec {
            parallelism: ::std::option::Option::None,
            completions: ::std::option::Option::None,
            activeDeadlineSeconds: ::std::option::Option::None,
            podFailurePolicy: ::protobuf::MessageField::none(),
            successPolicy: ::protobuf::MessageField::none(),
            backoffLimit: ::std::option::Option::None,
            backoffLimitPerIndex: ::std::option::Option::None,
            maxFailedIndexes: ::std::option::Option::None,
            selector: ::protobuf::MessageField::none(),
            manualSelector: ::std::option::Option::None,
            template: ::protobuf::MessageField::none(),
            ttlSecondsAfterFinished: ::std::option::Option::None,
            completionMode: ::std::option::Option::None,
            suspend: ::std::option::Option::None,
            podReplacementPolicy: ::std::option::Option::None,
            managedBy: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.JobStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JobStatus {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobStatus.conditions)
    pub conditions: ::std::vec::Vec<JobCondition>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobStatus.startTime)
    pub startTime: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobStatus.completionTime)
    pub completionTime: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:api.batch.v1.JobStatus.active)
    pub active: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.batch.v1.JobStatus.succeeded)
    pub succeeded: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.batch.v1.JobStatus.failed)
    pub failed: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.batch.v1.JobStatus.terminating)
    pub terminating: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.batch.v1.JobStatus.completedIndexes)
    pub completedIndexes: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1.JobStatus.failedIndexes)
    pub failedIndexes: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobStatus.uncountedTerminatedPods)
    pub uncountedTerminatedPods: ::protobuf::MessageField<UncountedTerminatedPods>,
    // @@protoc_insertion_point(field:api.batch.v1.JobStatus.ready)
    pub ready: ::std::option::Option<i32>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.JobStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobStatus {
    fn default() -> &'a JobStatus {
        <JobStatus as ::protobuf::Message>::default_instance()
    }
}

impl JobStatus {
    pub fn new() -> JobStatus {
        ::std::default::Default::default()
    }

    // repeated .api.batch.v1.JobCondition conditions = 1;

    pub fn conditions(&self) -> &[JobCondition] {
        &self.conditions
    }

    pub fn clear_conditions(&mut self) {
        self.conditions.clear();
    }

    // Param is passed by value, moved
    pub fn set_conditions(&mut self, v: ::std::vec::Vec<JobCondition>) {
        self.conditions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_conditions(&mut self) -> &mut ::std::vec::Vec<JobCondition> {
        &mut self.conditions
    }

    // Take field
    pub fn take_conditions(&mut self) -> ::std::vec::Vec<JobCondition> {
        ::std::mem::replace(&mut self.conditions, ::std::vec::Vec::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time startTime = 2;

    pub fn startTime(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.startTime.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_startTime(&mut self) {
        self.startTime.clear();
    }

    pub fn has_startTime(&self) -> bool {
        self.startTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_startTime(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::Time) {
        self.startTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_startTime(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.startTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_startTime(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.startTime.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time completionTime = 3;

    pub fn completionTime(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.completionTime.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_completionTime(&mut self) {
        self.completionTime.clear();
    }

    pub fn has_completionTime(&self) -> bool {
        self.completionTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_completionTime(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::Time) {
        self.completionTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_completionTime(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.completionTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_completionTime(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::Time {
        self.completionTime.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional int32 active = 4;

    pub fn active(&self) -> i32 {
        self.active.unwrap_or(0)
    }

    pub fn clear_active(&mut self) {
        self.active = ::std::option::Option::None;
    }

    pub fn has_active(&self) -> bool {
        self.active.is_some()
    }

    // Param is passed by value, moved
    pub fn set_active(&mut self, v: i32) {
        self.active = ::std::option::Option::Some(v);
    }

    // optional int32 succeeded = 5;

    pub fn succeeded(&self) -> i32 {
        self.succeeded.unwrap_or(0)
    }

    pub fn clear_succeeded(&mut self) {
        self.succeeded = ::std::option::Option::None;
    }

    pub fn has_succeeded(&self) -> bool {
        self.succeeded.is_some()
    }

    // Param is passed by value, moved
    pub fn set_succeeded(&mut self, v: i32) {
        self.succeeded = ::std::option::Option::Some(v);
    }

    // optional int32 failed = 6;

    pub fn failed(&self) -> i32 {
        self.failed.unwrap_or(0)
    }

    pub fn clear_failed(&mut self) {
        self.failed = ::std::option::Option::None;
    }

    pub fn has_failed(&self) -> bool {
        self.failed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_failed(&mut self, v: i32) {
        self.failed = ::std::option::Option::Some(v);
    }

    // optional int32 terminating = 11;

    pub fn terminating(&self) -> i32 {
        self.terminating.unwrap_or(0)
    }

    pub fn clear_terminating(&mut self) {
        self.terminating = ::std::option::Option::None;
    }

    pub fn has_terminating(&self) -> bool {
        self.terminating.is_some()
    }

    // Param is passed by value, moved
    pub fn set_terminating(&mut self, v: i32) {
        self.terminating = ::std::option::Option::Some(v);
    }

    // optional string completedIndexes = 7;

    pub fn completedIndexes(&self) -> &str {
        match self.completedIndexes.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_completedIndexes(&mut self) {
        self.completedIndexes = ::std::option::Option::None;
    }

    pub fn has_completedIndexes(&self) -> bool {
        self.completedIndexes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_completedIndexes(&mut self, v: ::std::string::String) {
        self.completedIndexes = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_completedIndexes(&mut self) -> &mut ::std::string::String {
        if self.completedIndexes.is_none() {
            self.completedIndexes = ::std::option::Option::Some(::std::string::String::new());
        }
        self.completedIndexes.as_mut().unwrap()
    }

    // Take field
    pub fn take_completedIndexes(&mut self) -> ::std::string::String {
        self.completedIndexes.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string failedIndexes = 10;

    pub fn failedIndexes(&self) -> &str {
        match self.failedIndexes.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_failedIndexes(&mut self) {
        self.failedIndexes = ::std::option::Option::None;
    }

    pub fn has_failedIndexes(&self) -> bool {
        self.failedIndexes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_failedIndexes(&mut self, v: ::std::string::String) {
        self.failedIndexes = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_failedIndexes(&mut self) -> &mut ::std::string::String {
        if self.failedIndexes.is_none() {
            self.failedIndexes = ::std::option::Option::Some(::std::string::String::new());
        }
        self.failedIndexes.as_mut().unwrap()
    }

    // Take field
    pub fn take_failedIndexes(&mut self) -> ::std::string::String {
        self.failedIndexes.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.batch.v1.UncountedTerminatedPods uncountedTerminatedPods = 8;

    pub fn uncountedTerminatedPods(&self) -> &UncountedTerminatedPods {
        self.uncountedTerminatedPods.as_ref().unwrap_or_else(|| <UncountedTerminatedPods as ::protobuf::Message>::default_instance())
    }

    pub fn clear_uncountedTerminatedPods(&mut self) {
        self.uncountedTerminatedPods.clear();
    }

    pub fn has_uncountedTerminatedPods(&self) -> bool {
        self.uncountedTerminatedPods.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uncountedTerminatedPods(&mut self, v: UncountedTerminatedPods) {
        self.uncountedTerminatedPods = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uncountedTerminatedPods(&mut self) -> &mut UncountedTerminatedPods {
        self.uncountedTerminatedPods.mut_or_insert_default()
    }

    // Take field
    pub fn take_uncountedTerminatedPods(&mut self) -> UncountedTerminatedPods {
        self.uncountedTerminatedPods.take().unwrap_or_else(|| UncountedTerminatedPods::new())
    }

    // optional int32 ready = 9;

    pub fn ready(&self) -> i32 {
        self.ready.unwrap_or(0)
    }

    pub fn clear_ready(&mut self) {
        self.ready = ::std::option::Option::None;
    }

    pub fn has_ready(&self) -> bool {
        self.ready.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ready(&mut self, v: i32) {
        self.ready = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "conditions",
            |m: &JobStatus| { &m.conditions },
            |m: &mut JobStatus| { &mut m.conditions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>(
            "startTime",
            |m: &JobStatus| { &m.startTime },
            |m: &mut JobStatus| { &mut m.startTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>(
            "completionTime",
            |m: &JobStatus| { &m.completionTime },
            |m: &mut JobStatus| { &mut m.completionTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "active",
            |m: &JobStatus| { &m.active },
            |m: &mut JobStatus| { &mut m.active },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "succeeded",
            |m: &JobStatus| { &m.succeeded },
            |m: &mut JobStatus| { &mut m.succeeded },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "failed",
            |m: &JobStatus| { &m.failed },
            |m: &mut JobStatus| { &mut m.failed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "terminating",
            |m: &JobStatus| { &m.terminating },
            |m: &mut JobStatus| { &mut m.terminating },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "completedIndexes",
            |m: &JobStatus| { &m.completedIndexes },
            |m: &mut JobStatus| { &mut m.completedIndexes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "failedIndexes",
            |m: &JobStatus| { &m.failedIndexes },
            |m: &mut JobStatus| { &mut m.failedIndexes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UncountedTerminatedPods>(
            "uncountedTerminatedPods",
            |m: &JobStatus| { &m.uncountedTerminatedPods },
            |m: &mut JobStatus| { &mut m.uncountedTerminatedPods },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ready",
            |m: &JobStatus| { &m.ready },
            |m: &mut JobStatus| { &mut m.ready },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobStatus>(
            "JobStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobStatus {
    const NAME: &'static str = "JobStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.conditions.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.startTime)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.completionTime)?;
                },
                32 => {
                    self.active = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.succeeded = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.failed = ::std::option::Option::Some(is.read_int32()?);
                },
                88 => {
                    self.terminating = ::std::option::Option::Some(is.read_int32()?);
                },
                58 => {
                    self.completedIndexes = ::std::option::Option::Some(is.read_string()?);
                },
                82 => {
                    self.failedIndexes = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.uncountedTerminatedPods)?;
                },
                72 => {
                    self.ready = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.conditions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.startTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.completionTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.active {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.succeeded {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.failed {
            my_size += ::protobuf::rt::int32_size(6, v);
        }
        if let Some(v) = self.terminating {
            my_size += ::protobuf::rt::int32_size(11, v);
        }
        if let Some(v) = self.completedIndexes.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.failedIndexes.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        if let Some(v) = self.uncountedTerminatedPods.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ready {
            my_size += ::protobuf::rt::int32_size(9, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.conditions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.startTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.completionTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.active {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.succeeded {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.failed {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.terminating {
            os.write_int32(11, v)?;
        }
        if let Some(v) = self.completedIndexes.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.failedIndexes.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.uncountedTerminatedPods.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.ready {
            os.write_int32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobStatus {
        JobStatus::new()
    }

    fn clear(&mut self) {
        self.conditions.clear();
        self.startTime.clear();
        self.completionTime.clear();
        self.active = ::std::option::Option::None;
        self.succeeded = ::std::option::Option::None;
        self.failed = ::std::option::Option::None;
        self.terminating = ::std::option::Option::None;
        self.completedIndexes = ::std::option::Option::None;
        self.failedIndexes = ::std::option::Option::None;
        self.uncountedTerminatedPods.clear();
        self.ready = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobStatus {
        static instance: JobStatus = JobStatus {
            conditions: ::std::vec::Vec::new(),
            startTime: ::protobuf::MessageField::none(),
            completionTime: ::protobuf::MessageField::none(),
            active: ::std::option::Option::None,
            succeeded: ::std::option::Option::None,
            failed: ::std::option::Option::None,
            terminating: ::std::option::Option::None,
            completedIndexes: ::std::option::Option::None,
            failedIndexes: ::std::option::Option::None,
            uncountedTerminatedPods: ::protobuf::MessageField::none(),
            ready: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.JobTemplateSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JobTemplateSpec {
    // message fields
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobTemplateSpec.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.JobTemplateSpec.spec)
    pub spec: ::protobuf::MessageField<JobSpec>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.JobTemplateSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobTemplateSpec {
    fn default() -> &'a JobTemplateSpec {
        <JobTemplateSpec as ::protobuf::Message>::default_instance()
    }
}

impl JobTemplateSpec {
    pub fn new() -> JobTemplateSpec {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.batch.v1.JobSpec spec = 2;

    pub fn spec(&self) -> &JobSpec {
        self.spec.as_ref().unwrap_or_else(|| <JobSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: JobSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut JobSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> JobSpec {
        self.spec.take().unwrap_or_else(|| JobSpec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &JobTemplateSpec| { &m.metadata },
            |m: &mut JobTemplateSpec| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, JobSpec>(
            "spec",
            |m: &JobTemplateSpec| { &m.spec },
            |m: &mut JobTemplateSpec| { &mut m.spec },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobTemplateSpec>(
            "JobTemplateSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobTemplateSpec {
    const NAME: &'static str = "JobTemplateSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobTemplateSpec {
        JobTemplateSpec::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobTemplateSpec {
        static instance: JobTemplateSpec = JobTemplateSpec {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobTemplateSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobTemplateSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobTemplateSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobTemplateSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.PodFailurePolicy)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodFailurePolicy {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.PodFailurePolicy.rules)
    pub rules: ::std::vec::Vec<PodFailurePolicyRule>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.PodFailurePolicy.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodFailurePolicy {
    fn default() -> &'a PodFailurePolicy {
        <PodFailurePolicy as ::protobuf::Message>::default_instance()
    }
}

impl PodFailurePolicy {
    pub fn new() -> PodFailurePolicy {
        ::std::default::Default::default()
    }

    // repeated .api.batch.v1.PodFailurePolicyRule rules = 1;

    pub fn rules(&self) -> &[PodFailurePolicyRule] {
        &self.rules
    }

    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::std::vec::Vec<PodFailurePolicyRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::std::vec::Vec<PodFailurePolicyRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::std::vec::Vec<PodFailurePolicyRule> {
        ::std::mem::replace(&mut self.rules, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rules",
            |m: &PodFailurePolicy| { &m.rules },
            |m: &mut PodFailurePolicy| { &mut m.rules },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodFailurePolicy>(
            "PodFailurePolicy",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodFailurePolicy {
    const NAME: &'static str = "PodFailurePolicy";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rules.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.rules {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodFailurePolicy {
        PodFailurePolicy::new()
    }

    fn clear(&mut self) {
        self.rules.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodFailurePolicy {
        static instance: PodFailurePolicy = PodFailurePolicy {
            rules: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PodFailurePolicy {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodFailurePolicy").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodFailurePolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodFailurePolicy {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.PodFailurePolicyOnExitCodesRequirement)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodFailurePolicyOnExitCodesRequirement {
    // message fields
    // @@protoc_insertion_point(field:api.batch.v1.PodFailurePolicyOnExitCodesRequirement.containerName)
    pub containerName: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1.PodFailurePolicyOnExitCodesRequirement.operator)
    pub operator: ::std::option::Option<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.PodFailurePolicyOnExitCodesRequirement.values)
    pub values: ::std::vec::Vec<i32>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.PodFailurePolicyOnExitCodesRequirement.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodFailurePolicyOnExitCodesRequirement {
    fn default() -> &'a PodFailurePolicyOnExitCodesRequirement {
        <PodFailurePolicyOnExitCodesRequirement as ::protobuf::Message>::default_instance()
    }
}

impl PodFailurePolicyOnExitCodesRequirement {
    pub fn new() -> PodFailurePolicyOnExitCodesRequirement {
        ::std::default::Default::default()
    }

    // optional string containerName = 1;

    pub fn containerName(&self) -> &str {
        match self.containerName.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_containerName(&mut self) {
        self.containerName = ::std::option::Option::None;
    }

    pub fn has_containerName(&self) -> bool {
        self.containerName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_containerName(&mut self, v: ::std::string::String) {
        self.containerName = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_containerName(&mut self) -> &mut ::std::string::String {
        if self.containerName.is_none() {
            self.containerName = ::std::option::Option::Some(::std::string::String::new());
        }
        self.containerName.as_mut().unwrap()
    }

    // Take field
    pub fn take_containerName(&mut self) -> ::std::string::String {
        self.containerName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string operator = 2;

    pub fn operator(&self) -> &str {
        match self.operator.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_operator(&mut self) {
        self.operator = ::std::option::Option::None;
    }

    pub fn has_operator(&self) -> bool {
        self.operator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operator(&mut self, v: ::std::string::String) {
        self.operator = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operator(&mut self) -> &mut ::std::string::String {
        if self.operator.is_none() {
            self.operator = ::std::option::Option::Some(::std::string::String::new());
        }
        self.operator.as_mut().unwrap()
    }

    // Take field
    pub fn take_operator(&mut self) -> ::std::string::String {
        self.operator.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated int32 values = 3;

    pub fn values(&self) -> &[i32] {
        &self.values
    }

    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::std::vec::Vec<i32>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.values, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "containerName",
            |m: &PodFailurePolicyOnExitCodesRequirement| { &m.containerName },
            |m: &mut PodFailurePolicyOnExitCodesRequirement| { &mut m.containerName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "operator",
            |m: &PodFailurePolicyOnExitCodesRequirement| { &m.operator },
            |m: &mut PodFailurePolicyOnExitCodesRequirement| { &mut m.operator },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &PodFailurePolicyOnExitCodesRequirement| { &m.values },
            |m: &mut PodFailurePolicyOnExitCodesRequirement| { &mut m.values },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodFailurePolicyOnExitCodesRequirement>(
            "PodFailurePolicyOnExitCodesRequirement",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodFailurePolicyOnExitCodesRequirement {
    const NAME: &'static str = "PodFailurePolicyOnExitCodesRequirement";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.containerName = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.operator = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    is.read_repeated_packed_int32_into(&mut self.values)?;
                },
                24 => {
                    self.values.push(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.containerName.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.operator.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.values {
            my_size += ::protobuf::rt::int32_size(3, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.containerName.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.operator.as_ref() {
            os.write_string(2, v)?;
        }
        for v in &self.values {
            os.write_int32(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodFailurePolicyOnExitCodesRequirement {
        PodFailurePolicyOnExitCodesRequirement::new()
    }

    fn clear(&mut self) {
        self.containerName = ::std::option::Option::None;
        self.operator = ::std::option::Option::None;
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodFailurePolicyOnExitCodesRequirement {
        static instance: PodFailurePolicyOnExitCodesRequirement = PodFailurePolicyOnExitCodesRequirement {
            containerName: ::std::option::Option::None,
            operator: ::std::option::Option::None,
            values: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PodFailurePolicyOnExitCodesRequirement {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodFailurePolicyOnExitCodesRequirement").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodFailurePolicyOnExitCodesRequirement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodFailurePolicyOnExitCodesRequirement {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.PodFailurePolicyOnPodConditionsPattern)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodFailurePolicyOnPodConditionsPattern {
    // message fields
    // @@protoc_insertion_point(field:api.batch.v1.PodFailurePolicyOnPodConditionsPattern.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1.PodFailurePolicyOnPodConditionsPattern.status)
    pub status: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.PodFailurePolicyOnPodConditionsPattern.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodFailurePolicyOnPodConditionsPattern {
    fn default() -> &'a PodFailurePolicyOnPodConditionsPattern {
        <PodFailurePolicyOnPodConditionsPattern as ::protobuf::Message>::default_instance()
    }
}

impl PodFailurePolicyOnPodConditionsPattern {
    pub fn new() -> PodFailurePolicyOnPodConditionsPattern {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string status = 2;

    pub fn status(&self) -> &str {
        match self.status.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        if self.status.is_none() {
            self.status = ::std::option::Option::Some(::std::string::String::new());
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        self.status.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &PodFailurePolicyOnPodConditionsPattern| { &m.type_ },
            |m: &mut PodFailurePolicyOnPodConditionsPattern| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &PodFailurePolicyOnPodConditionsPattern| { &m.status },
            |m: &mut PodFailurePolicyOnPodConditionsPattern| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodFailurePolicyOnPodConditionsPattern>(
            "PodFailurePolicyOnPodConditionsPattern",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodFailurePolicyOnPodConditionsPattern {
    const NAME: &'static str = "PodFailurePolicyOnPodConditionsPattern";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.status = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.status.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.status.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodFailurePolicyOnPodConditionsPattern {
        PodFailurePolicyOnPodConditionsPattern::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodFailurePolicyOnPodConditionsPattern {
        static instance: PodFailurePolicyOnPodConditionsPattern = PodFailurePolicyOnPodConditionsPattern {
            type_: ::std::option::Option::None,
            status: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PodFailurePolicyOnPodConditionsPattern {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodFailurePolicyOnPodConditionsPattern").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodFailurePolicyOnPodConditionsPattern {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodFailurePolicyOnPodConditionsPattern {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.PodFailurePolicyRule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodFailurePolicyRule {
    // message fields
    // @@protoc_insertion_point(field:api.batch.v1.PodFailurePolicyRule.action)
    pub action: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.PodFailurePolicyRule.onExitCodes)
    pub onExitCodes: ::protobuf::MessageField<PodFailurePolicyOnExitCodesRequirement>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.PodFailurePolicyRule.onPodConditions)
    pub onPodConditions: ::std::vec::Vec<PodFailurePolicyOnPodConditionsPattern>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.PodFailurePolicyRule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodFailurePolicyRule {
    fn default() -> &'a PodFailurePolicyRule {
        <PodFailurePolicyRule as ::protobuf::Message>::default_instance()
    }
}

impl PodFailurePolicyRule {
    pub fn new() -> PodFailurePolicyRule {
        ::std::default::Default::default()
    }

    // optional string action = 1;

    pub fn action(&self) -> &str {
        match self.action.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_action(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        self.action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: ::std::string::String) {
        self.action = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action(&mut self) -> &mut ::std::string::String {
        if self.action.is_none() {
            self.action = ::std::option::Option::Some(::std::string::String::new());
        }
        self.action.as_mut().unwrap()
    }

    // Take field
    pub fn take_action(&mut self) -> ::std::string::String {
        self.action.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .api.batch.v1.PodFailurePolicyOnExitCodesRequirement onExitCodes = 2;

    pub fn onExitCodes(&self) -> &PodFailurePolicyOnExitCodesRequirement {
        self.onExitCodes.as_ref().unwrap_or_else(|| <PodFailurePolicyOnExitCodesRequirement as ::protobuf::Message>::default_instance())
    }

    pub fn clear_onExitCodes(&mut self) {
        self.onExitCodes.clear();
    }

    pub fn has_onExitCodes(&self) -> bool {
        self.onExitCodes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_onExitCodes(&mut self, v: PodFailurePolicyOnExitCodesRequirement) {
        self.onExitCodes = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_onExitCodes(&mut self) -> &mut PodFailurePolicyOnExitCodesRequirement {
        self.onExitCodes.mut_or_insert_default()
    }

    // Take field
    pub fn take_onExitCodes(&mut self) -> PodFailurePolicyOnExitCodesRequirement {
        self.onExitCodes.take().unwrap_or_else(|| PodFailurePolicyOnExitCodesRequirement::new())
    }

    // repeated .api.batch.v1.PodFailurePolicyOnPodConditionsPattern onPodConditions = 3;

    pub fn onPodConditions(&self) -> &[PodFailurePolicyOnPodConditionsPattern] {
        &self.onPodConditions
    }

    pub fn clear_onPodConditions(&mut self) {
        self.onPodConditions.clear();
    }

    // Param is passed by value, moved
    pub fn set_onPodConditions(&mut self, v: ::std::vec::Vec<PodFailurePolicyOnPodConditionsPattern>) {
        self.onPodConditions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_onPodConditions(&mut self) -> &mut ::std::vec::Vec<PodFailurePolicyOnPodConditionsPattern> {
        &mut self.onPodConditions
    }

    // Take field
    pub fn take_onPodConditions(&mut self) -> ::std::vec::Vec<PodFailurePolicyOnPodConditionsPattern> {
        ::std::mem::replace(&mut self.onPodConditions, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "action",
            |m: &PodFailurePolicyRule| { &m.action },
            |m: &mut PodFailurePolicyRule| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PodFailurePolicyOnExitCodesRequirement>(
            "onExitCodes",
            |m: &PodFailurePolicyRule| { &m.onExitCodes },
            |m: &mut PodFailurePolicyRule| { &mut m.onExitCodes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "onPodConditions",
            |m: &PodFailurePolicyRule| { &m.onPodConditions },
            |m: &mut PodFailurePolicyRule| { &mut m.onPodConditions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodFailurePolicyRule>(
            "PodFailurePolicyRule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodFailurePolicyRule {
    const NAME: &'static str = "PodFailurePolicyRule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.action = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.onExitCodes)?;
                },
                26 => {
                    self.onPodConditions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.action.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.onExitCodes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.onPodConditions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.action.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.onExitCodes.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.onPodConditions {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodFailurePolicyRule {
        PodFailurePolicyRule::new()
    }

    fn clear(&mut self) {
        self.action = ::std::option::Option::None;
        self.onExitCodes.clear();
        self.onPodConditions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodFailurePolicyRule {
        static instance: PodFailurePolicyRule = PodFailurePolicyRule {
            action: ::std::option::Option::None,
            onExitCodes: ::protobuf::MessageField::none(),
            onPodConditions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PodFailurePolicyRule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodFailurePolicyRule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodFailurePolicyRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodFailurePolicyRule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.SuccessPolicy)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SuccessPolicy {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.SuccessPolicy.rules)
    pub rules: ::std::vec::Vec<SuccessPolicyRule>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.SuccessPolicy.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SuccessPolicy {
    fn default() -> &'a SuccessPolicy {
        <SuccessPolicy as ::protobuf::Message>::default_instance()
    }
}

impl SuccessPolicy {
    pub fn new() -> SuccessPolicy {
        ::std::default::Default::default()
    }

    // repeated .api.batch.v1.SuccessPolicyRule rules = 1;

    pub fn rules(&self) -> &[SuccessPolicyRule] {
        &self.rules
    }

    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::std::vec::Vec<SuccessPolicyRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::std::vec::Vec<SuccessPolicyRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::std::vec::Vec<SuccessPolicyRule> {
        ::std::mem::replace(&mut self.rules, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rules",
            |m: &SuccessPolicy| { &m.rules },
            |m: &mut SuccessPolicy| { &mut m.rules },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SuccessPolicy>(
            "SuccessPolicy",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SuccessPolicy {
    const NAME: &'static str = "SuccessPolicy";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rules.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.rules {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SuccessPolicy {
        SuccessPolicy::new()
    }

    fn clear(&mut self) {
        self.rules.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SuccessPolicy {
        static instance: SuccessPolicy = SuccessPolicy {
            rules: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SuccessPolicy {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SuccessPolicy").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SuccessPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SuccessPolicy {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.SuccessPolicyRule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SuccessPolicyRule {
    // message fields
    // @@protoc_insertion_point(field:api.batch.v1.SuccessPolicyRule.succeededIndexes)
    pub succeededIndexes: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:api.batch.v1.SuccessPolicyRule.succeededCount)
    pub succeededCount: ::std::option::Option<i32>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.SuccessPolicyRule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SuccessPolicyRule {
    fn default() -> &'a SuccessPolicyRule {
        <SuccessPolicyRule as ::protobuf::Message>::default_instance()
    }
}

impl SuccessPolicyRule {
    pub fn new() -> SuccessPolicyRule {
        ::std::default::Default::default()
    }

    // optional string succeededIndexes = 1;

    pub fn succeededIndexes(&self) -> &str {
        match self.succeededIndexes.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_succeededIndexes(&mut self) {
        self.succeededIndexes = ::std::option::Option::None;
    }

    pub fn has_succeededIndexes(&self) -> bool {
        self.succeededIndexes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_succeededIndexes(&mut self, v: ::std::string::String) {
        self.succeededIndexes = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_succeededIndexes(&mut self) -> &mut ::std::string::String {
        if self.succeededIndexes.is_none() {
            self.succeededIndexes = ::std::option::Option::Some(::std::string::String::new());
        }
        self.succeededIndexes.as_mut().unwrap()
    }

    // Take field
    pub fn take_succeededIndexes(&mut self) -> ::std::string::String {
        self.succeededIndexes.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 succeededCount = 2;

    pub fn succeededCount(&self) -> i32 {
        self.succeededCount.unwrap_or(0)
    }

    pub fn clear_succeededCount(&mut self) {
        self.succeededCount = ::std::option::Option::None;
    }

    pub fn has_succeededCount(&self) -> bool {
        self.succeededCount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_succeededCount(&mut self, v: i32) {
        self.succeededCount = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "succeededIndexes",
            |m: &SuccessPolicyRule| { &m.succeededIndexes },
            |m: &mut SuccessPolicyRule| { &mut m.succeededIndexes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "succeededCount",
            |m: &SuccessPolicyRule| { &m.succeededCount },
            |m: &mut SuccessPolicyRule| { &mut m.succeededCount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SuccessPolicyRule>(
            "SuccessPolicyRule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SuccessPolicyRule {
    const NAME: &'static str = "SuccessPolicyRule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.succeededIndexes = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.succeededCount = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.succeededIndexes.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.succeededCount {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.succeededIndexes.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.succeededCount {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SuccessPolicyRule {
        SuccessPolicyRule::new()
    }

    fn clear(&mut self) {
        self.succeededIndexes = ::std::option::Option::None;
        self.succeededCount = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SuccessPolicyRule {
        static instance: SuccessPolicyRule = SuccessPolicyRule {
            succeededIndexes: ::std::option::Option::None,
            succeededCount: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SuccessPolicyRule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SuccessPolicyRule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SuccessPolicyRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SuccessPolicyRule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.batch.v1.UncountedTerminatedPods)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UncountedTerminatedPods {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.UncountedTerminatedPods.succeeded)
    pub succeeded: ::std::vec::Vec<::std::string::String>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.batch.v1.UncountedTerminatedPods.failed)
    pub failed: ::std::vec::Vec<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.batch.v1.UncountedTerminatedPods.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UncountedTerminatedPods {
    fn default() -> &'a UncountedTerminatedPods {
        <UncountedTerminatedPods as ::protobuf::Message>::default_instance()
    }
}

impl UncountedTerminatedPods {
    pub fn new() -> UncountedTerminatedPods {
        ::std::default::Default::default()
    }

    // repeated string succeeded = 1;

    pub fn succeeded(&self) -> &[::std::string::String] {
        &self.succeeded
    }

    pub fn clear_succeeded(&mut self) {
        self.succeeded.clear();
    }

    // Param is passed by value, moved
    pub fn set_succeeded(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.succeeded = v;
    }

    // Mutable pointer to the field.
    pub fn mut_succeeded(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.succeeded
    }

    // Take field
    pub fn take_succeeded(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.succeeded, ::std::vec::Vec::new())
    }

    // repeated string failed = 2;

    pub fn failed(&self) -> &[::std::string::String] {
        &self.failed
    }

    pub fn clear_failed(&mut self) {
        self.failed.clear();
    }

    // Param is passed by value, moved
    pub fn set_failed(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.failed = v;
    }

    // Mutable pointer to the field.
    pub fn mut_failed(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.failed
    }

    // Take field
    pub fn take_failed(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.failed, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "succeeded",
            |m: &UncountedTerminatedPods| { &m.succeeded },
            |m: &mut UncountedTerminatedPods| { &mut m.succeeded },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "failed",
            |m: &UncountedTerminatedPods| { &m.failed },
            |m: &mut UncountedTerminatedPods| { &mut m.failed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UncountedTerminatedPods>(
            "UncountedTerminatedPods",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UncountedTerminatedPods {
    const NAME: &'static str = "UncountedTerminatedPods";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.succeeded.push(is.read_string()?);
                },
                18 => {
                    self.failed.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.succeeded {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.failed {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.succeeded {
            os.write_string(1, &v)?;
        };
        for v in &self.failed {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UncountedTerminatedPods {
        UncountedTerminatedPods::new()
    }

    fn clear(&mut self) {
        self.succeeded.clear();
        self.failed.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UncountedTerminatedPods {
        static instance: UncountedTerminatedPods = UncountedTerminatedPods {
            succeeded: ::std::vec::Vec::new(),
            failed: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UncountedTerminatedPods {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UncountedTerminatedPods").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UncountedTerminatedPods {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UncountedTerminatedPods {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1capi/batch/v1/generated.proto\x12\x0capi.batch.v1\x1a\x1bapi/core/v\
    1/generated.proto\x1a-apimachinery/pkg/apis/meta/v1/generated.proto\x1a(\
    apimachinery/pkg/runtime/generated.proto\x1a/apimachinery/pkg/runtime/sc\
    hema/generated.proto\"\xb4\x01\n\x07CronJob\x12E\n\x08metadata\x18\x01\
    \x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\x08metadata\
    \x12-\n\x04spec\x18\x02\x20\x01(\x0b2\x19.api.batch.v1.CronJobSpecR\x04s\
    pec\x123\n\x06status\x18\x03\x20\x01(\x0b2\x1b.api.batch.v1.CronJobStatu\
    sR\x06status\"\x7f\n\x0bCronJobList\x12C\n\x08metadata\x18\x01\x20\x01(\
    \x0b2'.apimachinery.pkg.apis.meta.v1.ListMetaR\x08metadata\x12+\n\x05ite\
    ms\x18\x02\x20\x03(\x0b2\x15.api.batch.v1.CronJobR\x05items\"\x80\x03\n\
    \x0bCronJobSpec\x12\x1a\n\x08schedule\x18\x01\x20\x01(\tR\x08schedule\
    \x12\x1a\n\x08timeZone\x18\x08\x20\x01(\tR\x08timeZone\x128\n\x17startin\
    gDeadlineSeconds\x18\x02\x20\x01(\x03R\x17startingDeadlineSeconds\x12,\n\
    \x11concurrencyPolicy\x18\x03\x20\x01(\tR\x11concurrencyPolicy\x12\x18\n\
    \x07suspend\x18\x04\x20\x01(\x08R\x07suspend\x12?\n\x0bjobTemplate\x18\
    \x05\x20\x01(\x0b2\x1d.api.batch.v1.JobTemplateSpecR\x0bjobTemplate\x12>\
    \n\x1asuccessfulJobsHistoryLimit\x18\x06\x20\x01(\x05R\x1asuccessfulJobs\
    HistoryLimit\x126\n\x16failedJobsHistoryLimit\x18\x07\x20\x01(\x05R\x16f\
    ailedJobsHistoryLimit\"\xeb\x01\n\rCronJobStatus\x124\n\x06active\x18\
    \x01\x20\x03(\x0b2\x1c.api.core.v1.ObjectReferenceR\x06active\x12O\n\x10\
    lastScheduleTime\x18\x04\x20\x01(\x0b2#.apimachinery.pkg.apis.meta.v1.Ti\
    meR\x10lastScheduleTime\x12S\n\x12lastSuccessfulTime\x18\x05\x20\x01(\
    \x0b2#.apimachinery.pkg.apis.meta.v1.TimeR\x12lastSuccessfulTime\"\xa8\
    \x01\n\x03Job\x12E\n\x08metadata\x18\x01\x20\x01(\x0b2).apimachinery.pkg\
    .apis.meta.v1.ObjectMetaR\x08metadata\x12)\n\x04spec\x18\x02\x20\x01(\
    \x0b2\x15.api.batch.v1.JobSpecR\x04spec\x12/\n\x06status\x18\x03\x20\x01\
    (\x0b2\x17.api.batch.v1.JobStatusR\x06status\"\x8c\x02\n\x0cJobCondition\
    \x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12\x16\n\x06status\x18\
    \x02\x20\x01(\tR\x06status\x12I\n\rlastProbeTime\x18\x03\x20\x01(\x0b2#.\
    apimachinery.pkg.apis.meta.v1.TimeR\rlastProbeTime\x12S\n\x12lastTransit\
    ionTime\x18\x04\x20\x01(\x0b2#.apimachinery.pkg.apis.meta.v1.TimeR\x12la\
    stTransitionTime\x12\x16\n\x06reason\x18\x05\x20\x01(\tR\x06reason\x12\
    \x18\n\x07message\x18\x06\x20\x01(\tR\x07message\"w\n\x07JobList\x12C\n\
    \x08metadata\x18\x01\x20\x01(\x0b2'.apimachinery.pkg.apis.meta.v1.ListMe\
    taR\x08metadata\x12'\n\x05items\x18\x02\x20\x03(\x0b2\x11.api.batch.v1.J\
    obR\x05items\"\x90\x06\n\x07JobSpec\x12\x20\n\x0bparallelism\x18\x01\x20\
    \x01(\x05R\x0bparallelism\x12\x20\n\x0bcompletions\x18\x02\x20\x01(\x05R\
    \x0bcompletions\x124\n\x15activeDeadlineSeconds\x18\x03\x20\x01(\x03R\
    \x15activeDeadlineSeconds\x12J\n\x10podFailurePolicy\x18\x0b\x20\x01(\
    \x0b2\x1e.api.batch.v1.PodFailurePolicyR\x10podFailurePolicy\x12A\n\rsuc\
    cessPolicy\x18\x10\x20\x01(\x0b2\x1b.api.batch.v1.SuccessPolicyR\rsucces\
    sPolicy\x12\"\n\x0cbackoffLimit\x18\x07\x20\x01(\x05R\x0cbackoffLimit\
    \x122\n\x14backoffLimitPerIndex\x18\x0c\x20\x01(\x05R\x14backoffLimitPer\
    Index\x12*\n\x10maxFailedIndexes\x18\r\x20\x01(\x05R\x10maxFailedIndexes\
    \x12H\n\x08selector\x18\x04\x20\x01(\x0b2,.apimachinery.pkg.apis.meta.v1\
    .LabelSelectorR\x08selector\x12&\n\x0emanualSelector\x18\x05\x20\x01(\
    \x08R\x0emanualSelector\x128\n\x08template\x18\x06\x20\x01(\x0b2\x1c.api\
    .core.v1.PodTemplateSpecR\x08template\x128\n\x17ttlSecondsAfterFinished\
    \x18\x08\x20\x01(\x05R\x17ttlSecondsAfterFinished\x12&\n\x0ecompletionMo\
    de\x18\t\x20\x01(\tR\x0ecompletionMode\x12\x18\n\x07suspend\x18\n\x20\
    \x01(\x08R\x07suspend\x122\n\x14podReplacementPolicy\x18\x0e\x20\x01(\tR\
    \x14podReplacementPolicy\x12\x1c\n\tmanagedBy\x18\x0f\x20\x01(\tR\tmanag\
    edBy\"\x90\x04\n\tJobStatus\x12:\n\nconditions\x18\x01\x20\x03(\x0b2\x1a\
    .api.batch.v1.JobConditionR\nconditions\x12A\n\tstartTime\x18\x02\x20\
    \x01(\x0b2#.apimachinery.pkg.apis.meta.v1.TimeR\tstartTime\x12K\n\x0ecom\
    pletionTime\x18\x03\x20\x01(\x0b2#.apimachinery.pkg.apis.meta.v1.TimeR\
    \x0ecompletionTime\x12\x16\n\x06active\x18\x04\x20\x01(\x05R\x06active\
    \x12\x1c\n\tsucceeded\x18\x05\x20\x01(\x05R\tsucceeded\x12\x16\n\x06fail\
    ed\x18\x06\x20\x01(\x05R\x06failed\x12\x20\n\x0bterminating\x18\x0b\x20\
    \x01(\x05R\x0bterminating\x12*\n\x10completedIndexes\x18\x07\x20\x01(\tR\
    \x10completedIndexes\x12$\n\rfailedIndexes\x18\n\x20\x01(\tR\rfailedInde\
    xes\x12_\n\x17uncountedTerminatedPods\x18\x08\x20\x01(\x0b2%.api.batch.v\
    1.UncountedTerminatedPodsR\x17uncountedTerminatedPods\x12\x14\n\x05ready\
    \x18\t\x20\x01(\x05R\x05ready\"\x83\x01\n\x0fJobTemplateSpec\x12E\n\x08m\
    etadata\x18\x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\
    \x08metadata\x12)\n\x04spec\x18\x02\x20\x01(\x0b2\x15.api.batch.v1.JobSp\
    ecR\x04spec\"L\n\x10PodFailurePolicy\x128\n\x05rules\x18\x01\x20\x03(\
    \x0b2\".api.batch.v1.PodFailurePolicyRuleR\x05rules\"\x82\x01\n&PodFailu\
    rePolicyOnExitCodesRequirement\x12$\n\rcontainerName\x18\x01\x20\x01(\tR\
    \rcontainerName\x12\x1a\n\x08operator\x18\x02\x20\x01(\tR\x08operator\
    \x12\x16\n\x06values\x18\x03\x20\x03(\x05R\x06values\"T\n&PodFailurePoli\
    cyOnPodConditionsPattern\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\
    \x12\x16\n\x06status\x18\x02\x20\x01(\tR\x06status\"\xe6\x01\n\x14PodFai\
    lurePolicyRule\x12\x16\n\x06action\x18\x01\x20\x01(\tR\x06action\x12V\n\
    \x0bonExitCodes\x18\x02\x20\x01(\x0b24.api.batch.v1.PodFailurePolicyOnEx\
    itCodesRequirementR\x0bonExitCodes\x12^\n\x0fonPodConditions\x18\x03\x20\
    \x03(\x0b24.api.batch.v1.PodFailurePolicyOnPodConditionsPatternR\x0fonPo\
    dConditions\"F\n\rSuccessPolicy\x125\n\x05rules\x18\x01\x20\x03(\x0b2\
    \x1f.api.batch.v1.SuccessPolicyRuleR\x05rules\"g\n\x11SuccessPolicyRule\
    \x12*\n\x10succeededIndexes\x18\x01\x20\x01(\tR\x10succeededIndexes\x12&\
    \n\x0esucceededCount\x18\x02\x20\x01(\x05R\x0esucceededCount\"O\n\x17Unc\
    ountedTerminatedPods\x12\x1c\n\tsucceeded\x18\x01\x20\x03(\tR\tsucceeded\
    \x12\x16\n\x06failed\x18\x02\x20\x03(\tR\x06failedB\x15Z\x13k8s.io/api/b\
    atch/v1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(17);
            messages.push(CronJob::generated_message_descriptor_data());
            messages.push(CronJobList::generated_message_descriptor_data());
            messages.push(CronJobSpec::generated_message_descriptor_data());
            messages.push(CronJobStatus::generated_message_descriptor_data());
            messages.push(Job::generated_message_descriptor_data());
            messages.push(JobCondition::generated_message_descriptor_data());
            messages.push(JobList::generated_message_descriptor_data());
            messages.push(JobSpec::generated_message_descriptor_data());
            messages.push(JobStatus::generated_message_descriptor_data());
            messages.push(JobTemplateSpec::generated_message_descriptor_data());
            messages.push(PodFailurePolicy::generated_message_descriptor_data());
            messages.push(PodFailurePolicyOnExitCodesRequirement::generated_message_descriptor_data());
            messages.push(PodFailurePolicyOnPodConditionsPattern::generated_message_descriptor_data());
            messages.push(PodFailurePolicyRule::generated_message_descriptor_data());
            messages.push(SuccessPolicy::generated_message_descriptor_data());
            messages.push(SuccessPolicyRule::generated_message_descriptor_data());
            messages.push(UncountedTerminatedPods::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
