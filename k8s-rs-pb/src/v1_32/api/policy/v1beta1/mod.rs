// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api/policy/v1beta1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.policy.v1beta1.Eviction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Eviction {
    // message fields
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.policy.v1beta1.Eviction.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.policy.v1beta1.Eviction.deleteOptions)
    pub deleteOptions: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::DeleteOptions>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.policy.v1beta1.Eviction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Eviction {
    fn default() -> &'a Eviction {
        <Eviction as ::protobuf::Message>::default_instance()
    }
}

impl Eviction {
    pub fn new() -> Eviction {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.DeleteOptions deleteOptions = 2;

    pub fn deleteOptions(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::DeleteOptions {
        self.deleteOptions.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::DeleteOptions as ::protobuf::Message>::default_instance())
    }

    pub fn clear_deleteOptions(&mut self) {
        self.deleteOptions.clear();
    }

    pub fn has_deleteOptions(&self) -> bool {
        self.deleteOptions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deleteOptions(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::DeleteOptions) {
        self.deleteOptions = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deleteOptions(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::DeleteOptions {
        self.deleteOptions.mut_or_insert_default()
    }

    // Take field
    pub fn take_deleteOptions(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::DeleteOptions {
        self.deleteOptions.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::DeleteOptions::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &Eviction| { &m.metadata },
            |m: &mut Eviction| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::DeleteOptions>(
            "deleteOptions",
            |m: &Eviction| { &m.deleteOptions },
            |m: &mut Eviction| { &mut m.deleteOptions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Eviction>(
            "Eviction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Eviction {
    const NAME: &'static str = "Eviction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.deleteOptions)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.deleteOptions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.deleteOptions.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Eviction {
        Eviction::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.deleteOptions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Eviction {
        static instance: Eviction = Eviction {
            metadata: ::protobuf::MessageField::none(),
            deleteOptions: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Eviction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Eviction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Eviction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Eviction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.policy.v1beta1.PodDisruptionBudget)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodDisruptionBudget {
    // message fields
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudget.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudget.spec)
    pub spec: ::protobuf::MessageField<PodDisruptionBudgetSpec>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudget.status)
    pub status: ::protobuf::MessageField<PodDisruptionBudgetStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.policy.v1beta1.PodDisruptionBudget.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodDisruptionBudget {
    fn default() -> &'a PodDisruptionBudget {
        <PodDisruptionBudget as ::protobuf::Message>::default_instance()
    }
}

impl PodDisruptionBudget {
    pub fn new() -> PodDisruptionBudget {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .api.policy.v1beta1.PodDisruptionBudgetSpec spec = 2;

    pub fn spec(&self) -> &PodDisruptionBudgetSpec {
        self.spec.as_ref().unwrap_or_else(|| <PodDisruptionBudgetSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: PodDisruptionBudgetSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut PodDisruptionBudgetSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> PodDisruptionBudgetSpec {
        self.spec.take().unwrap_or_else(|| PodDisruptionBudgetSpec::new())
    }

    // optional .api.policy.v1beta1.PodDisruptionBudgetStatus status = 3;

    pub fn status(&self) -> &PodDisruptionBudgetStatus {
        self.status.as_ref().unwrap_or_else(|| <PodDisruptionBudgetStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: PodDisruptionBudgetStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut PodDisruptionBudgetStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> PodDisruptionBudgetStatus {
        self.status.take().unwrap_or_else(|| PodDisruptionBudgetStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &PodDisruptionBudget| { &m.metadata },
            |m: &mut PodDisruptionBudget| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PodDisruptionBudgetSpec>(
            "spec",
            |m: &PodDisruptionBudget| { &m.spec },
            |m: &mut PodDisruptionBudget| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PodDisruptionBudgetStatus>(
            "status",
            |m: &PodDisruptionBudget| { &m.status },
            |m: &mut PodDisruptionBudget| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodDisruptionBudget>(
            "PodDisruptionBudget",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodDisruptionBudget {
    const NAME: &'static str = "PodDisruptionBudget";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodDisruptionBudget {
        PodDisruptionBudget::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodDisruptionBudget {
        static instance: PodDisruptionBudget = PodDisruptionBudget {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PodDisruptionBudget {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodDisruptionBudget").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodDisruptionBudget {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodDisruptionBudget {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.policy.v1beta1.PodDisruptionBudgetList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodDisruptionBudgetList {
    // message fields
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetList.metadata)
    pub metadata: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetList.items)
    pub items: ::std::vec::Vec<PodDisruptionBudget>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.policy.v1beta1.PodDisruptionBudgetList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodDisruptionBudgetList {
    fn default() -> &'a PodDisruptionBudgetList {
        <PodDisruptionBudgetList as ::protobuf::Message>::default_instance()
    }
}

impl PodDisruptionBudgetList {
    pub fn new() -> PodDisruptionBudgetList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .api.policy.v1beta1.PodDisruptionBudget items = 2;

    pub fn items(&self) -> &[PodDisruptionBudget] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<PodDisruptionBudget>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<PodDisruptionBudget> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<PodDisruptionBudget> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &PodDisruptionBudgetList| { &m.metadata },
            |m: &mut PodDisruptionBudgetList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &PodDisruptionBudgetList| { &m.items },
            |m: &mut PodDisruptionBudgetList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodDisruptionBudgetList>(
            "PodDisruptionBudgetList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodDisruptionBudgetList {
    const NAME: &'static str = "PodDisruptionBudgetList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodDisruptionBudgetList {
        PodDisruptionBudgetList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodDisruptionBudgetList {
        static instance: PodDisruptionBudgetList = PodDisruptionBudgetList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PodDisruptionBudgetList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodDisruptionBudgetList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodDisruptionBudgetList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodDisruptionBudgetList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.policy.v1beta1.PodDisruptionBudgetSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodDisruptionBudgetSpec {
    // message fields
    #[serde(with = "crate::v1_32::intorstr")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetSpec.minAvailable)
    pub minAvailable: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::util::intstr::IntOrString>,
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetSpec.selector)
    pub selector: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector>,
    #[serde(with = "crate::v1_32::intorstr")]
    #[serde(default)]
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetSpec.maxUnavailable)
    pub maxUnavailable: ::protobuf::MessageField<crate::v1_32::apimachinery::pkg::util::intstr::IntOrString>,
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetSpec.unhealthyPodEvictionPolicy)
    pub unhealthyPodEvictionPolicy: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.policy.v1beta1.PodDisruptionBudgetSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodDisruptionBudgetSpec {
    fn default() -> &'a PodDisruptionBudgetSpec {
        <PodDisruptionBudgetSpec as ::protobuf::Message>::default_instance()
    }
}

impl PodDisruptionBudgetSpec {
    pub fn new() -> PodDisruptionBudgetSpec {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.util.intstr.IntOrString minAvailable = 1;

    pub fn minAvailable(&self) -> &crate::v1_32::apimachinery::pkg::util::intstr::IntOrString {
        self.minAvailable.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::util::intstr::IntOrString as ::protobuf::Message>::default_instance())
    }

    pub fn clear_minAvailable(&mut self) {
        self.minAvailable.clear();
    }

    pub fn has_minAvailable(&self) -> bool {
        self.minAvailable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_minAvailable(&mut self, v: crate::v1_32::apimachinery::pkg::util::intstr::IntOrString) {
        self.minAvailable = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_minAvailable(&mut self) -> &mut crate::v1_32::apimachinery::pkg::util::intstr::IntOrString {
        self.minAvailable.mut_or_insert_default()
    }

    // Take field
    pub fn take_minAvailable(&mut self) -> crate::v1_32::apimachinery::pkg::util::intstr::IntOrString {
        self.minAvailable.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::util::intstr::IntOrString::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.LabelSelector selector = 2;

    pub fn selector(&self) -> &crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.selector.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector as ::protobuf::Message>::default_instance())
    }

    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    pub fn has_selector(&self) -> bool {
        self.selector.is_some()
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector) {
        self.selector = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.selector.mut_or_insert_default()
    }

    // Take field
    pub fn take_selector(&mut self) -> crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector {
        self.selector.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector::new())
    }

    // optional .apimachinery.pkg.util.intstr.IntOrString maxUnavailable = 3;

    pub fn maxUnavailable(&self) -> &crate::v1_32::apimachinery::pkg::util::intstr::IntOrString {
        self.maxUnavailable.as_ref().unwrap_or_else(|| <crate::v1_32::apimachinery::pkg::util::intstr::IntOrString as ::protobuf::Message>::default_instance())
    }

    pub fn clear_maxUnavailable(&mut self) {
        self.maxUnavailable.clear();
    }

    pub fn has_maxUnavailable(&self) -> bool {
        self.maxUnavailable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_maxUnavailable(&mut self, v: crate::v1_32::apimachinery::pkg::util::intstr::IntOrString) {
        self.maxUnavailable = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_maxUnavailable(&mut self) -> &mut crate::v1_32::apimachinery::pkg::util::intstr::IntOrString {
        self.maxUnavailable.mut_or_insert_default()
    }

    // Take field
    pub fn take_maxUnavailable(&mut self) -> crate::v1_32::apimachinery::pkg::util::intstr::IntOrString {
        self.maxUnavailable.take().unwrap_or_else(|| crate::v1_32::apimachinery::pkg::util::intstr::IntOrString::new())
    }

    // optional string unhealthyPodEvictionPolicy = 4;

    pub fn unhealthyPodEvictionPolicy(&self) -> &str {
        match self.unhealthyPodEvictionPolicy.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_unhealthyPodEvictionPolicy(&mut self) {
        self.unhealthyPodEvictionPolicy = ::std::option::Option::None;
    }

    pub fn has_unhealthyPodEvictionPolicy(&self) -> bool {
        self.unhealthyPodEvictionPolicy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unhealthyPodEvictionPolicy(&mut self, v: ::std::string::String) {
        self.unhealthyPodEvictionPolicy = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unhealthyPodEvictionPolicy(&mut self) -> &mut ::std::string::String {
        if self.unhealthyPodEvictionPolicy.is_none() {
            self.unhealthyPodEvictionPolicy = ::std::option::Option::Some(::std::string::String::new());
        }
        self.unhealthyPodEvictionPolicy.as_mut().unwrap()
    }

    // Take field
    pub fn take_unhealthyPodEvictionPolicy(&mut self) -> ::std::string::String {
        self.unhealthyPodEvictionPolicy.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::util::intstr::IntOrString>(
            "minAvailable",
            |m: &PodDisruptionBudgetSpec| { &m.minAvailable },
            |m: &mut PodDisruptionBudgetSpec| { &mut m.minAvailable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::apis::meta::v1::LabelSelector>(
            "selector",
            |m: &PodDisruptionBudgetSpec| { &m.selector },
            |m: &mut PodDisruptionBudgetSpec| { &mut m.selector },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::v1_32::apimachinery::pkg::util::intstr::IntOrString>(
            "maxUnavailable",
            |m: &PodDisruptionBudgetSpec| { &m.maxUnavailable },
            |m: &mut PodDisruptionBudgetSpec| { &mut m.maxUnavailable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "unhealthyPodEvictionPolicy",
            |m: &PodDisruptionBudgetSpec| { &m.unhealthyPodEvictionPolicy },
            |m: &mut PodDisruptionBudgetSpec| { &mut m.unhealthyPodEvictionPolicy },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodDisruptionBudgetSpec>(
            "PodDisruptionBudgetSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodDisruptionBudgetSpec {
    const NAME: &'static str = "PodDisruptionBudgetSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.minAvailable)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.selector)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.maxUnavailable)?;
                },
                34 => {
                    self.unhealthyPodEvictionPolicy = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.minAvailable.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.selector.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.maxUnavailable.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.unhealthyPodEvictionPolicy.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.minAvailable.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.selector.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.maxUnavailable.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.unhealthyPodEvictionPolicy.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodDisruptionBudgetSpec {
        PodDisruptionBudgetSpec::new()
    }

    fn clear(&mut self) {
        self.minAvailable.clear();
        self.selector.clear();
        self.maxUnavailable.clear();
        self.unhealthyPodEvictionPolicy = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodDisruptionBudgetSpec {
        static instance: PodDisruptionBudgetSpec = PodDisruptionBudgetSpec {
            minAvailable: ::protobuf::MessageField::none(),
            selector: ::protobuf::MessageField::none(),
            maxUnavailable: ::protobuf::MessageField::none(),
            unhealthyPodEvictionPolicy: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PodDisruptionBudgetSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodDisruptionBudgetSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodDisruptionBudgetSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodDisruptionBudgetSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:api.policy.v1beta1.PodDisruptionBudgetStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodDisruptionBudgetStatus {
    // message fields
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetStatus.observedGeneration)
    pub observedGeneration: ::std::option::Option<i64>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetStatus.disruptedPods)
    pub disruptedPods: ::std::collections::BTreeMap<::std::string::String, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetStatus.disruptionsAllowed)
    pub disruptionsAllowed: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetStatus.currentHealthy)
    pub currentHealthy: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetStatus.desiredHealthy)
    pub desiredHealthy: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetStatus.expectedPods)
    pub expectedPods: ::std::option::Option<i32>,
    #[serde(default)]
    // @@protoc_insertion_point(field:api.policy.v1beta1.PodDisruptionBudgetStatus.conditions)
    pub conditions: ::std::vec::Vec<crate::v1_32::apimachinery::pkg::apis::meta::v1::Condition>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:api.policy.v1beta1.PodDisruptionBudgetStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodDisruptionBudgetStatus {
    fn default() -> &'a PodDisruptionBudgetStatus {
        <PodDisruptionBudgetStatus as ::protobuf::Message>::default_instance()
    }
}

impl PodDisruptionBudgetStatus {
    pub fn new() -> PodDisruptionBudgetStatus {
        ::std::default::Default::default()
    }

    // optional int64 observedGeneration = 1;

    pub fn observedGeneration(&self) -> i64 {
        self.observedGeneration.unwrap_or(0)
    }

    pub fn clear_observedGeneration(&mut self) {
        self.observedGeneration = ::std::option::Option::None;
    }

    pub fn has_observedGeneration(&self) -> bool {
        self.observedGeneration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_observedGeneration(&mut self, v: i64) {
        self.observedGeneration = ::std::option::Option::Some(v);
    }

    // repeated .api.policy.v1beta1.PodDisruptionBudgetStatus.DisruptedPodsEntry disruptedPods = 2;

    pub fn disruptedPods(&self) -> &::std::collections::BTreeMap<::std::string::String, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time> {
        &self.disruptedPods
    }

    pub fn clear_disruptedPods(&mut self) {
        self.disruptedPods.clear();
    }

    // Param is passed by value, moved
    pub fn set_disruptedPods(&mut self, v: ::std::collections::BTreeMap<::std::string::String, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time>) {
        self.disruptedPods = v;
    }

    // Mutable pointer to the field.
    pub fn mut_disruptedPods(&mut self) -> &mut ::std::collections::BTreeMap<::std::string::String, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time> {
        &mut self.disruptedPods
    }

    // Take field
    pub fn take_disruptedPods(&mut self) -> ::std::collections::BTreeMap<::std::string::String, crate::v1_32::apimachinery::pkg::apis::meta::v1::Time> {
        ::std::mem::replace(&mut self.disruptedPods, ::std::collections::BTreeMap::new())
    }

    // optional int32 disruptionsAllowed = 3;

    pub fn disruptionsAllowed(&self) -> i32 {
        self.disruptionsAllowed.unwrap_or(0)
    }

    pub fn clear_disruptionsAllowed(&mut self) {
        self.disruptionsAllowed = ::std::option::Option::None;
    }

    pub fn has_disruptionsAllowed(&self) -> bool {
        self.disruptionsAllowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_disruptionsAllowed(&mut self, v: i32) {
        self.disruptionsAllowed = ::std::option::Option::Some(v);
    }

    // optional int32 currentHealthy = 4;

    pub fn currentHealthy(&self) -> i32 {
        self.currentHealthy.unwrap_or(0)
    }

    pub fn clear_currentHealthy(&mut self) {
        self.currentHealthy = ::std::option::Option::None;
    }

    pub fn has_currentHealthy(&self) -> bool {
        self.currentHealthy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_currentHealthy(&mut self, v: i32) {
        self.currentHealthy = ::std::option::Option::Some(v);
    }

    // optional int32 desiredHealthy = 5;

    pub fn desiredHealthy(&self) -> i32 {
        self.desiredHealthy.unwrap_or(0)
    }

    pub fn clear_desiredHealthy(&mut self) {
        self.desiredHealthy = ::std::option::Option::None;
    }

    pub fn has_desiredHealthy(&self) -> bool {
        self.desiredHealthy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_desiredHealthy(&mut self, v: i32) {
        self.desiredHealthy = ::std::option::Option::Some(v);
    }

    // optional int32 expectedPods = 6;

    pub fn expectedPods(&self) -> i32 {
        self.expectedPods.unwrap_or(0)
    }

    pub fn clear_expectedPods(&mut self) {
        self.expectedPods = ::std::option::Option::None;
    }

    pub fn has_expectedPods(&self) -> bool {
        self.expectedPods.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expectedPods(&mut self, v: i32) {
        self.expectedPods = ::std::option::Option::Some(v);
    }

    // repeated .apimachinery.pkg.apis.meta.v1.Condition conditions = 7;

    pub fn conditions(&self) -> &[crate::v1_32::apimachinery::pkg::apis::meta::v1::Condition] {
        &self.conditions
    }

    pub fn clear_conditions(&mut self) {
        self.conditions.clear();
    }

    // Param is passed by value, moved
    pub fn set_conditions(&mut self, v: ::std::vec::Vec<crate::v1_32::apimachinery::pkg::apis::meta::v1::Condition>) {
        self.conditions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_conditions(&mut self) -> &mut ::std::vec::Vec<crate::v1_32::apimachinery::pkg::apis::meta::v1::Condition> {
        &mut self.conditions
    }

    // Take field
    pub fn take_conditions(&mut self) -> ::std::vec::Vec<crate::v1_32::apimachinery::pkg::apis::meta::v1::Condition> {
        ::std::mem::replace(&mut self.conditions, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "observedGeneration",
            |m: &PodDisruptionBudgetStatus| { &m.observedGeneration },
            |m: &mut PodDisruptionBudgetStatus| { &mut m.observedGeneration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "disruptedPods",
            |m: &PodDisruptionBudgetStatus| { &m.disruptedPods },
            |m: &mut PodDisruptionBudgetStatus| { &mut m.disruptedPods },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "disruptionsAllowed",
            |m: &PodDisruptionBudgetStatus| { &m.disruptionsAllowed },
            |m: &mut PodDisruptionBudgetStatus| { &mut m.disruptionsAllowed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "currentHealthy",
            |m: &PodDisruptionBudgetStatus| { &m.currentHealthy },
            |m: &mut PodDisruptionBudgetStatus| { &mut m.currentHealthy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "desiredHealthy",
            |m: &PodDisruptionBudgetStatus| { &m.desiredHealthy },
            |m: &mut PodDisruptionBudgetStatus| { &mut m.desiredHealthy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "expectedPods",
            |m: &PodDisruptionBudgetStatus| { &m.expectedPods },
            |m: &mut PodDisruptionBudgetStatus| { &mut m.expectedPods },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "conditions",
            |m: &PodDisruptionBudgetStatus| { &m.conditions },
            |m: &mut PodDisruptionBudgetStatus| { &mut m.conditions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodDisruptionBudgetStatus>(
            "PodDisruptionBudgetStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodDisruptionBudgetStatus {
    const NAME: &'static str = "PodDisruptionBudgetStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.observedGeneration = ::std::option::Option::Some(is.read_int64()?);
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.disruptedPods.insert(key, value);
                },
                24 => {
                    self.disruptionsAllowed = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.currentHealthy = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.desiredHealthy = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.expectedPods = ::std::option::Option::Some(is.read_int32()?);
                },
                58 => {
                    self.conditions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.observedGeneration {
            my_size += ::protobuf::rt::int64_size(1, v);
        }
        for (k, v) in &self.disruptedPods {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.disruptionsAllowed {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.currentHealthy {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.desiredHealthy {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.expectedPods {
            my_size += ::protobuf::rt::int32_size(6, v);
        }
        for value in &self.conditions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.observedGeneration {
            os.write_int64(1, v)?;
        }
        for (k, v) in &self.disruptedPods {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.disruptionsAllowed {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.currentHealthy {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.desiredHealthy {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.expectedPods {
            os.write_int32(6, v)?;
        }
        for v in &self.conditions {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodDisruptionBudgetStatus {
        PodDisruptionBudgetStatus::new()
    }

    fn clear(&mut self) {
        self.observedGeneration = ::std::option::Option::None;
        self.disruptedPods.clear();
        self.disruptionsAllowed = ::std::option::Option::None;
        self.currentHealthy = ::std::option::Option::None;
        self.desiredHealthy = ::std::option::Option::None;
        self.expectedPods = ::std::option::Option::None;
        self.conditions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodDisruptionBudgetStatus {
        static instance: ::protobuf::rt::Lazy<PodDisruptionBudgetStatus> = ::protobuf::rt::Lazy::new();
        instance.get(PodDisruptionBudgetStatus::new)
    }
}

impl ::protobuf::MessageFull for PodDisruptionBudgetStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodDisruptionBudgetStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodDisruptionBudgetStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodDisruptionBudgetStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"api/policy/v1beta1/generated.proto\x12\x12api.policy.v1beta1\x1a-api\
    machinery/pkg/apis/meta/v1/generated.proto\x1a(apimachinery/pkg/runtime/\
    generated.proto\x1a/apimachinery/pkg/runtime/schema/generated.proto\x1a,\
    apimachinery/pkg/util/intstr/generated.proto\"\xa5\x01\n\x08Eviction\x12\
    E\n\x08metadata\x18\x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.Obj\
    ectMetaR\x08metadata\x12R\n\rdeleteOptions\x18\x02\x20\x01(\x0b2,.apimac\
    hinery.pkg.apis.meta.v1.DeleteOptionsR\rdeleteOptions\"\xe4\x01\n\x13Pod\
    DisruptionBudget\x12E\n\x08metadata\x18\x01\x20\x01(\x0b2).apimachinery.\
    pkg.apis.meta.v1.ObjectMetaR\x08metadata\x12?\n\x04spec\x18\x02\x20\x01(\
    \x0b2+.api.policy.v1beta1.PodDisruptionBudgetSpecR\x04spec\x12E\n\x06sta\
    tus\x18\x03\x20\x01(\x0b2-.api.policy.v1beta1.PodDisruptionBudgetStatusR\
    \x06status\"\x9d\x01\n\x17PodDisruptionBudgetList\x12C\n\x08metadata\x18\
    \x01\x20\x01(\x0b2'.apimachinery.pkg.apis.meta.v1.ListMetaR\x08metadata\
    \x12=\n\x05items\x18\x02\x20\x03(\x0b2'.api.policy.v1beta1.PodDisruption\
    BudgetR\x05items\"\xc5\x02\n\x17PodDisruptionBudgetSpec\x12M\n\x0cminAva\
    ilable\x18\x01\x20\x01(\x0b2).apimachinery.pkg.util.intstr.IntOrStringR\
    \x0cminAvailable\x12H\n\x08selector\x18\x02\x20\x01(\x0b2,.apimachinery.\
    pkg.apis.meta.v1.LabelSelectorR\x08selector\x12Q\n\x0emaxUnavailable\x18\
    \x03\x20\x01(\x0b2).apimachinery.pkg.util.intstr.IntOrStringR\x0emaxUnav\
    ailable\x12>\n\x1aunhealthyPodEvictionPolicy\x18\x04\x20\x01(\tR\x1aunhe\
    althyPodEvictionPolicy\"\x88\x04\n\x19PodDisruptionBudgetStatus\x12.\n\
    \x12observedGeneration\x18\x01\x20\x01(\x03R\x12observedGeneration\x12f\
    \n\rdisruptedPods\x18\x02\x20\x03(\x0b2@.api.policy.v1beta1.PodDisruptio\
    nBudgetStatus.DisruptedPodsEntryR\rdisruptedPods\x12.\n\x12disruptionsAl\
    lowed\x18\x03\x20\x01(\x05R\x12disruptionsAllowed\x12&\n\x0ecurrentHealt\
    hy\x18\x04\x20\x01(\x05R\x0ecurrentHealthy\x12&\n\x0edesiredHealthy\x18\
    \x05\x20\x01(\x05R\x0edesiredHealthy\x12\"\n\x0cexpectedPods\x18\x06\x20\
    \x01(\x05R\x0cexpectedPods\x12H\n\nconditions\x18\x07\x20\x03(\x0b2(.api\
    machinery.pkg.apis.meta.v1.ConditionR\nconditions\x1ae\n\x12DisruptedPod\
    sEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x129\n\x05value\x18\
    \x02\x20\x01(\x0b2#.apimachinery.pkg.apis.meta.v1.TimeR\x05value:\x028\
    \x01B\x1bZ\x19k8s.io/api/policy/v1beta1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            deps.push(super::v1beta1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Eviction::generated_message_descriptor_data());
            messages.push(PodDisruptionBudget::generated_message_descriptor_data());
            messages.push(PodDisruptionBudgetList::generated_message_descriptor_data());
            messages.push(PodDisruptionBudgetSpec::generated_message_descriptor_data());
            messages.push(PodDisruptionBudgetStatus::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
