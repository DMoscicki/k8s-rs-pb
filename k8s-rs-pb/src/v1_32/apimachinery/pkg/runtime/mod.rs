// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 30.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `apimachinery/pkg/runtime/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:apimachinery.pkg.runtime.RawExtension)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RawExtension {
    // message fields
    // @@protoc_insertion_point(field:apimachinery.pkg.runtime.RawExtension.raw)
    pub raw: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:apimachinery.pkg.runtime.RawExtension.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RawExtension {
    fn default() -> &'a RawExtension {
        <RawExtension as ::protobuf::Message>::default_instance()
    }
}

impl RawExtension {
    pub fn new() -> RawExtension {
        ::std::default::Default::default()
    }

    // optional bytes raw = 1;

    pub fn raw(&self) -> &[u8] {
        match self.raw.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_raw(&mut self) {
        self.raw = ::std::option::Option::None;
    }

    pub fn has_raw(&self) -> bool {
        self.raw.is_some()
    }

    // Param is passed by value, moved
    pub fn set_raw(&mut self, v: ::std::vec::Vec<u8>) {
        self.raw = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.raw.is_none() {
            self.raw = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.raw.as_mut().unwrap()
    }

    // Take field
    pub fn take_raw(&mut self) -> ::std::vec::Vec<u8> {
        self.raw.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "raw",
            |m: &RawExtension| { &m.raw },
            |m: &mut RawExtension| { &mut m.raw },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RawExtension>(
            "RawExtension",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RawExtension {
    const NAME: &'static str = "RawExtension";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.raw = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.raw.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.raw.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RawExtension {
        RawExtension::new()
    }

    fn clear(&mut self) {
        self.raw = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RawExtension {
        static instance: RawExtension = RawExtension {
            raw: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RawExtension {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RawExtension").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RawExtension {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RawExtension {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:apimachinery.pkg.runtime.TypeMeta)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TypeMeta {
    // message fields
    // @@protoc_insertion_point(field:apimachinery.pkg.runtime.TypeMeta.apiVersion)
    pub apiVersion: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.runtime.TypeMeta.kind)
    pub kind: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:apimachinery.pkg.runtime.TypeMeta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TypeMeta {
    fn default() -> &'a TypeMeta {
        <TypeMeta as ::protobuf::Message>::default_instance()
    }
}

impl TypeMeta {
    pub fn new() -> TypeMeta {
        ::std::default::Default::default()
    }

    // optional string apiVersion = 1;

    pub fn apiVersion(&self) -> &str {
        match self.apiVersion.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_apiVersion(&mut self) {
        self.apiVersion = ::std::option::Option::None;
    }

    pub fn has_apiVersion(&self) -> bool {
        self.apiVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apiVersion(&mut self, v: ::std::string::String) {
        self.apiVersion = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apiVersion(&mut self) -> &mut ::std::string::String {
        if self.apiVersion.is_none() {
            self.apiVersion = ::std::option::Option::Some(::std::string::String::new());
        }
        self.apiVersion.as_mut().unwrap()
    }

    // Take field
    pub fn take_apiVersion(&mut self) -> ::std::string::String {
        self.apiVersion.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string kind = 2;

    pub fn kind(&self) -> &str {
        match self.kind.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_kind(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_kind(&self) -> bool {
        self.kind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: ::std::string::String) {
        self.kind = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind(&mut self) -> &mut ::std::string::String {
        if self.kind.is_none() {
            self.kind = ::std::option::Option::Some(::std::string::String::new());
        }
        self.kind.as_mut().unwrap()
    }

    // Take field
    pub fn take_kind(&mut self) -> ::std::string::String {
        self.kind.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "apiVersion",
            |m: &TypeMeta| { &m.apiVersion },
            |m: &mut TypeMeta| { &mut m.apiVersion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "kind",
            |m: &TypeMeta| { &m.kind },
            |m: &mut TypeMeta| { &mut m.kind },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TypeMeta>(
            "TypeMeta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TypeMeta {
    const NAME: &'static str = "TypeMeta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.apiVersion = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.kind = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.apiVersion.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.kind.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.apiVersion.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.kind.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TypeMeta {
        TypeMeta::new()
    }

    fn clear(&mut self) {
        self.apiVersion = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TypeMeta {
        static instance: TypeMeta = TypeMeta {
            apiVersion: ::std::option::Option::None,
            kind: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TypeMeta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TypeMeta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TypeMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TypeMeta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:apimachinery.pkg.runtime.Unknown)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Unknown {
    // message fields
    #[serde(with = "crate::v1_32::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:apimachinery.pkg.runtime.Unknown.typeMeta)
    pub typeMeta: ::protobuf::MessageField<TypeMeta>,
    // @@protoc_insertion_point(field:apimachinery.pkg.runtime.Unknown.raw)
    pub raw: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:apimachinery.pkg.runtime.Unknown.contentEncoding)
    pub contentEncoding: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:apimachinery.pkg.runtime.Unknown.contentType)
    pub contentType: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:apimachinery.pkg.runtime.Unknown.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Unknown {
    fn default() -> &'a Unknown {
        <Unknown as ::protobuf::Message>::default_instance()
    }
}

impl Unknown {
    pub fn new() -> Unknown {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.runtime.TypeMeta typeMeta = 1;

    pub fn typeMeta(&self) -> &TypeMeta {
        self.typeMeta.as_ref().unwrap_or_else(|| <TypeMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_typeMeta(&mut self) {
        self.typeMeta.clear();
    }

    pub fn has_typeMeta(&self) -> bool {
        self.typeMeta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_typeMeta(&mut self, v: TypeMeta) {
        self.typeMeta = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_typeMeta(&mut self) -> &mut TypeMeta {
        self.typeMeta.mut_or_insert_default()
    }

    // Take field
    pub fn take_typeMeta(&mut self) -> TypeMeta {
        self.typeMeta.take().unwrap_or_else(|| TypeMeta::new())
    }

    // optional bytes raw = 2;

    pub fn raw(&self) -> &[u8] {
        match self.raw.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_raw(&mut self) {
        self.raw = ::std::option::Option::None;
    }

    pub fn has_raw(&self) -> bool {
        self.raw.is_some()
    }

    // Param is passed by value, moved
    pub fn set_raw(&mut self, v: ::std::vec::Vec<u8>) {
        self.raw = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.raw.is_none() {
            self.raw = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.raw.as_mut().unwrap()
    }

    // Take field
    pub fn take_raw(&mut self) -> ::std::vec::Vec<u8> {
        self.raw.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string contentEncoding = 3;

    pub fn contentEncoding(&self) -> &str {
        match self.contentEncoding.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_contentEncoding(&mut self) {
        self.contentEncoding = ::std::option::Option::None;
    }

    pub fn has_contentEncoding(&self) -> bool {
        self.contentEncoding.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contentEncoding(&mut self, v: ::std::string::String) {
        self.contentEncoding = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contentEncoding(&mut self) -> &mut ::std::string::String {
        if self.contentEncoding.is_none() {
            self.contentEncoding = ::std::option::Option::Some(::std::string::String::new());
        }
        self.contentEncoding.as_mut().unwrap()
    }

    // Take field
    pub fn take_contentEncoding(&mut self) -> ::std::string::String {
        self.contentEncoding.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string contentType = 4;

    pub fn contentType(&self) -> &str {
        match self.contentType.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_contentType(&mut self) {
        self.contentType = ::std::option::Option::None;
    }

    pub fn has_contentType(&self) -> bool {
        self.contentType.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contentType(&mut self, v: ::std::string::String) {
        self.contentType = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contentType(&mut self) -> &mut ::std::string::String {
        if self.contentType.is_none() {
            self.contentType = ::std::option::Option::Some(::std::string::String::new());
        }
        self.contentType.as_mut().unwrap()
    }

    // Take field
    pub fn take_contentType(&mut self) -> ::std::string::String {
        self.contentType.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TypeMeta>(
            "typeMeta",
            |m: &Unknown| { &m.typeMeta },
            |m: &mut Unknown| { &mut m.typeMeta },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "raw",
            |m: &Unknown| { &m.raw },
            |m: &mut Unknown| { &mut m.raw },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "contentEncoding",
            |m: &Unknown| { &m.contentEncoding },
            |m: &mut Unknown| { &mut m.contentEncoding },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "contentType",
            |m: &Unknown| { &m.contentType },
            |m: &mut Unknown| { &mut m.contentType },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Unknown>(
            "Unknown",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Unknown {
    const NAME: &'static str = "Unknown";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.typeMeta)?;
                },
                18 => {
                    self.raw = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.contentEncoding = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.contentType = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.typeMeta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.raw.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.contentEncoding.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.contentType.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.typeMeta.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.raw.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.contentEncoding.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.contentType.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Unknown {
        Unknown::new()
    }

    fn clear(&mut self) {
        self.typeMeta.clear();
        self.raw = ::std::option::Option::None;
        self.contentEncoding = ::std::option::Option::None;
        self.contentType = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Unknown {
        static instance: Unknown = Unknown {
            typeMeta: ::protobuf::MessageField::none(),
            raw: ::std::option::Option::None,
            contentEncoding: ::std::option::Option::None,
            contentType: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Unknown {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Unknown").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Unknown {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Unknown {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(apimachinery/pkg/runtime/generated.proto\x12\x18apimachinery.pkg.runt\
    ime\"\x20\n\x0cRawExtension\x12\x10\n\x03raw\x18\x01\x20\x01(\x0cR\x03ra\
    w\">\n\x08TypeMeta\x12\x1e\n\napiVersion\x18\x01\x20\x01(\tR\napiVersion\
    \x12\x12\n\x04kind\x18\x02\x20\x01(\tR\x04kind\"\xa7\x01\n\x07Unknown\
    \x12>\n\x08typeMeta\x18\x01\x20\x01(\x0b2\".apimachinery.pkg.runtime.Typ\
    eMetaR\x08typeMeta\x12\x10\n\x03raw\x18\x02\x20\x01(\x0cR\x03raw\x12(\n\
    \x0fcontentEncoding\x18\x03\x20\x01(\tR\x0fcontentEncoding\x12\x20\n\x0b\
    contentType\x18\x04\x20\x01(\tR\x0bcontentTypeB!Z\x1fk8s.io/apimachinery\
    /pkg/runtime\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(RawExtension::generated_message_descriptor_data());
            messages.push(TypeMeta::generated_message_descriptor_data());
            messages.push(Unknown::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
