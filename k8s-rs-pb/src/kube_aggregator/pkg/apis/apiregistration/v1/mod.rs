// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kube-aggregator/pkg/apis/apiregistration/v1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:kube_aggregator.pkg.apis.apiregistration.v1.APIService)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct APIService {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIService.metadata)
    pub metadata: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::ObjectMeta>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIService.spec)
    pub spec: ::protobuf::MessageField<APIServiceSpec>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIService.status)
    pub status: ::protobuf::MessageField<APIServiceStatus>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:kube_aggregator.pkg.apis.apiregistration.v1.APIService.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a APIService {
    fn default() -> &'a APIService {
        <APIService as ::protobuf::Message>::default_instance()
    }
}

impl APIService {
    pub fn new() -> APIService {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

    pub fn metadata(&self) -> &crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::ObjectMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::ObjectMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::ObjectMeta {
        self.metadata.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::ObjectMeta::new())
    }

    // optional .kube_aggregator.pkg.apis.apiregistration.v1.APIServiceSpec spec = 2;

    pub fn spec(&self) -> &APIServiceSpec {
        self.spec.as_ref().unwrap_or_else(|| <APIServiceSpec as ::protobuf::Message>::default_instance())
    }

    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: APIServiceSpec) {
        self.spec = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut APIServiceSpec {
        self.spec.mut_or_insert_default()
    }

    // Take field
    pub fn take_spec(&mut self) -> APIServiceSpec {
        self.spec.take().unwrap_or_else(|| APIServiceSpec::new())
    }

    // optional .kube_aggregator.pkg.apis.apiregistration.v1.APIServiceStatus status = 3;

    pub fn status(&self) -> &APIServiceStatus {
        self.status.as_ref().unwrap_or_else(|| <APIServiceStatus as ::protobuf::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: APIServiceStatus) {
        self.status = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut APIServiceStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> APIServiceStatus {
        self.status.take().unwrap_or_else(|| APIServiceStatus::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::ObjectMeta>(
            "metadata",
            |m: &APIService| { &m.metadata },
            |m: &mut APIService| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, APIServiceSpec>(
            "spec",
            |m: &APIService| { &m.spec },
            |m: &mut APIService| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, APIServiceStatus>(
            "status",
            |m: &APIService| { &m.status },
            |m: &mut APIService| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<APIService>(
            "APIService",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for APIService {
    const NAME: &'static str = "APIService";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> APIService {
        APIService::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.spec.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static APIService {
        static instance: APIService = APIService {
            metadata: ::protobuf::MessageField::none(),
            spec: ::protobuf::MessageField::none(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for APIService {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("APIService").unwrap()).clone()
    }
}

impl ::std::fmt::Display for APIService {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for APIService {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceCondition)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct APIServiceCondition {
    // message fields
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceCondition.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceCondition.status)
    pub status: ::std::option::Option<::std::string::String>,
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceCondition.lastTransitionTime)
    pub lastTransitionTime: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::Time>,
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceCondition.reason)
    pub reason: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceCondition.message)
    pub message: ::std::option::Option<::std::string::String>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceCondition.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a APIServiceCondition {
    fn default() -> &'a APIServiceCondition {
        <APIServiceCondition as ::protobuf::Message>::default_instance()
    }
}

impl APIServiceCondition {
    pub fn new() -> APIServiceCondition {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string status = 2;

    pub fn status(&self) -> &str {
        match self.status.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        if self.status.is_none() {
            self.status = ::std::option::Option::Some(::std::string::String::new());
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        self.status.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

    pub fn lastTransitionTime(&self) -> &crate::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::Time as ::protobuf::Message>::default_instance())
    }

    pub fn clear_lastTransitionTime(&mut self) {
        self.lastTransitionTime.clear();
    }

    pub fn has_lastTransitionTime(&self) -> bool {
        self.lastTransitionTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastTransitionTime(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::Time) {
        self.lastTransitionTime = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lastTransitionTime(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.mut_or_insert_default()
    }

    // Take field
    pub fn take_lastTransitionTime(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::Time {
        self.lastTransitionTime.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::Time::new())
    }

    // optional string reason = 4;

    pub fn reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string message = 5;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &APIServiceCondition| { &m.type_ },
            |m: &mut APIServiceCondition| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status",
            |m: &APIServiceCondition| { &m.status },
            |m: &mut APIServiceCondition| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::Time>(
            "lastTransitionTime",
            |m: &APIServiceCondition| { &m.lastTransitionTime },
            |m: &mut APIServiceCondition| { &mut m.lastTransitionTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &APIServiceCondition| { &m.reason },
            |m: &mut APIServiceCondition| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &APIServiceCondition| { &m.message },
            |m: &mut APIServiceCondition| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<APIServiceCondition>(
            "APIServiceCondition",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for APIServiceCondition {
    const NAME: &'static str = "APIServiceCondition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.status = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lastTransitionTime)?;
                },
                34 => {
                    self.reason = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.status.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.lastTransitionTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.reason.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.status.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.lastTransitionTime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.reason.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> APIServiceCondition {
        APIServiceCondition::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.status = ::std::option::Option::None;
        self.lastTransitionTime.clear();
        self.reason = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static APIServiceCondition {
        static instance: APIServiceCondition = APIServiceCondition {
            type_: ::std::option::Option::None,
            status: ::std::option::Option::None,
            lastTransitionTime: ::protobuf::MessageField::none(),
            reason: ::std::option::Option::None,
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for APIServiceCondition {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("APIServiceCondition").unwrap()).clone()
    }
}

impl ::std::fmt::Display for APIServiceCondition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for APIServiceCondition {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct APIServiceList {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceList.metadata)
    pub metadata: ::protobuf::MessageField<crate::apimachinery::pkg::apis::meta::v1::ListMeta>,
    #[serde(default)]
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceList.items)
    pub items: ::std::vec::Vec<APIService>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a APIServiceList {
    fn default() -> &'a APIServiceList {
        <APIServiceList as ::protobuf::Message>::default_instance()
    }
}

impl APIServiceList {
    pub fn new() -> APIServiceList {
        ::std::default::Default::default()
    }

    // optional .apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

    pub fn metadata(&self) -> &crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.as_ref().unwrap_or_else(|| <crate::apimachinery::pkg::apis::meta::v1::ListMeta as ::protobuf::Message>::default_instance())
    }

    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: crate::apimachinery::pkg::apis::meta::v1::ListMeta) {
        self.metadata = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.mut_or_insert_default()
    }

    // Take field
    pub fn take_metadata(&mut self) -> crate::apimachinery::pkg::apis::meta::v1::ListMeta {
        self.metadata.take().unwrap_or_else(|| crate::apimachinery::pkg::apis::meta::v1::ListMeta::new())
    }

    // repeated .kube_aggregator.pkg.apis.apiregistration.v1.APIService items = 2;

    pub fn items(&self) -> &[APIService] {
        &self.items
    }

    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::vec::Vec<APIService>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::vec::Vec<APIService> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::vec::Vec<APIService> {
        ::std::mem::replace(&mut self.items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, crate::apimachinery::pkg::apis::meta::v1::ListMeta>(
            "metadata",
            |m: &APIServiceList| { &m.metadata },
            |m: &mut APIServiceList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &APIServiceList| { &m.items },
            |m: &mut APIServiceList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<APIServiceList>(
            "APIServiceList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for APIServiceList {
    const NAME: &'static str = "APIServiceList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> APIServiceList {
        APIServiceList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static APIServiceList {
        static instance: APIServiceList = APIServiceList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for APIServiceList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("APIServiceList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for APIServiceList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for APIServiceList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceSpec)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct APIServiceSpec {
    // message fields
    #[serde(with = "crate::MessageFieldDef")]
    #[serde(default)]
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceSpec.service)
    pub service: ::protobuf::MessageField<ServiceReference>,
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceSpec.group)
    pub group: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceSpec.version)
    pub version: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceSpec.insecureSkipTLSVerify)
    pub insecureSkipTLSVerify: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceSpec.caBundle)
    pub caBundle: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceSpec.groupPriorityMinimum)
    pub groupPriorityMinimum: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceSpec.versionPriority)
    pub versionPriority: ::std::option::Option<i32>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a APIServiceSpec {
    fn default() -> &'a APIServiceSpec {
        <APIServiceSpec as ::protobuf::Message>::default_instance()
    }
}

impl APIServiceSpec {
    pub fn new() -> APIServiceSpec {
        ::std::default::Default::default()
    }

    // optional .kube_aggregator.pkg.apis.apiregistration.v1.ServiceReference service = 1;

    pub fn service(&self) -> &ServiceReference {
        self.service.as_ref().unwrap_or_else(|| <ServiceReference as ::protobuf::Message>::default_instance())
    }

    pub fn clear_service(&mut self) {
        self.service.clear();
    }

    pub fn has_service(&self) -> bool {
        self.service.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: ServiceReference) {
        self.service = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service(&mut self) -> &mut ServiceReference {
        self.service.mut_or_insert_default()
    }

    // Take field
    pub fn take_service(&mut self) -> ServiceReference {
        self.service.take().unwrap_or_else(|| ServiceReference::new())
    }

    // optional string group = 2;

    pub fn group(&self) -> &str {
        match self.group.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_group(&mut self) {
        self.group = ::std::option::Option::None;
    }

    pub fn has_group(&self) -> bool {
        self.group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        if self.group.is_none() {
            self.group = ::std::option::Option::Some(::std::string::String::new());
        }
        self.group.as_mut().unwrap()
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        self.group.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string version = 3;

    pub fn version(&self) -> &str {
        match self.version.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        if self.version.is_none() {
            self.version = ::std::option::Option::Some(::std::string::String::new());
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        self.version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool insecureSkipTLSVerify = 4;

    pub fn insecureSkipTLSVerify(&self) -> bool {
        self.insecureSkipTLSVerify.unwrap_or(false)
    }

    pub fn clear_insecureSkipTLSVerify(&mut self) {
        self.insecureSkipTLSVerify = ::std::option::Option::None;
    }

    pub fn has_insecureSkipTLSVerify(&self) -> bool {
        self.insecureSkipTLSVerify.is_some()
    }

    // Param is passed by value, moved
    pub fn set_insecureSkipTLSVerify(&mut self, v: bool) {
        self.insecureSkipTLSVerify = ::std::option::Option::Some(v);
    }

    // optional bytes caBundle = 5;

    pub fn caBundle(&self) -> &[u8] {
        match self.caBundle.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_caBundle(&mut self) {
        self.caBundle = ::std::option::Option::None;
    }

    pub fn has_caBundle(&self) -> bool {
        self.caBundle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_caBundle(&mut self, v: ::std::vec::Vec<u8>) {
        self.caBundle = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_caBundle(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.caBundle.is_none() {
            self.caBundle = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.caBundle.as_mut().unwrap()
    }

    // Take field
    pub fn take_caBundle(&mut self) -> ::std::vec::Vec<u8> {
        self.caBundle.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional int32 groupPriorityMinimum = 7;

    pub fn groupPriorityMinimum(&self) -> i32 {
        self.groupPriorityMinimum.unwrap_or(0)
    }

    pub fn clear_groupPriorityMinimum(&mut self) {
        self.groupPriorityMinimum = ::std::option::Option::None;
    }

    pub fn has_groupPriorityMinimum(&self) -> bool {
        self.groupPriorityMinimum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_groupPriorityMinimum(&mut self, v: i32) {
        self.groupPriorityMinimum = ::std::option::Option::Some(v);
    }

    // optional int32 versionPriority = 8;

    pub fn versionPriority(&self) -> i32 {
        self.versionPriority.unwrap_or(0)
    }

    pub fn clear_versionPriority(&mut self) {
        self.versionPriority = ::std::option::Option::None;
    }

    pub fn has_versionPriority(&self) -> bool {
        self.versionPriority.is_some()
    }

    // Param is passed by value, moved
    pub fn set_versionPriority(&mut self, v: i32) {
        self.versionPriority = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ServiceReference>(
            "service",
            |m: &APIServiceSpec| { &m.service },
            |m: &mut APIServiceSpec| { &mut m.service },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "group",
            |m: &APIServiceSpec| { &m.group },
            |m: &mut APIServiceSpec| { &mut m.group },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &APIServiceSpec| { &m.version },
            |m: &mut APIServiceSpec| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "insecureSkipTLSVerify",
            |m: &APIServiceSpec| { &m.insecureSkipTLSVerify },
            |m: &mut APIServiceSpec| { &mut m.insecureSkipTLSVerify },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "caBundle",
            |m: &APIServiceSpec| { &m.caBundle },
            |m: &mut APIServiceSpec| { &mut m.caBundle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "groupPriorityMinimum",
            |m: &APIServiceSpec| { &m.groupPriorityMinimum },
            |m: &mut APIServiceSpec| { &mut m.groupPriorityMinimum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "versionPriority",
            |m: &APIServiceSpec| { &m.versionPriority },
            |m: &mut APIServiceSpec| { &mut m.versionPriority },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<APIServiceSpec>(
            "APIServiceSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for APIServiceSpec {
    const NAME: &'static str = "APIServiceSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.service)?;
                },
                18 => {
                    self.group = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.version = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.insecureSkipTLSVerify = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    self.caBundle = ::std::option::Option::Some(is.read_bytes()?);
                },
                56 => {
                    self.groupPriorityMinimum = ::std::option::Option::Some(is.read_int32()?);
                },
                64 => {
                    self.versionPriority = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.service.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.group.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.insecureSkipTLSVerify {
            my_size += 1 + 1;
        }
        if let Some(v) = self.caBundle.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        if let Some(v) = self.groupPriorityMinimum {
            my_size += ::protobuf::rt::int32_size(7, v);
        }
        if let Some(v) = self.versionPriority {
            my_size += ::protobuf::rt::int32_size(8, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.service.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.group.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.version.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.insecureSkipTLSVerify {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.caBundle.as_ref() {
            os.write_bytes(5, v)?;
        }
        if let Some(v) = self.groupPriorityMinimum {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.versionPriority {
            os.write_int32(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> APIServiceSpec {
        APIServiceSpec::new()
    }

    fn clear(&mut self) {
        self.service.clear();
        self.group = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.insecureSkipTLSVerify = ::std::option::Option::None;
        self.caBundle = ::std::option::Option::None;
        self.groupPriorityMinimum = ::std::option::Option::None;
        self.versionPriority = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static APIServiceSpec {
        static instance: APIServiceSpec = APIServiceSpec {
            service: ::protobuf::MessageField::none(),
            group: ::std::option::Option::None,
            version: ::std::option::Option::None,
            insecureSkipTLSVerify: ::std::option::Option::None,
            caBundle: ::std::option::Option::None,
            groupPriorityMinimum: ::std::option::Option::None,
            versionPriority: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for APIServiceSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("APIServiceSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for APIServiceSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for APIServiceSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct APIServiceStatus {
    // message fields
    #[serde(default)]
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceStatus.conditions)
    pub conditions: ::std::vec::Vec<APIServiceCondition>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:kube_aggregator.pkg.apis.apiregistration.v1.APIServiceStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a APIServiceStatus {
    fn default() -> &'a APIServiceStatus {
        <APIServiceStatus as ::protobuf::Message>::default_instance()
    }
}

impl APIServiceStatus {
    pub fn new() -> APIServiceStatus {
        ::std::default::Default::default()
    }

    // repeated .kube_aggregator.pkg.apis.apiregistration.v1.APIServiceCondition conditions = 1;

    pub fn conditions(&self) -> &[APIServiceCondition] {
        &self.conditions
    }

    pub fn clear_conditions(&mut self) {
        self.conditions.clear();
    }

    // Param is passed by value, moved
    pub fn set_conditions(&mut self, v: ::std::vec::Vec<APIServiceCondition>) {
        self.conditions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_conditions(&mut self) -> &mut ::std::vec::Vec<APIServiceCondition> {
        &mut self.conditions
    }

    // Take field
    pub fn take_conditions(&mut self) -> ::std::vec::Vec<APIServiceCondition> {
        ::std::mem::replace(&mut self.conditions, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "conditions",
            |m: &APIServiceStatus| { &m.conditions },
            |m: &mut APIServiceStatus| { &mut m.conditions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<APIServiceStatus>(
            "APIServiceStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for APIServiceStatus {
    const NAME: &'static str = "APIServiceStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.conditions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.conditions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.conditions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> APIServiceStatus {
        APIServiceStatus::new()
    }

    fn clear(&mut self) {
        self.conditions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static APIServiceStatus {
        static instance: APIServiceStatus = APIServiceStatus {
            conditions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for APIServiceStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("APIServiceStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for APIServiceStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for APIServiceStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(::serde::Deserialize)]
#[serde(rename_all = "snake_case")]
// @@protoc_insertion_point(message:kube_aggregator.pkg.apis.apiregistration.v1.ServiceReference)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServiceReference {
    // message fields
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.ServiceReference.namespace)
    pub namespace: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.ServiceReference.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:kube_aggregator.pkg.apis.apiregistration.v1.ServiceReference.port)
    pub port: ::std::option::Option<i32>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:kube_aggregator.pkg.apis.apiregistration.v1.ServiceReference.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServiceReference {
    fn default() -> &'a ServiceReference {
        <ServiceReference as ::protobuf::Message>::default_instance()
    }
}

impl ServiceReference {
    pub fn new() -> ServiceReference {
        ::std::default::Default::default()
    }

    // optional string namespace = 1;

    pub fn namespace(&self) -> &str {
        match self.namespace.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_namespace(&mut self) {
        self.namespace = ::std::option::Option::None;
    }

    pub fn has_namespace(&self) -> bool {
        self.namespace.is_some()
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        if self.namespace.is_none() {
            self.namespace = ::std::option::Option::Some(::std::string::String::new());
        }
        self.namespace.as_mut().unwrap()
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        self.namespace.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 port = 3;

    pub fn port(&self) -> i32 {
        self.port.unwrap_or(0)
    }

    pub fn clear_port(&mut self) {
        self.port = ::std::option::Option::None;
    }

    pub fn has_port(&self) -> bool {
        self.port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "namespace",
            |m: &ServiceReference| { &m.namespace },
            |m: &mut ServiceReference| { &mut m.namespace },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &ServiceReference| { &m.name },
            |m: &mut ServiceReference| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "port",
            |m: &ServiceReference| { &m.port },
            |m: &mut ServiceReference| { &mut m.port },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServiceReference>(
            "ServiceReference",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServiceReference {
    const NAME: &'static str = "ServiceReference";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.namespace = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.port = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.namespace.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.port {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.namespace.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.port {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServiceReference {
        ServiceReference::new()
    }

    fn clear(&mut self) {
        self.namespace = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.port = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServiceReference {
        static instance: ServiceReference = ServiceReference {
            namespace: ::std::option::Option::None,
            name: ::std::option::Option::None,
            port: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServiceReference {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServiceReference").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServiceReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceReference {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n;kube-aggregator/pkg/apis/apiregistration/v1/generated.proto\x12+kube_\
    aggregator.pkg.apis.apiregistration.v1\x1a-apimachinery/pkg/apis/meta/v1\
    /generated.proto\x1a(apimachinery/pkg/runtime/generated.proto\x1a/apimac\
    hinery/pkg/runtime/schema/generated.proto\"\xfb\x01\n\nAPIService\x12E\n\
    \x08metadata\x18\x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.Object\
    MetaR\x08metadata\x12O\n\x04spec\x18\x02\x20\x01(\x0b2;.kube_aggregator.\
    pkg.apis.apiregistration.v1.APIServiceSpecR\x04spec\x12U\n\x06status\x18\
    \x03\x20\x01(\x0b2=.kube_aggregator.pkg.apis.apiregistration.v1.APIServi\
    ceStatusR\x06status\"\xc8\x01\n\x13APIServiceCondition\x12\x12\n\x04type\
    \x18\x01\x20\x01(\tR\x04type\x12\x16\n\x06status\x18\x02\x20\x01(\tR\x06\
    status\x12S\n\x12lastTransitionTime\x18\x03\x20\x01(\x0b2#.apimachinery.\
    pkg.apis.meta.v1.TimeR\x12lastTransitionTime\x12\x16\n\x06reason\x18\x04\
    \x20\x01(\tR\x06reason\x12\x18\n\x07message\x18\x05\x20\x01(\tR\x07messa\
    ge\"\xa4\x01\n\x0eAPIServiceList\x12C\n\x08metadata\x18\x01\x20\x01(\x0b\
    2'.apimachinery.pkg.apis.meta.v1.ListMetaR\x08metadata\x12M\n\x05items\
    \x18\x02\x20\x03(\x0b27.kube_aggregator.pkg.apis.apiregistration.v1.APIS\
    erviceR\x05items\"\xc9\x02\n\x0eAPIServiceSpec\x12W\n\x07service\x18\x01\
    \x20\x01(\x0b2=.kube_aggregator.pkg.apis.apiregistration.v1.ServiceRefer\
    enceR\x07service\x12\x14\n\x05group\x18\x02\x20\x01(\tR\x05group\x12\x18\
    \n\x07version\x18\x03\x20\x01(\tR\x07version\x124\n\x15insecureSkipTLSVe\
    rify\x18\x04\x20\x01(\x08R\x15insecureSkipTLSVerify\x12\x1a\n\x08caBundl\
    e\x18\x05\x20\x01(\x0cR\x08caBundle\x122\n\x14groupPriorityMinimum\x18\
    \x07\x20\x01(\x05R\x14groupPriorityMinimum\x12(\n\x0fversionPriority\x18\
    \x08\x20\x01(\x05R\x0fversionPriority\"t\n\x10APIServiceStatus\x12`\n\nc\
    onditions\x18\x01\x20\x03(\x0b2@.kube_aggregator.pkg.apis.apiregistratio\
    n.v1.APIServiceConditionR\nconditions\"X\n\x10ServiceReference\x12\x1c\n\
    \tnamespace\x18\x01\x20\x01(\tR\tnamespace\x12\x12\n\x04name\x18\x02\x20\
    \x01(\tR\x04name\x12\x12\n\x04port\x18\x03\x20\x01(\x05R\x04portB4Z2k8s.\
    io/kube-aggregator/pkg/apis/apiregistration/v1\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            deps.push(super::v1::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(APIService::generated_message_descriptor_data());
            messages.push(APIServiceCondition::generated_message_descriptor_data());
            messages.push(APIServiceList::generated_message_descriptor_data());
            messages.push(APIServiceSpec::generated_message_descriptor_data());
            messages.push(APIServiceStatus::generated_message_descriptor_data());
            messages.push(ServiceReference::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
